
IntroMath.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006760  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  08006900  08006900  00016900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007318  08007318  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08007318  08007318  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007318  08007318  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08007320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  200001c8  080074e8  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  080074e8  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000030f8  00000000  00000000  0002023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b45  00000000  00000000  00023333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000388  00000000  00000000  00023e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000028f  00000000  00000000  00024200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fe37  00000000  00000000  0002448f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000035a9  00000000  00000000  000342c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00056c93  00000000  00000000  0003786f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002268  00000000  00000000  0008e504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0009076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068e8 	.word	0x080068e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	080068e8 	.word	0x080068e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <main>:
void write7segments(uint8_t *numero);
void transistorSwitch(void);
void suma(uint8_t *conteo);
void resta(uint8_t *conteo);

int main(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

	initSystem();
 8000d08:	f000 f994 	bl	8001034 <initSystem>
	sprintf(bufferPrint, "Empezar nuevo juego\n");
 8000d0c:	4995      	ldr	r1, [pc, #596]	; (8000f64 <main+0x260>)
 8000d0e:	4896      	ldr	r0, [pc, #600]	; (8000f68 <main+0x264>)
 8000d10:	f002 f94c 	bl	8002fac <siprintf>
	usart_writeMsg(&usartHojas, bufferPrint);
 8000d14:	4994      	ldr	r1, [pc, #592]	; (8000f68 <main+0x264>)
 8000d16:	4895      	ldr	r0, [pc, #596]	; (8000f6c <main+0x268>)
 8000d18:	f001 f997 	bl	800204a <usart_writeMsg>
	while (1) {

		if(flagRespuesta && flagRefresh){
 8000d1c:	4b94      	ldr	r3, [pc, #592]	; (8000f70 <main+0x26c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d012      	beq.n	8000d4a <main+0x46>
 8000d24:	4b93      	ldr	r3, [pc, #588]	; (8000f74 <main+0x270>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00e      	beq.n	8000d4a <main+0x46>
			transistorSwitch();
 8000d2c:	f000 fbd6 	bl	80014dc <transistorSwitch>
			flagRefresh = 0;
 8000d30:	4b90      	ldr	r3, [pc, #576]	; (8000f74 <main+0x270>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
			if(flagBtnYes){
 8000d36:	4b90      	ldr	r3, [pc, #576]	; (8000f78 <main+0x274>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <main+0x46>
				caso = 0;
 8000d3e:	4b8f      	ldr	r3, [pc, #572]	; (8000f7c <main+0x278>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
				flagRespuesta = 0;
 8000d44:	4b8a      	ldr	r3, [pc, #552]	; (8000f70 <main+0x26c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
			}
		}

		if((flagBtnYes || flagBtnNo)){
 8000d4a:	4b8b      	ldr	r3, [pc, #556]	; (8000f78 <main+0x274>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <main+0x56>
 8000d52:	4b8b      	ldr	r3, [pc, #556]	; (8000f80 <main+0x27c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0e0      	beq.n	8000d1c <main+0x18>
			switch(caso){
 8000d5a:	4b88      	ldr	r3, [pc, #544]	; (8000f7c <main+0x278>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b07      	cmp	r3, #7
 8000d60:	d8dc      	bhi.n	8000d1c <main+0x18>
 8000d62:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <main+0x64>)
 8000d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d68:	08000d89 	.word	0x08000d89
 8000d6c:	08000db3 	.word	0x08000db3
 8000d70:	08000dfb 	.word	0x08000dfb
 8000d74:	08000e43 	.word	0x08000e43
 8000d78:	08000e8b 	.word	0x08000e8b
 8000d7c:	08000ed3 	.word	0x08000ed3
 8000d80:	08000f1b 	.word	0x08000f1b
 8000d84:	08000fbd 	.word	0x08000fbd
			case Led0:{
				sprintf(bufferPrint, "\n\n\n\n\n\n\n\n\n\n\n\n\n"
 8000d88:	497e      	ldr	r1, [pc, #504]	; (8000f84 <main+0x280>)
 8000d8a:	4877      	ldr	r0, [pc, #476]	; (8000f68 <main+0x264>)
 8000d8c:	f002 f90e 	bl	8002fac <siprintf>
						" 1 	3	5	7	9	11	13	15	17	19\n"
						" 21	23	25	27	29	31	33	35	37	39\n"
						" 41	43	45	47	49	51	53	55	57	59\n"
						" 61	63	65	67	69	71	73	75	77	79\n"
						" 81	83	85	87	89	91	93	95	97	99\n");
				usart_writeMsg(&usartHojas, bufferPrint);
 8000d90:	4975      	ldr	r1, [pc, #468]	; (8000f68 <main+0x264>)
 8000d92:	4876      	ldr	r0, [pc, #472]	; (8000f6c <main+0x268>)
 8000d94:	f001 f959 	bl	800204a <usart_writeMsg>
				caso++;
 8000d98:	4b78      	ldr	r3, [pc, #480]	; (8000f7c <main+0x278>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b76      	ldr	r3, [pc, #472]	; (8000f7c <main+0x278>)
 8000da2:	701a      	strb	r2, [r3, #0]
				flagBtnYes 	= 0;
 8000da4:	4b74      	ldr	r3, [pc, #464]	; (8000f78 <main+0x274>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
				flagBtnNo 	= 0;
 8000daa:	4b75      	ldr	r3, [pc, #468]	; (8000f80 <main+0x27c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
				break;
 8000db0:	e12c      	b.n	800100c <main+0x308>
			}
			case Led1:{
				if(flagBtnYes){
 8000db2:	4b71      	ldr	r3, [pc, #452]	; (8000f78 <main+0x274>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <main+0xcc>
					conteo |= 1;
 8000dba:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <main+0x284>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b70      	ldr	r3, [pc, #448]	; (8000f88 <main+0x284>)
 8000dc6:	701a      	strb	r2, [r3, #0]
					gpio_WritePin(&userLed0, SET);
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4870      	ldr	r0, [pc, #448]	; (8000f8c <main+0x288>)
 8000dcc:	f000 fe5c 	bl	8001a88 <gpio_WritePin>
				}
				sprintf(bufferPrint, "\n\n\n\n\n\n\n\n\n\n\n\n\n"
 8000dd0:	496f      	ldr	r1, [pc, #444]	; (8000f90 <main+0x28c>)
 8000dd2:	4865      	ldr	r0, [pc, #404]	; (8000f68 <main+0x264>)
 8000dd4:	f002 f8ea 	bl	8002fac <siprintf>
						" 2 	3	6	7	10	11	14	15	18	19\n"
						" 22	23	26	27	30	31	34	35	38	39\n"
						" 42	43	46	47	50	51	54	55	58	59\n"
						" 62	63	66	67	70	71	74	75	78	79\n"
						" 82	83	86	87	90	91	94	95	98	99\n");
				usart_writeMsg(&usartHojas, bufferPrint);
 8000dd8:	4963      	ldr	r1, [pc, #396]	; (8000f68 <main+0x264>)
 8000dda:	4864      	ldr	r0, [pc, #400]	; (8000f6c <main+0x268>)
 8000ddc:	f001 f935 	bl	800204a <usart_writeMsg>
				caso++;
 8000de0:	4b66      	ldr	r3, [pc, #408]	; (8000f7c <main+0x278>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <main+0x278>)
 8000dea:	701a      	strb	r2, [r3, #0]
				flagBtnYes 	= 0;
 8000dec:	4b62      	ldr	r3, [pc, #392]	; (8000f78 <main+0x274>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
				flagBtnNo 	= 0;
 8000df2:	4b63      	ldr	r3, [pc, #396]	; (8000f80 <main+0x27c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
				break;
 8000df8:	e108      	b.n	800100c <main+0x308>
			}
			case Led2:{
				if(flagBtnYes){
 8000dfa:	4b5f      	ldr	r3, [pc, #380]	; (8000f78 <main+0x274>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00a      	beq.n	8000e18 <main+0x114>
					conteo |= 1<<1;
 8000e02:	4b61      	ldr	r3, [pc, #388]	; (8000f88 <main+0x284>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b5e      	ldr	r3, [pc, #376]	; (8000f88 <main+0x284>)
 8000e0e:	701a      	strb	r2, [r3, #0]
					gpio_WritePin(&userLed1, SET);
 8000e10:	2101      	movs	r1, #1
 8000e12:	4860      	ldr	r0, [pc, #384]	; (8000f94 <main+0x290>)
 8000e14:	f000 fe38 	bl	8001a88 <gpio_WritePin>
				}
				sprintf(bufferPrint, "\n\n\n\n\n\n\n\n\n\n\n\n\n"
 8000e18:	495f      	ldr	r1, [pc, #380]	; (8000f98 <main+0x294>)
 8000e1a:	4853      	ldr	r0, [pc, #332]	; (8000f68 <main+0x264>)
 8000e1c:	f002 f8c6 	bl	8002fac <siprintf>
						" 20	21	22	23	28	29	30	31\n"
						" 36	37	38	39	44	45	46	47\n"
						" 52	53	54	55	60	61	62	63\n"
						" 68	69	70	71	76	77	78	79\n"
						" 84	85	86	87	92	93	94	95\n");
				usart_writeMsg(&usartHojas, bufferPrint);
 8000e20:	4951      	ldr	r1, [pc, #324]	; (8000f68 <main+0x264>)
 8000e22:	4852      	ldr	r0, [pc, #328]	; (8000f6c <main+0x268>)
 8000e24:	f001 f911 	bl	800204a <usart_writeMsg>
				caso++;
 8000e28:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <main+0x278>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b52      	ldr	r3, [pc, #328]	; (8000f7c <main+0x278>)
 8000e32:	701a      	strb	r2, [r3, #0]
				flagBtnYes 	= 0;
 8000e34:	4b50      	ldr	r3, [pc, #320]	; (8000f78 <main+0x274>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
				flagBtnNo 	= 0;
 8000e3a:	4b51      	ldr	r3, [pc, #324]	; (8000f80 <main+0x27c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
				break;
 8000e40:	e0e4      	b.n	800100c <main+0x308>
			}
			case Led3:{
				if(flagBtnYes){
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <main+0x274>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00a      	beq.n	8000e60 <main+0x15c>
					conteo |= 1<<2;
 8000e4a:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <main+0x284>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <main+0x284>)
 8000e56:	701a      	strb	r2, [r3, #0]
					gpio_WritePin(&userLed2, SET);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4850      	ldr	r0, [pc, #320]	; (8000f9c <main+0x298>)
 8000e5c:	f000 fe14 	bl	8001a88 <gpio_WritePin>
				}
				sprintf(bufferPrint, "\n\n\n\n\n\n\n\n\n\n\n\n\n"
 8000e60:	494f      	ldr	r1, [pc, #316]	; (8000fa0 <main+0x29c>)
 8000e62:	4841      	ldr	r0, [pc, #260]	; (8000f68 <main+0x264>)
 8000e64:	f002 f8a2 	bl	8002fac <siprintf>
						" 24	25	26	27	28	29	30	31\n"
						" 40	41	42	43	44	45	46	47\n"
						" 56	57	58	59	60	61	62	63\n"
						" 72	73	74	75	76	77	78	79\n"
						" 88	89	90	91	92	93	94	95\n");
				usart_writeMsg(&usartHojas, bufferPrint);
 8000e68:	493f      	ldr	r1, [pc, #252]	; (8000f68 <main+0x264>)
 8000e6a:	4840      	ldr	r0, [pc, #256]	; (8000f6c <main+0x268>)
 8000e6c:	f001 f8ed 	bl	800204a <usart_writeMsg>
				caso++;
 8000e70:	4b42      	ldr	r3, [pc, #264]	; (8000f7c <main+0x278>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b40      	ldr	r3, [pc, #256]	; (8000f7c <main+0x278>)
 8000e7a:	701a      	strb	r2, [r3, #0]
				flagBtnYes 	= 0;
 8000e7c:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <main+0x274>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
				flagBtnNo 	= 0;
 8000e82:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <main+0x27c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
				break;
 8000e88:	e0c0      	b.n	800100c <main+0x308>
			}
			case Led4:{
				if(flagBtnYes){
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <main+0x274>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00a      	beq.n	8000ea8 <main+0x1a4>
					conteo |= 1<<3;
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <main+0x284>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <main+0x284>)
 8000e9e:	701a      	strb	r2, [r3, #0]
					gpio_WritePin(&userLed3, SET);
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4840      	ldr	r0, [pc, #256]	; (8000fa4 <main+0x2a0>)
 8000ea4:	f000 fdf0 	bl	8001a88 <gpio_WritePin>
				}
				sprintf(bufferPrint, "\n\n\n\n\n\n\n\n\n\n\n\n\n"
 8000ea8:	493f      	ldr	r1, [pc, #252]	; (8000fa8 <main+0x2a4>)
 8000eaa:	482f      	ldr	r0, [pc, #188]	; (8000f68 <main+0x264>)
 8000eac:	f002 f87e 	bl	8002fac <siprintf>
						" 24	25	26	27	28	29	30	31\n"
						" 48	49	50	51	52	53	54	55\n"
						" 56	57	58	59	60	61	62	63\n"
						" 80	81	82	83	84	85	86	87\n"
						" 88	89	90	91	92	93	94	95\n");
				usart_writeMsg(&usartHojas, bufferPrint);
 8000eb0:	492d      	ldr	r1, [pc, #180]	; (8000f68 <main+0x264>)
 8000eb2:	482e      	ldr	r0, [pc, #184]	; (8000f6c <main+0x268>)
 8000eb4:	f001 f8c9 	bl	800204a <usart_writeMsg>
				caso++;
 8000eb8:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <main+0x278>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <main+0x278>)
 8000ec2:	701a      	strb	r2, [r3, #0]
				flagBtnYes 	= 0;
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <main+0x274>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
				flagBtnNo 	= 0;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <main+0x27c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
				break;
 8000ed0:	e09c      	b.n	800100c <main+0x308>
			}
			case Led5:{
				if(flagBtnYes){
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <main+0x274>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00a      	beq.n	8000ef0 <main+0x1ec>
					conteo |= 1<<4;
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <main+0x284>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <main+0x284>)
 8000ee6:	701a      	strb	r2, [r3, #0]
					gpio_WritePin(&userLed4, SET);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4830      	ldr	r0, [pc, #192]	; (8000fac <main+0x2a8>)
 8000eec:	f000 fdcc 	bl	8001a88 <gpio_WritePin>
				}
				sprintf(bufferPrint, "\n\n\n\n\n\n\n\n\n\n\n\n\n"
 8000ef0:	492f      	ldr	r1, [pc, #188]	; (8000fb0 <main+0x2ac>)
 8000ef2:	481d      	ldr	r0, [pc, #116]	; (8000f68 <main+0x264>)
 8000ef4:	f002 f85a 	bl	8002fac <siprintf>
						" 32	33	34	35	36	37	38	39\n"
						" 40	41	42	43	44	45	46	47\n"
						" 48	49	50	51	52	53	54	55\n"
						" 56	57	58	59	60	61	62	63\n"
						" 96	97	98	99\n");
				usart_writeMsg(&usartHojas, bufferPrint);
 8000ef8:	491b      	ldr	r1, [pc, #108]	; (8000f68 <main+0x264>)
 8000efa:	481c      	ldr	r0, [pc, #112]	; (8000f6c <main+0x268>)
 8000efc:	f001 f8a5 	bl	800204a <usart_writeMsg>
				caso++;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <main+0x278>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <main+0x278>)
 8000f0a:	701a      	strb	r2, [r3, #0]
				flagBtnYes 	= 0;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <main+0x274>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
				flagBtnNo 	= 0;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <main+0x27c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
				break;
 8000f18:	e078      	b.n	800100c <main+0x308>
			}
			case Led6:{
				if(flagBtnYes){
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <main+0x274>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00a      	beq.n	8000f38 <main+0x234>
					conteo |= 1<<5;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <main+0x284>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f043 0320 	orr.w	r3, r3, #32
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <main+0x284>)
 8000f2e:	701a      	strb	r2, [r3, #0]
					gpio_WritePin(&userLed5, SET);
 8000f30:	2101      	movs	r1, #1
 8000f32:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <main+0x2b0>)
 8000f34:	f000 fda8 	bl	8001a88 <gpio_WritePin>
				}
				sprintf(bufferPrint, "\n\n\n\n\n\n\n\n\n\n\n\n\n"
 8000f38:	491f      	ldr	r1, [pc, #124]	; (8000fb8 <main+0x2b4>)
 8000f3a:	480b      	ldr	r0, [pc, #44]	; (8000f68 <main+0x264>)
 8000f3c:	f002 f836 	bl	8002fac <siprintf>
						" 64	65	66	67	68	69	70	71\n"
						" 72	73	74	75	76	77	78	79\n"
						" 80	81	82	83	84	85	86	87\n"
						" 88	89	90	91	92	93	94	95\n"
						" 96	97	98	99\n");
				usart_writeMsg(&usartHojas, bufferPrint);
 8000f40:	4909      	ldr	r1, [pc, #36]	; (8000f68 <main+0x264>)
 8000f42:	480a      	ldr	r0, [pc, #40]	; (8000f6c <main+0x268>)
 8000f44:	f001 f881 	bl	800204a <usart_writeMsg>
				caso++;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <main+0x278>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <main+0x278>)
 8000f52:	701a      	strb	r2, [r3, #0]
				flagBtnYes 	= 0;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <main+0x274>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
				flagBtnNo 	= 0;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <main+0x27c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
				break;
 8000f60:	e054      	b.n	800100c <main+0x308>
 8000f62:	bf00      	nop
 8000f64:	08006900 	.word	0x08006900
 8000f68:	2000038c 	.word	0x2000038c
 8000f6c:	200002e8 	.word	0x200002e8
 8000f70:	20000490 	.word	0x20000490
 8000f74:	20000386 	.word	0x20000386
 8000f78:	20000387 	.word	0x20000387
 8000f7c:	2000048c 	.word	0x2000048c
 8000f80:	20000388 	.word	0x20000388
 8000f84:	08006918 	.word	0x08006918
 8000f88:	2000048d 	.word	0x2000048d
 8000f8c:	20000244 	.word	0x20000244
 8000f90:	080069f4 	.word	0x080069f4
 8000f94:	20000250 	.word	0x20000250
 8000f98:	08006ad0 	.word	0x08006ad0
 8000f9c:	2000025c 	.word	0x2000025c
 8000fa0:	08006ba8 	.word	0x08006ba8
 8000fa4:	20000268 	.word	0x20000268
 8000fa8:	08006c84 	.word	0x08006c84
 8000fac:	20000274 	.word	0x20000274
 8000fb0:	08006d60 	.word	0x08006d60
 8000fb4:	20000280 	.word	0x20000280
 8000fb8:	08006e18 	.word	0x08006e18
			}
			case imprimir:{
				if(flagBtnYes){
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <main+0x30c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00a      	beq.n	8000fda <main+0x2d6>
					conteo |= 1<<6;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <main+0x310>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <main+0x310>)
 8000fd0:	701a      	strb	r2, [r3, #0]
					gpio_WritePin(&userLed6, SET);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4810      	ldr	r0, [pc, #64]	; (8001018 <main+0x314>)
 8000fd6:	f000 fd57 	bl	8001a88 <gpio_WritePin>
				}
				sprintf(bufferPrint, "\n\n\n\n\n\n\n\n\n\n\n\n\n"
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <main+0x310>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	490e      	ldr	r1, [pc, #56]	; (800101c <main+0x318>)
 8000fe2:	480f      	ldr	r0, [pc, #60]	; (8001020 <main+0x31c>)
 8000fe4:	f001 ffe2 	bl	8002fac <siprintf>
						"SU NUMERO ES %d \n\n",conteo);
				usart_writeMsg(&usartHojas, bufferPrint);
 8000fe8:	490d      	ldr	r1, [pc, #52]	; (8001020 <main+0x31c>)
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <main+0x320>)
 8000fec:	f001 f82d 	bl	800204a <usart_writeMsg>
				caso = 99;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <main+0x324>)
 8000ff2:	2263      	movs	r2, #99	; 0x63
 8000ff4:	701a      	strb	r2, [r3, #0]
				flagRespuesta = 1;
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <main+0x328>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
				flagBtnYes 	= 0;
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <main+0x30c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
				flagBtnNo 	= 0;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <main+0x32c>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
				break;
 8001008:	bf00      	nop
 800100a:	e687      	b.n	8000d1c <main+0x18>
		if(flagRespuesta && flagRefresh){
 800100c:	e686      	b.n	8000d1c <main+0x18>
 800100e:	bf00      	nop
 8001010:	20000387 	.word	0x20000387
 8001014:	2000048d 	.word	0x2000048d
 8001018:	2000028c 	.word	0x2000028c
 800101c:	08006ed0 	.word	0x08006ed0
 8001020:	2000038c 	.word	0x2000038c
 8001024:	200002e8 	.word	0x200002e8
 8001028:	2000048c 	.word	0x2000048c
 800102c:	20000490 	.word	0x20000490
 8001030:	20000388 	.word	0x20000388

08001034 <initSystem>:
		}
	}
}


void initSystem(void){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	initGPIO();
 8001038:	f000 f80e 	bl	8001058 <initGPIO>
	initTimers();
 800103c:	f000 f8cc 	bl	80011d8 <initTimers>
	initExti();
 8001040:	f000 f904 	bl	800124c <initExti>
	initUsart();
 8001044:	f000 f909 	bl	800125a <initUsart>
	gpio_WritePin(&userLed, SET);
 8001048:	2101      	movs	r1, #1
 800104a:	4802      	ldr	r0, [pc, #8]	; (8001054 <initSystem+0x20>)
 800104c:	f000 fd1c 	bl	8001a88 <gpio_WritePin>

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200001e4 	.word	0x200001e4

08001058 <initGPIO>:


void initGPIO(void){
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	//Configuramos los pines que se van a utilizar

	/* Configuramos el PinA5 */
	userLed.pGPIOx = GPIOA;
 800105c:	4b54      	ldr	r3, [pc, #336]	; (80011b0 <initGPIO+0x158>)
 800105e:	4a55      	ldr	r2, [pc, #340]	; (80011b4 <initGPIO+0x15c>)
 8001060:	601a      	str	r2, [r3, #0]
	userLed.pinConfig.GPIO_PinNumber = PIN_5;
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <initGPIO+0x158>)
 8001064:	2205      	movs	r2, #5
 8001066:	711a      	strb	r2, [r3, #4]
	userLed.pinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <initGPIO+0x158>)
 800106a:	2201      	movs	r2, #1
 800106c:	715a      	strb	r2, [r3, #5]
	userLed.pinConfig.GPIO_PinOutputType = GPIO_OTYPE_PUSHPULL;
 800106e:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <initGPIO+0x158>)
 8001070:	2200      	movs	r2, #0
 8001072:	721a      	strb	r2, [r3, #8]
	userLed.pinConfig.GPIO_PinOutputSpeed = GPIO_OSPEED_MEDIUM;
 8001074:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <initGPIO+0x158>)
 8001076:	2201      	movs	r2, #1
 8001078:	719a      	strb	r2, [r3, #6]
	userLed.pinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800107a:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <initGPIO+0x158>)
 800107c:	2200      	movs	r2, #0
 800107e:	71da      	strb	r2, [r3, #7]

	//Cargamos la configuracion  en los registros que gobiernan el puerto.
	gpio_Config(&userLed);
 8001080:	484b      	ldr	r0, [pc, #300]	; (80011b0 <initGPIO+0x158>)
 8001082:	f000 fb84 	bl	800178e <gpio_Config>

	/* Configuramos el PinC6 */
	userLedA.pGPIOx = GPIOC;
 8001086:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <initGPIO+0x160>)
 8001088:	4a4c      	ldr	r2, [pc, #304]	; (80011bc <initGPIO+0x164>)
 800108a:	601a      	str	r2, [r3, #0]
	userLedA.pinConfig.GPIO_PinNumber = PIN_6;
 800108c:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <initGPIO+0x160>)
 800108e:	2206      	movs	r2, #6
 8001090:	711a      	strb	r2, [r3, #4]
	userLedA.pinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001092:	4b49      	ldr	r3, [pc, #292]	; (80011b8 <initGPIO+0x160>)
 8001094:	2201      	movs	r2, #1
 8001096:	715a      	strb	r2, [r3, #5]
	userLedA.pinConfig.GPIO_PinOutputType = GPIO_OTYPE_PUSHPULL;
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <initGPIO+0x160>)
 800109a:	2200      	movs	r2, #0
 800109c:	721a      	strb	r2, [r3, #8]
	userLedA.pinConfig.GPIO_PinOutputSpeed = GPIO_OSPEED_MEDIUM;
 800109e:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <initGPIO+0x160>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	719a      	strb	r2, [r3, #6]
	userLedA.pinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <initGPIO+0x160>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	71da      	strb	r2, [r3, #7]

	//Cargamos la configuracion  en los registros que gobiernan el puerto.
	gpio_Config(&userLedA);
 80010aa:	4843      	ldr	r0, [pc, #268]	; (80011b8 <initGPIO+0x160>)
 80010ac:	f000 fb6f 	bl	800178e <gpio_Config>

	/* Configuramos el PinA7 */
	userLedB.pGPIOx = GPIOA;
 80010b0:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <initGPIO+0x168>)
 80010b2:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <initGPIO+0x15c>)
 80010b4:	601a      	str	r2, [r3, #0]
	userLedB.pinConfig.GPIO_PinNumber = PIN_7;
 80010b6:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <initGPIO+0x168>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	711a      	strb	r2, [r3, #4]
	userLedB.pinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010bc:	4b40      	ldr	r3, [pc, #256]	; (80011c0 <initGPIO+0x168>)
 80010be:	2201      	movs	r2, #1
 80010c0:	715a      	strb	r2, [r3, #5]
	userLedB.pinConfig.GPIO_PinOutputType = GPIO_OTYPE_PUSHPULL;
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <initGPIO+0x168>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	721a      	strb	r2, [r3, #8]
	userLedB.pinConfig.GPIO_PinOutputSpeed = GPIO_OSPEED_MEDIUM;
 80010c8:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <initGPIO+0x168>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	719a      	strb	r2, [r3, #6]
	userLedB.pinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <initGPIO+0x168>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	71da      	strb	r2, [r3, #7]

	//Cargamos la configuracion  en los registros que gobiernan el puerto.
	gpio_Config(&userLedB);
 80010d4:	483a      	ldr	r0, [pc, #232]	; (80011c0 <initGPIO+0x168>)
 80010d6:	f000 fb5a 	bl	800178e <gpio_Config>

	/* Configuramos el PinC8 */
	userLedC.pGPIOx = GPIOC;
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <initGPIO+0x16c>)
 80010dc:	4a37      	ldr	r2, [pc, #220]	; (80011bc <initGPIO+0x164>)
 80010de:	601a      	str	r2, [r3, #0]
	userLedC.pinConfig.GPIO_PinNumber = PIN_8;
 80010e0:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <initGPIO+0x16c>)
 80010e2:	2208      	movs	r2, #8
 80010e4:	711a      	strb	r2, [r3, #4]
	userLedC.pinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <initGPIO+0x16c>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	715a      	strb	r2, [r3, #5]
	userLedC.pinConfig.GPIO_PinOutputType = GPIO_OTYPE_PUSHPULL;
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <initGPIO+0x16c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	721a      	strb	r2, [r3, #8]
	userLedC.pinConfig.GPIO_PinOutputSpeed = GPIO_OSPEED_MEDIUM;
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <initGPIO+0x16c>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	719a      	strb	r2, [r3, #6]
	userLedC.pinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010f8:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <initGPIO+0x16c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	71da      	strb	r2, [r3, #7]

	//Cargamos la configuracion  en los registros que gobiernan el puerto.
	gpio_Config(&userLedC);
 80010fe:	4831      	ldr	r0, [pc, #196]	; (80011c4 <initGPIO+0x16c>)
 8001100:	f000 fb45 	bl	800178e <gpio_Config>

	/* Configuramos el PinA9 */
	userLedD.pGPIOx = GPIOA;
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <initGPIO+0x170>)
 8001106:	4a2b      	ldr	r2, [pc, #172]	; (80011b4 <initGPIO+0x15c>)
 8001108:	601a      	str	r2, [r3, #0]
	userLedD.pinConfig.GPIO_PinNumber = PIN_9;
 800110a:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <initGPIO+0x170>)
 800110c:	2209      	movs	r2, #9
 800110e:	711a      	strb	r2, [r3, #4]
	userLedD.pinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <initGPIO+0x170>)
 8001112:	2201      	movs	r2, #1
 8001114:	715a      	strb	r2, [r3, #5]
	userLedD.pinConfig.GPIO_PinOutputType = GPIO_OTYPE_PUSHPULL;
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <initGPIO+0x170>)
 8001118:	2200      	movs	r2, #0
 800111a:	721a      	strb	r2, [r3, #8]
	userLedD.pinConfig.GPIO_PinOutputSpeed = GPIO_OSPEED_MEDIUM;
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <initGPIO+0x170>)
 800111e:	2201      	movs	r2, #1
 8001120:	719a      	strb	r2, [r3, #6]
	userLedD.pinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <initGPIO+0x170>)
 8001124:	2200      	movs	r2, #0
 8001126:	71da      	strb	r2, [r3, #7]

	//Cargamos la configuracion  en los registros que gobiernan el puerto.
	gpio_Config(&userLedD);
 8001128:	4827      	ldr	r0, [pc, #156]	; (80011c8 <initGPIO+0x170>)
 800112a:	f000 fb30 	bl	800178e <gpio_Config>

	/* Configuramos el PinC9 */
	userLedE.pGPIOx = GPIOC;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <initGPIO+0x174>)
 8001130:	4a22      	ldr	r2, [pc, #136]	; (80011bc <initGPIO+0x164>)
 8001132:	601a      	str	r2, [r3, #0]
	userLedE.pinConfig.GPIO_PinNumber = PIN_9;
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <initGPIO+0x174>)
 8001136:	2209      	movs	r2, #9
 8001138:	711a      	strb	r2, [r3, #4]
	userLedE.pinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <initGPIO+0x174>)
 800113c:	2201      	movs	r2, #1
 800113e:	715a      	strb	r2, [r3, #5]
	userLedE.pinConfig.GPIO_PinOutputType = GPIO_OTYPE_PUSHPULL;
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <initGPIO+0x174>)
 8001142:	2200      	movs	r2, #0
 8001144:	721a      	strb	r2, [r3, #8]
	userLedE.pinConfig.GPIO_PinOutputSpeed = GPIO_OSPEED_MEDIUM;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <initGPIO+0x174>)
 8001148:	2201      	movs	r2, #1
 800114a:	719a      	strb	r2, [r3, #6]
	userLedE.pinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <initGPIO+0x174>)
 800114e:	2200      	movs	r2, #0
 8001150:	71da      	strb	r2, [r3, #7]

	//Cargamos la configuracion  en los registros que gobiernan el puerto.
	gpio_Config(&userLedE);
 8001152:	481e      	ldr	r0, [pc, #120]	; (80011cc <initGPIO+0x174>)
 8001154:	f000 fb1b 	bl	800178e <gpio_Config>

	/* Configuramos el PinA6 */
	userLedF.pGPIOx = GPIOA;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <initGPIO+0x178>)
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <initGPIO+0x15c>)
 800115c:	601a      	str	r2, [r3, #0]
	userLedF.pinConfig.GPIO_PinNumber = PIN_6;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <initGPIO+0x178>)
 8001160:	2206      	movs	r2, #6
 8001162:	711a      	strb	r2, [r3, #4]
	userLedF.pinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <initGPIO+0x178>)
 8001166:	2201      	movs	r2, #1
 8001168:	715a      	strb	r2, [r3, #5]
	userLedF.pinConfig.GPIO_PinOutputType = GPIO_OTYPE_PUSHPULL;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <initGPIO+0x178>)
 800116c:	2200      	movs	r2, #0
 800116e:	721a      	strb	r2, [r3, #8]
	userLedF.pinConfig.GPIO_PinOutputSpeed = GPIO_OSPEED_MEDIUM;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <initGPIO+0x178>)
 8001172:	2201      	movs	r2, #1
 8001174:	719a      	strb	r2, [r3, #6]
	userLedF.pinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <initGPIO+0x178>)
 8001178:	2200      	movs	r2, #0
 800117a:	71da      	strb	r2, [r3, #7]

	//Cargamos la configuracion  en los registros que gobiernan el puerto.
	gpio_Config(&userLedF);
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <initGPIO+0x178>)
 800117e:	f000 fb06 	bl	800178e <gpio_Config>

	/* Configuramos el PinA8 */
	userLedG.pGPIOx = GPIOA;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <initGPIO+0x17c>)
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <initGPIO+0x15c>)
 8001186:	601a      	str	r2, [r3, #0]
	userLedG.pinConfig.GPIO_PinNumber = PIN_8;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <initGPIO+0x17c>)
 800118a:	2208      	movs	r2, #8
 800118c:	711a      	strb	r2, [r3, #4]
	userLedG.pinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <initGPIO+0x17c>)
 8001190:	2201      	movs	r2, #1
 8001192:	715a      	strb	r2, [r3, #5]
	userLedG.pinConfig.GPIO_PinOutputType = GPIO_OTYPE_PUSHPULL;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <initGPIO+0x17c>)
 8001196:	2200      	movs	r2, #0
 8001198:	721a      	strb	r2, [r3, #8]
	userLedG.pinConfig.GPIO_PinOutputSpeed = GPIO_OSPEED_MEDIUM;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <initGPIO+0x17c>)
 800119c:	2201      	movs	r2, #1
 800119e:	719a      	strb	r2, [r3, #6]
	userLedG.pinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <initGPIO+0x17c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	71da      	strb	r2, [r3, #7]

	//Cargamos la configuracion  en los registros que gobiernan el puerto.
	gpio_Config(&userLedG);
 80011a6:	480b      	ldr	r0, [pc, #44]	; (80011d4 <initGPIO+0x17c>)
 80011a8:	f000 faf1 	bl	800178e <gpio_Config>

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001e4 	.word	0x200001e4
 80011b4:	40020000 	.word	0x40020000
 80011b8:	200001f0 	.word	0x200001f0
 80011bc:	40020800 	.word	0x40020800
 80011c0:	200001fc 	.word	0x200001fc
 80011c4:	20000208 	.word	0x20000208
 80011c8:	20000214 	.word	0x20000214
 80011cc:	20000220 	.word	0x20000220
 80011d0:	2000022c 	.word	0x2000022c
 80011d4:	20000238 	.word	0x20000238

080011d8 <initTimers>:

void initTimers(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	//Configuramos los timers

	/* Configuramos el timer del blink (TIM2) */
	blinkTimer.pTIMx = TIM4;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <initTimers+0x68>)
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <initTimers+0x6c>)
 80011e0:	601a      	str	r2, [r3, #0]
	blinkTimer.TIMx_Config.TIMx_Prescaler = 16000;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <initTimers+0x68>)
 80011e4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80011e8:	80da      	strh	r2, [r3, #6]
	blinkTimer.TIMx_Config.TIMx_Period = 250;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <initTimers+0x68>)
 80011ec:	22fa      	movs	r2, #250	; 0xfa
 80011ee:	609a      	str	r2, [r3, #8]
	blinkTimer.TIMx_Config.TIMx_mode = TIMER_UP_COUNTER;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <initTimers+0x68>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	711a      	strb	r2, [r3, #4]
	blinkTimer.TIMx_Config.TIMx_InterruptEnable = TIMER_INT_ENABLE;
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <initTimers+0x68>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	731a      	strb	r2, [r3, #12]

	//Cargamos la configuracion del timer
	timer_Config(&blinkTimer);
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <initTimers+0x68>)
 80011fe:	f000 fcdf 	bl	8001bc0 <timer_Config>

	//Encendemos el timer
	timer_SetState(&blinkTimer, TIMER_ON);
 8001202:	2101      	movs	r1, #1
 8001204:	480e      	ldr	r0, [pc, #56]	; (8001240 <initTimers+0x68>)
 8001206:	f000 fe59 	bl	8001ebc <timer_SetState>

	/* Configuramos el timer del 7-segmentos (TIM4) */
	displayTimer.pTIMx = TIM2;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <initTimers+0x70>)
 800120c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001210:	601a      	str	r2, [r3, #0]
	displayTimer.TIMx_Config.TIMx_Prescaler = 16000;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <initTimers+0x70>)
 8001214:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001218:	80da      	strh	r2, [r3, #6]
	displayTimer.TIMx_Config.TIMx_Period = 2;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <initTimers+0x70>)
 800121c:	2202      	movs	r2, #2
 800121e:	609a      	str	r2, [r3, #8]
	displayTimer.TIMx_Config.TIMx_mode = TIMER_UP_COUNTER;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <initTimers+0x70>)
 8001222:	2200      	movs	r2, #0
 8001224:	711a      	strb	r2, [r3, #4]
	displayTimer.TIMx_Config.TIMx_InterruptEnable = TIMER_INT_ENABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <initTimers+0x70>)
 8001228:	2201      	movs	r2, #1
 800122a:	731a      	strb	r2, [r3, #12]

	//Cargamos la configuracion del timer
	timer_Config(&displayTimer);
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <initTimers+0x70>)
 800122e:	f000 fcc7 	bl	8001bc0 <timer_Config>

	//Encendemos el timer
	timer_SetState(&displayTimer, TIMER_ON);
 8001232:	2101      	movs	r1, #1
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <initTimers+0x70>)
 8001236:	f000 fe41 	bl	8001ebc <timer_SetState>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200002c8 	.word	0x200002c8
 8001244:	40000800 	.word	0x40000800
 8001248:	200002d8 	.word	0x200002d8

0800124c <initExti>:

void initExti(void){
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <initUsart>:

void initUsart(void){
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <write7segments>:
 * Funcion que recibe como parametro una variable que
 * contiene un numero en binario, para así cambiar unas
 * variables globales con las que escribimos los numeros
 * en el 7 segmentos.
 */
void write7segments(uint8_t *numero) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	bit0 = (*numero >> 0) & 1;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b83      	ldr	r3, [pc, #524]	; (8001488 <write7segments+0x220>)
 800127c:	701a      	strb	r2, [r3, #0]
	bit0n = ~bit0 & 1;
 800127e:	4b82      	ldr	r3, [pc, #520]	; (8001488 <write7segments+0x220>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4b7e      	ldr	r3, [pc, #504]	; (800148c <write7segments+0x224>)
 8001294:	701a      	strb	r2, [r3, #0]
	bit1 = (*numero >> 1) & 1;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	085b      	lsrs	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b7a      	ldr	r3, [pc, #488]	; (8001490 <write7segments+0x228>)
 80012a6:	701a      	strb	r2, [r3, #0]
	bit1n = ~bit1 & 1;
 80012a8:	4b79      	ldr	r3, [pc, #484]	; (8001490 <write7segments+0x228>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b75      	ldr	r3, [pc, #468]	; (8001494 <write7segments+0x22c>)
 80012be:	701a      	strb	r2, [r3, #0]
	bit2 = (*numero >> 2) & 1;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b72      	ldr	r3, [pc, #456]	; (8001498 <write7segments+0x230>)
 80012d0:	701a      	strb	r2, [r3, #0]
	bit2n = ~bit2 & 1;
 80012d2:	4b71      	ldr	r3, [pc, #452]	; (8001498 <write7segments+0x230>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf0c      	ite	eq
 80012de:	2301      	moveq	r3, #1
 80012e0:	2300      	movne	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b6d      	ldr	r3, [pc, #436]	; (800149c <write7segments+0x234>)
 80012e8:	701a      	strb	r2, [r3, #0]
	bit3 = (*numero >> 3) & 1;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <write7segments+0x238>)
 80012fa:	701a      	strb	r2, [r3, #0]
	 * Esta configuracion de los pines A,B,C,D,E,F,G,que son los leds que
	 * encienden al encoder, es tomada de un ejemplo en digital donde
	 * se realizan operasiones logicas de todos lo posibles casos en los
	 * que se encienda cada led de acuerdo a cada numero.
	 */
	pinA = (bit3 | bit1) | ((~(bit0 ^ bit2)) & 1);
 80012fc:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <write7segments+0x238>)
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	4b63      	ldr	r3, [pc, #396]	; (8001490 <write7segments+0x228>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4313      	orrs	r3, r2
 8001306:	b2db      	uxtb	r3, r3
 8001308:	b25a      	sxtb	r2, r3
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <write7segments+0x220>)
 800130c:	7819      	ldrb	r1, [r3, #0]
 800130e:	4b62      	ldr	r3, [pc, #392]	; (8001498 <write7segments+0x230>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	404b      	eors	r3, r1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	b25b      	sxtb	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b25b      	sxtb	r3, r3
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <write7segments+0x23c>)
 800132e:	701a      	strb	r2, [r3, #0]
	pinB = bit2n | ((~(bit1 ^ bit0)) & 1);
 8001330:	4b57      	ldr	r3, [pc, #348]	; (8001490 <write7segments+0x228>)
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	4b54      	ldr	r3, [pc, #336]	; (8001488 <write7segments+0x220>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4053      	eors	r3, r2
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf0c      	ite	eq
 8001344:	2301      	moveq	r3, #1
 8001346:	2300      	movne	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	b25a      	sxtb	r2, r3
 800134c:	4b53      	ldr	r3, [pc, #332]	; (800149c <write7segments+0x234>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b25b      	sxtb	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b25b      	sxtb	r3, r3
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <write7segments+0x240>)
 800135a:	701a      	strb	r2, [r3, #0]
	pinC = bit2 | bit1n | bit0;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <write7segments+0x230>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <write7segments+0x22c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4313      	orrs	r3, r2
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <write7segments+0x220>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4313      	orrs	r3, r2
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b4e      	ldr	r3, [pc, #312]	; (80014ac <write7segments+0x244>)
 8001372:	701a      	strb	r2, [r3, #0]
	pinD = (bit1 & bit0n) | (bit2n & bit0n) | (bit2n & bit1)
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <write7segments+0x228>)
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <write7segments+0x234>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4313      	orrs	r3, r2
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b42      	ldr	r3, [pc, #264]	; (800148c <write7segments+0x224>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4013      	ands	r3, r2
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b44      	ldr	r3, [pc, #272]	; (800149c <write7segments+0x234>)
 800138a:	7819      	ldrb	r1, [r3, #0]
 800138c:	4b40      	ldr	r3, [pc, #256]	; (8001490 <write7segments+0x228>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	400b      	ands	r3, r1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <write7segments+0x230>)
 800139a:	7819      	ldrb	r1, [r3, #0]
 800139c:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <write7segments+0x22c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	400b      	ands	r3, r1
 80013a2:	b2d9      	uxtb	r1, r3
 80013a4:	4b38      	ldr	r3, [pc, #224]	; (8001488 <write7segments+0x220>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	400b      	ands	r3, r1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <write7segments+0x248>)
 80013b2:	701a      	strb	r2, [r3, #0]
			| (bit2 & bit1n & bit0);
	pinE = (bit1 & bit0n) | (bit2n & bit0n);
 80013b4:	4b36      	ldr	r3, [pc, #216]	; (8001490 <write7segments+0x228>)
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <write7segments+0x234>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <write7segments+0x224>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4013      	ands	r3, r2
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <write7segments+0x24c>)
 80013ca:	701a      	strb	r2, [r3, #0]
	pinF = bit3 | (bit2 & bit1n) | (bit2 & bit0n) | (bit1n & bit0n);
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <write7segments+0x230>)
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <write7segments+0x22c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4013      	ands	r3, r2
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <write7segments+0x238>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4313      	orrs	r3, r2
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <write7segments+0x230>)
 80013e2:	7819      	ldrb	r1, [r3, #0]
 80013e4:	4b29      	ldr	r3, [pc, #164]	; (800148c <write7segments+0x224>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	400b      	ands	r3, r1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <write7segments+0x22c>)
 80013f2:	7819      	ldrb	r1, [r3, #0]
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <write7segments+0x224>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	400b      	ands	r3, r1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <write7segments+0x250>)
 8001402:	701a      	strb	r2, [r3, #0]
	pinG = bit3 | (bit2 ^ bit1) | (bit1 & bit0n);
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <write7segments+0x230>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <write7segments+0x228>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4053      	eors	r3, r2
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <write7segments+0x238>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4313      	orrs	r3, r2
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <write7segments+0x228>)
 800141a:	7819      	ldrb	r1, [r3, #0]
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <write7segments+0x224>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	400b      	ands	r3, r1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <write7segments+0x254>)
 800142a:	701a      	strb	r2, [r3, #0]

	gpio_WritePin(&userLedA, pinA);
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <write7segments+0x23c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	4823      	ldr	r0, [pc, #140]	; (80014c0 <write7segments+0x258>)
 8001434:	f000 fb28 	bl	8001a88 <gpio_WritePin>
	gpio_WritePin(&userLedB, pinB);
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <write7segments+0x240>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	4821      	ldr	r0, [pc, #132]	; (80014c4 <write7segments+0x25c>)
 8001440:	f000 fb22 	bl	8001a88 <gpio_WritePin>
	gpio_WritePin(&userLedC, pinC);
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <write7segments+0x244>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	481f      	ldr	r0, [pc, #124]	; (80014c8 <write7segments+0x260>)
 800144c:	f000 fb1c 	bl	8001a88 <gpio_WritePin>
	gpio_WritePin(&userLedD, pinD);
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <write7segments+0x248>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	481d      	ldr	r0, [pc, #116]	; (80014cc <write7segments+0x264>)
 8001458:	f000 fb16 	bl	8001a88 <gpio_WritePin>
	gpio_WritePin(&userLedE, pinE);
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <write7segments+0x24c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	481b      	ldr	r0, [pc, #108]	; (80014d0 <write7segments+0x268>)
 8001464:	f000 fb10 	bl	8001a88 <gpio_WritePin>
	gpio_WritePin(&userLedF, pinF);
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <write7segments+0x250>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	4819      	ldr	r0, [pc, #100]	; (80014d4 <write7segments+0x26c>)
 8001470:	f000 fb0a 	bl	8001a88 <gpio_WritePin>
	gpio_WritePin(&userLedG, pinG);
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <write7segments+0x254>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	4817      	ldr	r0, [pc, #92]	; (80014d8 <write7segments+0x270>)
 800147c:	f000 fb04 	bl	8001a88 <gpio_WritePin>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000378 	.word	0x20000378
 800148c:	20000379 	.word	0x20000379
 8001490:	2000037a 	.word	0x2000037a
 8001494:	2000037b 	.word	0x2000037b
 8001498:	2000037c 	.word	0x2000037c
 800149c:	2000037d 	.word	0x2000037d
 80014a0:	2000037e 	.word	0x2000037e
 80014a4:	2000037f 	.word	0x2000037f
 80014a8:	20000380 	.word	0x20000380
 80014ac:	20000381 	.word	0x20000381
 80014b0:	20000382 	.word	0x20000382
 80014b4:	20000383 	.word	0x20000383
 80014b8:	20000384 	.word	0x20000384
 80014bc:	20000385 	.word	0x20000385
 80014c0:	200001f0 	.word	0x200001f0
 80014c4:	200001fc 	.word	0x200001fc
 80014c8:	20000208 	.word	0x20000208
 80014cc:	20000214 	.word	0x20000214
 80014d0:	20000220 	.word	0x20000220
 80014d4:	2000022c 	.word	0x2000022c
 80014d8:	20000238 	.word	0x20000238

080014dc <transistorSwitch>:
 * Funcion que recibe como parametro una variable que
 * contiente la opcion del caso a elegir, dicho caso
 * colocará a funcionar un transistor y apagará el
 * resto de ellos.
 */
void transistorSwitch(void){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	uint8_t option = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	71fb      	strb	r3, [r7, #7]
	switch(option){
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <transistorSwitch+0x16>
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d017      	beq.n	8001520 <transistorSwitch+0x44>
 80014f0:	e024      	b.n	800153c <transistorSwitch+0x60>
	case unidad:{
		gpio_WritePin(&userTransistorD, 	SET);
 80014f2:	2101      	movs	r1, #1
 80014f4:	481d      	ldr	r0, [pc, #116]	; (800156c <transistorSwitch+0x90>)
 80014f6:	f000 fac7 	bl	8001a88 <gpio_WritePin>
		gpio_WritePin(&userTransistorC, 	SET);
 80014fa:	2101      	movs	r1, #1
 80014fc:	481c      	ldr	r0, [pc, #112]	; (8001570 <transistorSwitch+0x94>)
 80014fe:	f000 fac3 	bl	8001a88 <gpio_WritePin>
		gpio_WritePin(&userTransistorUM, 	SET);
 8001502:	2101      	movs	r1, #1
 8001504:	481b      	ldr	r0, [pc, #108]	; (8001574 <transistorSwitch+0x98>)
 8001506:	f000 fabf 	bl	8001a88 <gpio_WritePin>
		write7segments(&unidadValue);
 800150a:	481b      	ldr	r0, [pc, #108]	; (8001578 <transistorSwitch+0x9c>)
 800150c:	f7ff feac 	bl	8001268 <write7segments>
		gpio_WritePin(&userTransistorU, 	RESET);
 8001510:	2100      	movs	r1, #0
 8001512:	481a      	ldr	r0, [pc, #104]	; (800157c <transistorSwitch+0xa0>)
 8001514:	f000 fab8 	bl	8001a88 <gpio_WritePin>
		option++;
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	3301      	adds	r3, #1
 800151c:	71fb      	strb	r3, [r7, #7]
		break;
 800151e:	e020      	b.n	8001562 <transistorSwitch+0x86>
	}
	case decena:{
		gpio_WritePin(&userTransistorU, 	SET);
 8001520:	2101      	movs	r1, #1
 8001522:	4816      	ldr	r0, [pc, #88]	; (800157c <transistorSwitch+0xa0>)
 8001524:	f000 fab0 	bl	8001a88 <gpio_WritePin>
		write7segments(&decenaValue);
 8001528:	4815      	ldr	r0, [pc, #84]	; (8001580 <transistorSwitch+0xa4>)
 800152a:	f7ff fe9d 	bl	8001268 <write7segments>
		gpio_WritePin(&userTransistorD, 	RESET);
 800152e:	2100      	movs	r1, #0
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <transistorSwitch+0x90>)
 8001532:	f000 faa9 	bl	8001a88 <gpio_WritePin>
		option = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	71fb      	strb	r3, [r7, #7]
		break;
 800153a:	e012      	b.n	8001562 <transistorSwitch+0x86>
//		gpio_WritePin(&userTransistorUM, 	RESET);
//		option = 0;
//		break;
//	}
	default:{
		gpio_WritePin(&userTransistorD, 	SET);
 800153c:	2101      	movs	r1, #1
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <transistorSwitch+0x90>)
 8001540:	f000 faa2 	bl	8001a88 <gpio_WritePin>
		gpio_WritePin(&userTransistorC, 	SET);
 8001544:	2101      	movs	r1, #1
 8001546:	480a      	ldr	r0, [pc, #40]	; (8001570 <transistorSwitch+0x94>)
 8001548:	f000 fa9e 	bl	8001a88 <gpio_WritePin>
		gpio_WritePin(&userTransistorUM, 	SET);
 800154c:	2101      	movs	r1, #1
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <transistorSwitch+0x98>)
 8001550:	f000 fa9a 	bl	8001a88 <gpio_WritePin>
		gpio_WritePin(&userTransistorU, 	SET);
 8001554:	2101      	movs	r1, #1
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <transistorSwitch+0xa0>)
 8001558:	f000 fa96 	bl	8001a88 <gpio_WritePin>
		option = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	71fb      	strb	r3, [r7, #7]
		break;
 8001560:	bf00      	nop
	}
	}
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002a4 	.word	0x200002a4
 8001570:	200002b0 	.word	0x200002b0
 8001574:	200002bc 	.word	0x200002bc
 8001578:	2000048e 	.word	0x2000048e
 800157c:	20000298 	.word	0x20000298
 8001580:	2000048f 	.word	0x2000048f

08001584 <Timer2_Callback>:
void resta(uint8_t *conteo) {
	*conteo -= 1;
}


void Timer2_Callback(void) {
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	flagRefresh = 1;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <Timer2_Callback+0x14>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	20000386 	.word	0x20000386

0800159c <Timer4_Callback>:

void Timer4_Callback(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	gpio_TooglePin(&userLed);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <Timer4_Callback+0x10>)
 80015a2:	f000 fab4 	bl	8001b0e <gpio_TooglePin>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200001e4 	.word	0x200001e4

080015b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_kill>:

int _kill(int pid, int sig)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015ca:	f001 fda5 	bl	8003118 <__errno>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2216      	movs	r2, #22
 80015d2:	601a      	str	r2, [r3, #0]
	return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_exit>:

void _exit (int status)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffe7 	bl	80015c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015f2:	e7fe      	b.n	80015f2 <_exit+0x12>

080015f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e00a      	b.n	800161c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001606:	f3af 8000 	nop.w
 800160a:	4601      	mov	r1, r0
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	60ba      	str	r2, [r7, #8]
 8001612:	b2ca      	uxtb	r2, r1
 8001614:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf0      	blt.n	8001606 <_read+0x12>
	}

return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e009      	b.n	8001654 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf1      	blt.n	8001640 <_write+0x12>
	}
	return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_close>:

int _close(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168e:	605a      	str	r2, [r3, #4]
	return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_isatty>:

int _isatty(int file)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	return 1;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
	return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f001 fd0a 	bl	8003118 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20020000 	.word	0x20020000
 8001730:	00000400 	.word	0x00000400
 8001734:	20000494 	.word	0x20000494
 8001738:	200005f0 	.word	0x200005f0

0800173c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800173e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001740:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <LoopForever+0x6>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <LoopForever+0xe>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <LoopForever+0x16>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800176a:	f001 fcdb 	bl	8003124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176e:	f7ff fac9 	bl	8000d04 <main>

08001772 <LoopForever>:

LoopForever:
    b LoopForever
 8001772:	e7fe      	b.n	8001772 <LoopForever>
  ldr   r0, =_estack
 8001774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8001780:	08007320 	.word	0x08007320
  ldr r2, =_sbss
 8001784:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001788:	200005ec 	.word	0x200005ec

0800178c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC_IRQHandler>

0800178e <gpio_Config>:
 * orden estricto para poder que el sistema permita configurar el periférico X.
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periférico RCC), a esto llamaremos
 * siplemente "activar el periférico o activar la señal del periférico)
 */
void gpio_Config (GPIO_Handler_t *pGPIOHandler){
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]

	/* Verificamos que el pin seleccionado es correcto.	*/
	assert_param(IS_GPIO_PIN(pGPIOHandler->pinConfig.GPIO_PinNumber));

	// 1) Activar el periférico
	gpio_enable_clock_peripheral(pGPIOHandler);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f814 	bl	80017c4 <gpio_enable_clock_peripheral>

	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	gpio_config_mode(pGPIOHandler);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f871 	bl	8001884 <gpio_config_mode>

	// 3) Configurando el registro GPIOx_OTYPER
	gpio_config_output_type(pGPIOHandler);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f89a 	bl	80018dc <gpio_config_output_type>

	// 4) Configurando ahora la velocidad
	gpio_config_output_speed(pGPIOHandler);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f8c1 	bl	8001930 <gpio_config_output_speed>

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	gpio_config_pullup_pulldown(pGPIOHandler);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f8ea 	bl	8001988 <gpio_config_pullup_pulldown>

	// 6) Configuración de las funciones alternativas... se verá luego, mas adelante en el curso
	gpio_config_alternate_function(pGPIOHandler);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f913 	bl	80019e0 <gpio_config_alternate_function>

} // Fin del GPIO_config
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <gpio_enable_clock_peripheral>:

/*
 * Enable Clock signal for specific GPIOx port
 */
void gpio_enable_clock_peripheral(GPIO_Handler_t *pGPIOHandler){
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	// Verificamos que el puerto configurado si es permitido
	assert_param(IS_GPIO_ALL_INSTANCE(pGPIOHandler->pGPIOx));

	// Verificamos para GPIOA

		if(pGPIOHandler->pGPIOx == GPIOA){
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a25      	ldr	r2, [pc, #148]	; (8001868 <gpio_enable_clock_peripheral+0xa4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d106      	bne.n	80017e4 <gpio_enable_clock_peripheral+0x20>
			// Escribimos 1 (SET) en la posición correspondiente al GPIOA
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a24      	ldr	r2, [pc, #144]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
		// Verificamos para GPIOH
		else if(pGPIOHandler->pGPIOx == GPIOH){
			// Escribimos 1 (SET) en la posición correspondiente al GPIOH
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
		}
}
 80017e2:	e03a      	b.n	800185a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOB){
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <gpio_enable_clock_peripheral+0xac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d106      	bne.n	80017fc <gpio_enable_clock_peripheral+0x38>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a1e      	ldr	r2, [pc, #120]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80017fa:	e02e      	b.n	800185a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOC){
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <gpio_enable_clock_peripheral+0xb0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d106      	bne.n	8001814 <gpio_enable_clock_peripheral+0x50>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001812:	e022      	b.n	800185a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOD){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <gpio_enable_clock_peripheral+0xb4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d106      	bne.n	800182c <gpio_enable_clock_peripheral+0x68>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
}
 800182a:	e016      	b.n	800185a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOE){
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <gpio_enable_clock_peripheral+0xb8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d106      	bne.n	8001844 <gpio_enable_clock_peripheral+0x80>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001842:	e00a      	b.n	800185a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOH){
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <gpio_enable_clock_peripheral+0xbc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d105      	bne.n	800185a <gpio_enable_clock_peripheral+0x96>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a06      	ldr	r2, [pc, #24]	; (800186c <gpio_enable_clock_peripheral+0xa8>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40020000 	.word	0x40020000
 800186c:	40023800 	.word	0x40023800
 8001870:	40020400 	.word	0x40020400
 8001874:	40020800 	.word	0x40020800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40021c00 	.word	0x40021c00

08001884 <gpio_config_mode>:
 *  -	Input
 *  -	Output
 *  -	Analog
 *  -	Alternate Function
 */
void gpio_config_mode(GPIO_Handler_t *pGPIOHandler){
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
	// Verificamos si el modo que se ha seleccionado es permitido
	assert_param(IS_GPIO_MODE(pGPIOHandler->pinConfig.GPIO_PinMode));

	// Acá estmos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y to-do eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinMode << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	795b      	ldrb	r3, [r3, #5]
 8001894:	461a      	mov	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor,limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	791b      	ldrb	r3, [r3, #4]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2103      	movs	r1, #3
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	400a      	ands	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <gpio_config_output_type>:
/*
 *  Configures which type of output the PinX will use:
 *  -	Push-Pull
 *  -	OpenDrain
 */
void gpio_config_output_type(GPIO_Handler_t *pGPIOHandler){
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]

	/* Verificamos que el tipo de salida corresponda a los que se pueden utilizar */
	assert_param(IS_GPIO_OUTPUT_TYPE(pGPIOHandler->pinConfig.GPIO_PinOutputType));

	// De nuevo, leemos y movemos el valor numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinOutputType << pGPIOHandler->pinConfig.GPIO_PinNumber);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7a1b      	ldrb	r3, [r3, #8]
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->pinConfig.GPIO_PinNumber);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	4619      	mov	r1, r3
 8001904:	2301      	movs	r3, #1
 8001906:	408b      	lsls	r3, r1
 8001908:	43db      	mvns	r3, r3
 800190a:	4619      	mov	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	400a      	ands	r2, r1
 8001912:	605a      	str	r2, [r3, #4]

	//cargamos el resultado sobre elregistro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6859      	ldr	r1, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <gpio_config_output_speed>:
 * -	Low
 * -	Medium
 * -	Fast
 * -	HighSpeed
 */
void gpio_config_output_speed(GPIO_Handler_t *pGPIOHandler){
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]


	assert_param(IS_GPIO_OSPEED(pGPIOHandler->pinConfig.GPIO_PinOutputSpeed));

	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinOutputSpeed << 2*pGPIOHandler->pinConfig.GPIO_PinNumber);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	799b      	ldrb	r3, [r3, #6]
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	791b      	ldrb	r3, [r3, #4]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2103      	movs	r1, #3
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	400a      	ands	r2, r1
 800196a:	609a      	str	r2, [r3, #8]

	// cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <gpio_config_pullup_pulldown>:


/*
 * Truns ON/OFF the pull-up and pull-down resistor foe each PinX in selected GPIO port
 */
void gpio_config_pullup_pulldown(GPIO_Handler_t *pGPIOHandler){
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]

	//Verificamos si la configuracion cargada para ls resistencias es correcta
	assert_param(IS_GPIO_PUPDR(pGPIOHandler->pinConfig.GPIO_PinPuPdControl));

	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->pinConfig.GPIO_PinNumber);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	79db      	ldrb	r3, [r3, #7]
 8001998:	461a      	mov	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	791b      	ldrb	r3, [r3, #4]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	60fb      	str	r3, [r7, #12]

	//Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	791b      	ldrb	r3, [r3, #4]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2103      	movs	r1, #3
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	400a      	ands	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]

	//cargamoselresultado sobre elregistro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68d9      	ldr	r1, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <gpio_config_alternate_function>:

/*
 * Allows to configure other functions (more specialized) on the selected PinX
 */
void gpio_config_alternate_function(GPIO_Handler_t *pGPIOHandler){
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

	uint32_t auxPosition = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]

	if(pGPIOHandler->pinConfig.GPIO_PinMode == GPIO_MODE_ALFTN){
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	795b      	ldrb	r3, [r3, #5]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d143      	bne.n	8001a7c <gpio_config_alternate_function+0x9c>

	//Seleccionamos primero si se debe utilizar elregistro abajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->pinConfig.GPIO_PinNumber < 8){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	791b      	ldrb	r3, [r3, #4]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d81f      	bhi.n	8001a3c <gpio_config_alternate_function+0x5c>
			//EStamos en el registro AFRL, que controlo los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->pinConfig.GPIO_PinNumber;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	791b      	ldrb	r3, [r3, #4]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	4619      	mov	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6a1a      	ldr	r2, [r3, #32]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7a5b      	ldrb	r3, [r3, #9]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	621a      	str	r2, [r3, #32]
			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}
 8001a3a:	e01f      	b.n	8001a7c <gpio_config_alternate_function+0x9c>
			auxPosition = 4 * (pGPIOHandler->pinConfig.GPIO_PinNumber -8);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	791b      	ldrb	r3, [r3, #4]
 8001a40:	3b08      	subs	r3, #8
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	60fb      	str	r3, [r7, #12]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7a5b      	ldrb	r3, [r3, #9]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <gpio_WritePin>:

/*
 * Función utilizada para cambiar de estado el pin entregado en el handler,asignando
 * el valor entregado en la variable newState
 */
void gpio_WritePin(GPIO_Handler_t *pPinHandler,uint8_t newState){
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
	//Verificamos si la acción que deseamos realizar es permitida
	assert_param(IS_GPIO_PIN_ACTION(newState));

	//Limpiamos la posición que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->pinConfig.GPIO_PinNumber);
	if(newState == SET){
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10d      	bne.n	8001ab6 <gpio_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->pinConfig.GPIO_PinNumber));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	408b      	lsls	r3, r1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->pinConfig.GPIO_PinNumber + 16));
	}
}
 8001ab4:	e00d      	b.n	8001ad2 <gpio_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->pinConfig.GPIO_PinNumber + 16));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699a      	ldr	r2, [r3, #24]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	3310      	adds	r3, #16
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	619a      	str	r2, [r3, #24]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <gpio_ReadPin>:
}

/*
 * Función para leer el estado de un pin Especifico.
 */
uint8_t gpio_ReadPin(GPIO_Handler_t *pPinHandler){
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	//creamos una variable auxiliar la cual luego retornaremos
	uint16_t pinValue = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	81fb      	strh	r3, [r7, #14]

	// Cargamos el valor del registro IDR, desplazando a derecha tantas veces como la ubicación
	// del pin especifico
	pinValue = (pPinHandler->pGPIOx->IDR >> pPinHandler->pinConfig.GPIO_PinNumber) & 1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	7912      	ldrb	r2, [r2, #4]
 8001af4:	40d3      	lsrs	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	81fb      	strh	r3, [r7, #14]


	return pinValue;
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	b2db      	uxtb	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <gpio_TooglePin>:

void gpio_TooglePin(GPIO_Handler_t *pPinHandler){
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]

	//creamos una variable auxiliar (mascara) donde guardaremos el valor del pin.
	uint8_t pinValue = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
	//Cambiamos el estado del pin usando XOR con un 1 en la mascara PinValue
	pinValue = gpio_ReadPin(pPinHandler) ^ 1;
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffdf 	bl	8001ade <gpio_ReadPin>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f083 0301 	eor.w	r3, r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
	// Escribimos el nuevo estado del pin.
	gpio_WritePin(pPinHandler, pinValue);
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffab 	bl	8001a88 <gpio_WritePin>

}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db12      	blt.n	8001bb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	490a      	ldr	r1, [pc, #40]	; (8001bbc <__NVIC_DisableIRQ+0x44>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	3320      	adds	r3, #32
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba4:	f3bf 8f4f 	dsb	sy
}
 8001ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001baa:	f3bf 8f6f 	isb	sy
}
 8001bae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <timer_Config>:
 *
 * 	Como vamos a trabajar con iterrupciones, antes de configurar una nueva,debemos desactivar
 * 	el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 * 	el sistema.
 */
void timer_Config(Timer_Handler_t *pTimerHandler){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	//Guardamos una referencia al periférico que estmoas utilizando...
	ptrTimerUsed = pTimerHandler->pTIMx;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <timer_Config+0x48>)
 8001bce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop

	// 0. Desactivamos la interrupciones globales mientras configuramos configuramos el sistema.
	__disable_irq();
	// 1. Activar la señal de reloj del periférico requerido.
	timer_enable_clock_peripheral(pTimerHandler);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f819 	bl	8001c0c <timer_enable_clock_peripheral>

	// 2. Configuramos el Pre-scaler.
	timer_set_prescaler(pTimerHandler);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f884 	bl	8001ce8 <timer_set_prescaler>

	// 3. Configuramos si UP_COUNT O DOWN_COUNT (mode).
	timer_set_mode(pTimerHandler);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8a1 	bl	8001d28 <timer_set_mode>

	// 4. Configuramos el Auto-reload.
	timer_set_period(pTimerHandler);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f88e 	bl	8001d08 <timer_set_period>

	// 5. Configuramos la interrupcion.
	timer_config_interrupt(pTimerHandler);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8bb 	bl	8001d68 <timer_config_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bf2:	b662      	cpsie	i
}
 8001bf4:	bf00      	nop

	// x. Volvemos a activar las interrupciones del sistema.
	__enable_irq();

	// El timer inicia apagado.
	timer_SetState(pTimerHandler, TIMER_OFF);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f95f 	bl	8001ebc <timer_SetState>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000498 	.word	0x20000498

08001c0c <timer_enable_clock_peripheral>:




void timer_enable_clock_peripheral(Timer_Handler_t *pTimerHandler){
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

	// Verificamos que es un timer permitio
	assert_param(IS_TIM_INSTANCE(pTierHandler->pTIMx));

	if(pTimerHandler->pTIMx == TIM2){
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1c:	d106      	bne.n	8001c2c <timer_enable_clock_peripheral+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
	}
	else{
		__NOP();
	}
}
 8001c2a:	e048      	b.n	8001cbe <timer_enable_clock_peripheral+0xb2>
	else if(pTimerHandler->pTIMx == TIM3){
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <timer_enable_clock_peripheral+0xc4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d106      	bne.n	8001c44 <timer_enable_clock_peripheral+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001c36:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a24      	ldr	r2, [pc, #144]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c42:	e03c      	b.n	8001cbe <timer_enable_clock_peripheral+0xb2>
	else if(pTimerHandler->pTIMx == TIM4){
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <timer_enable_clock_peripheral+0xc8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d106      	bne.n	8001c5c <timer_enable_clock_peripheral+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c5a:	e030      	b.n	8001cbe <timer_enable_clock_peripheral+0xb2>
	else if(pTimerHandler->pTIMx == TIM5){
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <timer_enable_clock_peripheral+0xcc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d106      	bne.n	8001c74 <timer_enable_clock_peripheral+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c72:	e024      	b.n	8001cbe <timer_enable_clock_peripheral+0xb2>
	else if(pTimerHandler->pTIMx == TIM9){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <timer_enable_clock_peripheral+0xd0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d106      	bne.n	8001c8c <timer_enable_clock_peripheral+0x80>
		RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001c8a:	e018      	b.n	8001cbe <timer_enable_clock_peripheral+0xb2>
	else if(pTimerHandler->pTIMx == TIM10){
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <timer_enable_clock_peripheral+0xd4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d106      	bne.n	8001ca4 <timer_enable_clock_peripheral+0x98>
		RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001ca2:	e00c      	b.n	8001cbe <timer_enable_clock_peripheral+0xb2>
	else if(pTimerHandler->pTIMx == TIM11){
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <timer_enable_clock_peripheral+0xd8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d106      	bne.n	8001cbc <timer_enable_clock_peripheral+0xb0>
		RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <timer_enable_clock_peripheral+0xc0>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001cba:	e000      	b.n	8001cbe <timer_enable_clock_peripheral+0xb2>
		__NOP();
 8001cbc:	bf00      	nop
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000800 	.word	0x40000800
 8001cd8:	40000c00 	.word	0x40000c00
 8001cdc:	40014000 	.word	0x40014000
 8001ce0:	40014400 	.word	0x40014400
 8001ce4:	40014800 	.word	0x40014800

08001ce8 <timer_set_prescaler>:

/**
 * El prescaler nos configura la elocidad a la que se incrementa el registro
 * CNT del timer.
 */
void timer_set_prescaler(Timer_Handler_t *pTimerHandler){
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

	//Verificamos que el valor del prescaler es valido
	assert_param(IS_TIMER_PRESC(pTimerHandler->TIMx_Config.TIMx_Prescaler));

	//Configuramos el valor del prescaler.
	pTimerHandler->pTIMx->PSC = pTimerHandler->TIMx_Config.TIMx_Prescaler - 1; // (16000000-1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	88db      	ldrh	r3, [r3, #6]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <timer_set_period>:
 * Esta función configura el limite hasta donde el Timer para generar un
 * evento "update" (cuando esta contando de forma ascendente),o configura
 * el valor desde donde se comienza a contar, cuando el sistema funciona de forma
 * descendente.
 */
void timer_set_period(Timer_Handler_t *pTimerHandler){
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	assert_param(IS_TIMER_PERIOD(pTimerHandler->TIMx_Config.TIMx_Period));

	// Acá hace falta algo...

	//Configuramos el valor del autoreload
	pTimerHandler->pTIMx->ARR = pTimerHandler->TIMx_Config.TIMx_Period - 1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <timer_set_mode>:




void timer_set_mode(Timer_Handler_t *pTimerHandler){
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

	//Verificamos que elmodo de funcionamiento es correcto.
	assert_param(IS_TIMER_MODE(pTimerHandler->TIMx_Config.TIMx_mode));

	//Verificamos cual es el modo que se desea configurar.
	if(pTimerHandler->TIMx_Config.TIMx_mode == TIMER_UP_COUNTER){
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	791b      	ldrb	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d108      	bne.n	8001d4a <timer_set_mode+0x22>
		//Configuramos en modo Upcounter DIR = 0
		pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_DIR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0210 	bic.w	r2, r2, #16
 8001d46:	601a      	str	r2, [r3, #0]
	}
	else{
		pTimerHandler->pTIMx->CR1 |= TIM_CR1_DIR;
	}
}
 8001d48:	e007      	b.n	8001d5a <timer_set_mode+0x32>
		pTimerHandler->pTIMx->CR1 |= TIM_CR1_DIR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0210 	orr.w	r2, r2, #16
 8001d58:	601a      	str	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <timer_config_interrupt>:





void timer_config_interrupt(Timer_Handler_t *pTimerHandler){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

	//Verificamos el posible valor configurado
	assert_param(IS_TIMER_INTERRUP(pTimerHandler->TIMx_Config.TIMx_InterruptEnabled));

	if(pTimerHandler->TIMx_Config.TIMx_InterruptEnable == TIMER_INT_ENABLE){
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d148      	bne.n	8001e0a <timer_config_interrupt+0xa2>
		// Activamos la interrupción debida al Timerx Utilizado
		pTimerHandler->pTIMx->DIER |= TIM_DIER_UIE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	60da      	str	r2, [r3, #12]


		//Activamos el canal del sistema NVIC para que lea la interrupción
		if(pTimerHandler->pTIMx == TIM2){
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d90:	d103      	bne.n	8001d9a <timer_config_interrupt+0x32>
			NVIC_EnableIRQ(TIM2_IRQn);
 8001d92:	201c      	movs	r0, #28
 8001d94:	f7ff fed2 	bl	8001b3c <__NVIC_EnableIRQ>
		}
		else{
			__NOP();
		}
	}
}
 8001d98:	e07f      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM3){
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a41      	ldr	r2, [pc, #260]	; (8001ea4 <timer_config_interrupt+0x13c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d103      	bne.n	8001dac <timer_config_interrupt+0x44>
			NVIC_EnableIRQ(TIM3_IRQn);
 8001da4:	201d      	movs	r0, #29
 8001da6:	f7ff fec9 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001daa:	e076      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM4){
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3d      	ldr	r2, [pc, #244]	; (8001ea8 <timer_config_interrupt+0x140>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d103      	bne.n	8001dbe <timer_config_interrupt+0x56>
			NVIC_EnableIRQ(TIM4_IRQn);
 8001db6:	201e      	movs	r0, #30
 8001db8:	f7ff fec0 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001dbc:	e06d      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM5){
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a3a      	ldr	r2, [pc, #232]	; (8001eac <timer_config_interrupt+0x144>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d103      	bne.n	8001dd0 <timer_config_interrupt+0x68>
			NVIC_EnableIRQ(TIM5_IRQn);
 8001dc8:	2032      	movs	r0, #50	; 0x32
 8001dca:	f7ff feb7 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001dce:	e064      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM9){
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a36      	ldr	r2, [pc, #216]	; (8001eb0 <timer_config_interrupt+0x148>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d103      	bne.n	8001de2 <timer_config_interrupt+0x7a>
			NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001dda:	2018      	movs	r0, #24
 8001ddc:	f7ff feae 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001de0:	e05b      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM10){
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a33      	ldr	r2, [pc, #204]	; (8001eb4 <timer_config_interrupt+0x14c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d103      	bne.n	8001df4 <timer_config_interrupt+0x8c>
			NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dec:	2019      	movs	r0, #25
 8001dee:	f7ff fea5 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001df2:	e052      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM11){
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <timer_config_interrupt+0x150>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d103      	bne.n	8001e06 <timer_config_interrupt+0x9e>
			NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001dfe:	201a      	movs	r0, #26
 8001e00:	f7ff fe9c 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001e04:	e049      	b.n	8001e9a <timer_config_interrupt+0x132>
			__NOP();
 8001e06:	bf00      	nop
}
 8001e08:	e047      	b.n	8001e9a <timer_config_interrupt+0x132>
		pTimerHandler->pTIMx->DIER &= ~TIM_DIER_UIE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	60da      	str	r2, [r3, #12]
		if(pTimerHandler->pTIMx == TIM2){
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e22:	d103      	bne.n	8001e2c <timer_config_interrupt+0xc4>
			NVIC_DisableIRQ(TIM2_IRQn);
 8001e24:	201c      	movs	r0, #28
 8001e26:	f7ff fea7 	bl	8001b78 <__NVIC_DisableIRQ>
}
 8001e2a:	e036      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM3){
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <timer_config_interrupt+0x13c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d103      	bne.n	8001e3e <timer_config_interrupt+0xd6>
			NVIC_DisableIRQ(TIM3_IRQn);
 8001e36:	201d      	movs	r0, #29
 8001e38:	f7ff fe9e 	bl	8001b78 <__NVIC_DisableIRQ>
}
 8001e3c:	e02d      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM4){
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <timer_config_interrupt+0x140>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d103      	bne.n	8001e50 <timer_config_interrupt+0xe8>
			NVIC_DisableIRQ(TIM4_IRQn);
 8001e48:	201e      	movs	r0, #30
 8001e4a:	f7ff fe95 	bl	8001b78 <__NVIC_DisableIRQ>
}
 8001e4e:	e024      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM5){
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a15      	ldr	r2, [pc, #84]	; (8001eac <timer_config_interrupt+0x144>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d103      	bne.n	8001e62 <timer_config_interrupt+0xfa>
			NVIC_DisableIRQ(TIM5_IRQn);
 8001e5a:	2032      	movs	r0, #50	; 0x32
 8001e5c:	f7ff fe8c 	bl	8001b78 <__NVIC_DisableIRQ>
}
 8001e60:	e01b      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM9){
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <timer_config_interrupt+0x148>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d103      	bne.n	8001e74 <timer_config_interrupt+0x10c>
			NVIC_DisableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e6c:	2018      	movs	r0, #24
 8001e6e:	f7ff fe83 	bl	8001b78 <__NVIC_DisableIRQ>
}
 8001e72:	e012      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM10){
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <timer_config_interrupt+0x14c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d103      	bne.n	8001e86 <timer_config_interrupt+0x11e>
			NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 8001e7e:	2019      	movs	r0, #25
 8001e80:	f7ff fe7a 	bl	8001b78 <__NVIC_DisableIRQ>
}
 8001e84:	e009      	b.n	8001e9a <timer_config_interrupt+0x132>
		else if(pTimerHandler->pTIMx == TIM11){
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <timer_config_interrupt+0x150>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d103      	bne.n	8001e98 <timer_config_interrupt+0x130>
			NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e90:	201a      	movs	r0, #26
 8001e92:	f7ff fe71 	bl	8001b78 <__NVIC_DisableIRQ>
}
 8001e96:	e000      	b.n	8001e9a <timer_config_interrupt+0x132>
			__NOP();
 8001e98:	bf00      	nop
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	40000800 	.word	0x40000800
 8001eac:	40000c00 	.word	0x40000c00
 8001eb0:	40014000 	.word	0x40014000
 8001eb4:	40014400 	.word	0x40014400
 8001eb8:	40014800 	.word	0x40014800

08001ebc <timer_SetState>:




void timer_SetState(Timer_Handler_t *pTimerHandler, uint8_t newState){
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]

	//Verificamos que el estado ingresado es adecuado
	assert_param(IS_TIMER_STATE(newState));

	// 4. Reiniciamos el registro counter.
	pTimerHandler->pTIMx->CNT = 0;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24


	if(newState == TIMER_ON){
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d108      	bne.n	8001ee8 <timer_SetState+0x2c>
		// 5a. Activamos el Timer (el CNT debe comenzar a contar.
		pTimerHandler->pTIMx->CR1 |= TIM_CR1_CEN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
	else{
		// 5b. Desactivamos el Timer (el CNT debe detenerse)
		pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_CEN;
	}

}
 8001ee6:	e007      	b.n	8001ef8 <timer_SetState+0x3c>
		pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_CEN;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <Timer3_Callback>:

__attribute__((weak)) void Timer2_Callback(void){
	__NOP();
}

__attribute__((weak)) void Timer3_Callback(void){
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	__NOP();
 8001f08:	bf00      	nop
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <Timer5_Callback>:

__attribute__((weak)) void Timer4_Callback(void){
	__NOP();
}

__attribute__((weak)) void Timer5_Callback(void){
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
	__NOP();
 8001f18:	bf00      	nop
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <Timer9_Callback>:

__attribute__((weak)) void Timer9_Callback(void){
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	__NOP();
 8001f28:	bf00      	nop
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <Timer10_Callback>:

__attribute__((weak)) void Timer10_Callback(void){
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	__NOP();
 8001f38:	bf00      	nop
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <Timer11_Callback>:

__attribute__((weak)) void Timer11_Callback(void){
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	__NOP();
 8001f48:	bf00      	nop
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <TIM2_IRQHandler>:

/* Esta la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones.
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria.*/
void TIM2_IRQHandler(void){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	//Limpiamos la bandera que indica que la interrupción se ha generado.
	TIM2->SR &= ~TIM_SR_UIF;
 8001f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6113      	str	r3, [r2, #16]

	//Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
	Timer2_Callback();
 8001f68:	f7ff fb0c 	bl	8001584 <Timer2_Callback>

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <TIM3_IRQHandler>:
/* Esta la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones.
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria.*/
void TIM3_IRQHandler(void){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	//Limpiamos la bandera que indica que la interrupción se ha generado.
	TIM3->SR &= ~TIM_SR_UIF;
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <TIM3_IRQHandler+0x18>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <TIM3_IRQHandler+0x18>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6113      	str	r3, [r2, #16]

	//Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
	Timer3_Callback();
 8001f80:	f7ff ffc0 	bl	8001f04 <Timer3_Callback>

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40000400 	.word	0x40000400

08001f8c <TIM4_IRQHandler>:
/* Esta la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones.
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria.*/
void TIM4_IRQHandler(void){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	//Limpiamos la bandera que indica que la interrupción se ha generado.
	TIM4->SR &= ~TIM_SR_UIF;
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <TIM4_IRQHandler+0x18>)
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <TIM4_IRQHandler+0x18>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6113      	str	r3, [r2, #16]

	//Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
	Timer4_Callback();
 8001f9c:	f7ff fafe 	bl	800159c <Timer4_Callback>

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40000800 	.word	0x40000800

08001fa8 <TIM5_IRQHandler>:
/* Esta la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones.
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria.*/
void TIM5_IRQHandler(void){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	//Limpiamos la bandera que indica que la interrupción se ha generado.
	TIM5->SR &= ~TIM_SR_UIF;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <TIM5_IRQHandler+0x18>)
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <TIM5_IRQHandler+0x18>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6113      	str	r3, [r2, #16]

	//Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
	Timer5_Callback();
 8001fb8:	f7ff ffac 	bl	8001f14 <Timer5_Callback>

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40000c00 	.word	0x40000c00

08001fc4 <TIM1_BRK_TIM9_IRQHandler>:

/* Esta la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones.
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria.*/
void TIM1_BRK_TIM9_IRQHandler(void){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	//Limpiamos la bandera que indica que la interrupción se ha generado.
		TIM9->SR &= ~TIM_SR_UIF;
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6113      	str	r3, [r2, #16]

		//Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
		Timer9_Callback();
 8001fd4:	f7ff ffa6 	bl	8001f24 <Timer9_Callback>
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40014000 	.word	0x40014000

08001fe0 <TIM1_UP_TIM10_IRQHandler>:

/* Esta la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones.
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria.*/
void TIM1_UP_TIM10_IRQHandler(void){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	//Limpiamos la bandera que indica que la interrupción se ha generado.
		TIM10->SR &= ~TIM_SR_UIF;
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6113      	str	r3, [r2, #16]

		//Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
		Timer10_Callback();
 8001ff0:	f7ff ffa0 	bl	8001f34 <Timer10_Callback>
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40014400 	.word	0x40014400

08001ffc <TIM1_TRG_COM_TIM11_IRQHandler>:

/* Esta la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones.
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria.*/
void TIM1_TRG_COM_TIM11_IRQHandler(void){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	//Limpiamos la bandera que indica que la interrupción se ha generado.
		TIM11->SR &= ~TIM_SR_UIF;
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6113      	str	r3, [r2, #16]

		//Llamamos a la función que se debe encargar de hacer algo con esta interrupción.
		Timer11_Callback();
 800200c:	f7ff ff9a 	bl	8001f44 <Timer11_Callback>
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40014800 	.word	0x40014800

08002018 <usart_WriteChar>:
}

/*
 * función para escribir un solo char
 */
int usart_WriteChar(USART_Handler_t *ptrUsartHandler, int dataToSend) {
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)) {
 8002022:	e000      	b.n	8002026 <usart_WriteChar+0xe>
		__NOP();
 8002024:	bf00      	nop
	while (!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)) {
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f7      	beq.n	8002024 <usart_WriteChar+0xc>
	}
	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	605a      	str	r2, [r3, #4]

	return dataToSend;
 800203c:	683b      	ldr	r3, [r7, #0]
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <usart_writeMsg>:

/*
 *
 */
void usart_writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend) {
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
	while (msgToSend[i] != 0) {
 8002058:	e00a      	b.n	8002070 <usart_writeMsg+0x26>
		usart_WriteChar(ptrUsartHandler, msgToSend[i]);
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	4413      	add	r3, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ffd7 	bl	8002018 <usart_WriteChar>
		i++;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	3301      	adds	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
	while (msgToSend[i] != 0) {
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <usart_writeMsg+0x10>
	}
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <USART2_IRQHandler>:


/* Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART2_IRQHandler(void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se dio es por RX
	if (USART2->SR & USART_SR_RXNE){
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <USART2_IRQHandler+0x24>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <USART2_IRQHandler+0x1e>
		//Bajamos la bandera correspondiente leyendo el dato.

		auxRxData2 = USART2->DR;
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <USART2_IRQHandler+0x24>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <USART2_IRQHandler+0x28>)
 80020a0:	701a      	strb	r2, [r3, #0]


		//Llamamos el callback
		usart2_RxCallback();
 80020a2:	f000 f83b 	bl	800211c <usart2_RxCallback>
//		USART2->SR |= USART_SR_TXE;
//
//		//Llamamos el callback
//		usart2_RxCallback();
//	}
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40004400 	.word	0x40004400
 80020b0:	2000049d 	.word	0x2000049d

080020b4 <USART6_IRQHandler>:

/* Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART6_IRQHandler(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se dio es por RX
	if (USART6->SR & USART_SR_RXNE){
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <USART6_IRQHandler+0x24>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <USART6_IRQHandler+0x1e>
		//Bajamos la bandera correspondiente leyendo el dato.

		auxRxData6 = USART6->DR;
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <USART6_IRQHandler+0x24>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <USART6_IRQHandler+0x28>)
 80020cc:	701a      	strb	r2, [r3, #0]

		//Llamamos el callback
		usart6_RxCallback();
 80020ce:	f000 f82d 	bl	800212c <usart6_RxCallback>
//		USART6->SR |= USART_SR_TXE;
//
//		//Llamamos el callback
//		usart6_RxCallback();
//	}
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40011400 	.word	0x40011400
 80020dc:	2000049e 	.word	0x2000049e

080020e0 <USART1_IRQHandler>:

/* Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART1_IRQHandler(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se dio es por RX
	if (USART1->SR & USART_SR_RXNE){
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <USART1_IRQHandler+0x24>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <USART1_IRQHandler+0x1e>
		//Bajamos la bandera correspondiente leyendo el dato.

		auxRxData1 = USART1->DR;
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <USART1_IRQHandler+0x24>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <USART1_IRQHandler+0x28>)
 80020f8:	701a      	strb	r2, [r3, #0]

		//Llamamos el callback
		usart1_RxCallback();
 80020fa:	f000 f807 	bl	800210c <usart1_RxCallback>
//		USART1->SR |= USART_SR_TXE;
//
//		//Llamamos el callback
//		usart1_RxCallback();
//	}
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40011000 	.word	0x40011000
 8002108:	2000049c 	.word	0x2000049c

0800210c <usart1_RxCallback>:

__attribute__((weak)) void usart1_RxCallback(void) {
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the BasicTimer_Callback could be implemented in the main file
	 */
	__NOP();
 8002110:	bf00      	nop
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <usart2_RxCallback>:

__attribute__((weak)) void usart2_RxCallback(void) {
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the BasicTimer_Callback could be implemented in the main file
	 */
	__NOP();
 8002120:	bf00      	nop
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <usart6_RxCallback>:

__attribute__((weak)) void usart6_RxCallback(void) {
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
	/* NOTE : This function should not be modified, when the callback is needed,
	 the BasicTimer_Callback could be implemented in the main file
	 */
	__NOP();
 8002130:	bf00      	nop
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <__cvt>:
 800213c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002140:	ec55 4b10 	vmov	r4, r5, d0
 8002144:	2d00      	cmp	r5, #0
 8002146:	460e      	mov	r6, r1
 8002148:	4619      	mov	r1, r3
 800214a:	462b      	mov	r3, r5
 800214c:	bfbb      	ittet	lt
 800214e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002152:	461d      	movlt	r5, r3
 8002154:	2300      	movge	r3, #0
 8002156:	232d      	movlt	r3, #45	; 0x2d
 8002158:	700b      	strb	r3, [r1, #0]
 800215a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800215c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002160:	4691      	mov	r9, r2
 8002162:	f023 0820 	bic.w	r8, r3, #32
 8002166:	bfbc      	itt	lt
 8002168:	4622      	movlt	r2, r4
 800216a:	4614      	movlt	r4, r2
 800216c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002170:	d005      	beq.n	800217e <__cvt+0x42>
 8002172:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002176:	d100      	bne.n	800217a <__cvt+0x3e>
 8002178:	3601      	adds	r6, #1
 800217a:	2102      	movs	r1, #2
 800217c:	e000      	b.n	8002180 <__cvt+0x44>
 800217e:	2103      	movs	r1, #3
 8002180:	ab03      	add	r3, sp, #12
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	ab02      	add	r3, sp, #8
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	ec45 4b10 	vmov	d0, r4, r5
 800218c:	4653      	mov	r3, sl
 800218e:	4632      	mov	r2, r6
 8002190:	f001 f87e 	bl	8003290 <_dtoa_r>
 8002194:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002198:	4607      	mov	r7, r0
 800219a:	d102      	bne.n	80021a2 <__cvt+0x66>
 800219c:	f019 0f01 	tst.w	r9, #1
 80021a0:	d022      	beq.n	80021e8 <__cvt+0xac>
 80021a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80021a6:	eb07 0906 	add.w	r9, r7, r6
 80021aa:	d110      	bne.n	80021ce <__cvt+0x92>
 80021ac:	783b      	ldrb	r3, [r7, #0]
 80021ae:	2b30      	cmp	r3, #48	; 0x30
 80021b0:	d10a      	bne.n	80021c8 <__cvt+0x8c>
 80021b2:	2200      	movs	r2, #0
 80021b4:	2300      	movs	r3, #0
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fc8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80021be:	b918      	cbnz	r0, 80021c8 <__cvt+0x8c>
 80021c0:	f1c6 0601 	rsb	r6, r6, #1
 80021c4:	f8ca 6000 	str.w	r6, [sl]
 80021c8:	f8da 3000 	ldr.w	r3, [sl]
 80021cc:	4499      	add	r9, r3
 80021ce:	2200      	movs	r2, #0
 80021d0:	2300      	movs	r3, #0
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f7fe fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80021da:	b108      	cbz	r0, 80021e0 <__cvt+0xa4>
 80021dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80021e0:	2230      	movs	r2, #48	; 0x30
 80021e2:	9b03      	ldr	r3, [sp, #12]
 80021e4:	454b      	cmp	r3, r9
 80021e6:	d307      	bcc.n	80021f8 <__cvt+0xbc>
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80021ec:	1bdb      	subs	r3, r3, r7
 80021ee:	4638      	mov	r0, r7
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	b004      	add	sp, #16
 80021f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f8:	1c59      	adds	r1, r3, #1
 80021fa:	9103      	str	r1, [sp, #12]
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e7f0      	b.n	80021e2 <__cvt+0xa6>

08002200 <__exponent>:
 8002200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002202:	4603      	mov	r3, r0
 8002204:	2900      	cmp	r1, #0
 8002206:	bfb8      	it	lt
 8002208:	4249      	neglt	r1, r1
 800220a:	f803 2b02 	strb.w	r2, [r3], #2
 800220e:	bfb4      	ite	lt
 8002210:	222d      	movlt	r2, #45	; 0x2d
 8002212:	222b      	movge	r2, #43	; 0x2b
 8002214:	2909      	cmp	r1, #9
 8002216:	7042      	strb	r2, [r0, #1]
 8002218:	dd2a      	ble.n	8002270 <__exponent+0x70>
 800221a:	f10d 0207 	add.w	r2, sp, #7
 800221e:	4617      	mov	r7, r2
 8002220:	260a      	movs	r6, #10
 8002222:	4694      	mov	ip, r2
 8002224:	fb91 f5f6 	sdiv	r5, r1, r6
 8002228:	fb06 1415 	mls	r4, r6, r5, r1
 800222c:	3430      	adds	r4, #48	; 0x30
 800222e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002232:	460c      	mov	r4, r1
 8002234:	2c63      	cmp	r4, #99	; 0x63
 8002236:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800223a:	4629      	mov	r1, r5
 800223c:	dcf1      	bgt.n	8002222 <__exponent+0x22>
 800223e:	3130      	adds	r1, #48	; 0x30
 8002240:	f1ac 0402 	sub.w	r4, ip, #2
 8002244:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002248:	1c41      	adds	r1, r0, #1
 800224a:	4622      	mov	r2, r4
 800224c:	42ba      	cmp	r2, r7
 800224e:	d30a      	bcc.n	8002266 <__exponent+0x66>
 8002250:	f10d 0209 	add.w	r2, sp, #9
 8002254:	eba2 020c 	sub.w	r2, r2, ip
 8002258:	42bc      	cmp	r4, r7
 800225a:	bf88      	it	hi
 800225c:	2200      	movhi	r2, #0
 800225e:	4413      	add	r3, r2
 8002260:	1a18      	subs	r0, r3, r0
 8002262:	b003      	add	sp, #12
 8002264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002266:	f812 5b01 	ldrb.w	r5, [r2], #1
 800226a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800226e:	e7ed      	b.n	800224c <__exponent+0x4c>
 8002270:	2330      	movs	r3, #48	; 0x30
 8002272:	3130      	adds	r1, #48	; 0x30
 8002274:	7083      	strb	r3, [r0, #2]
 8002276:	70c1      	strb	r1, [r0, #3]
 8002278:	1d03      	adds	r3, r0, #4
 800227a:	e7f1      	b.n	8002260 <__exponent+0x60>

0800227c <_printf_float>:
 800227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002280:	ed2d 8b02 	vpush	{d8}
 8002284:	b08d      	sub	sp, #52	; 0x34
 8002286:	460c      	mov	r4, r1
 8002288:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800228c:	4616      	mov	r6, r2
 800228e:	461f      	mov	r7, r3
 8002290:	4605      	mov	r5, r0
 8002292:	f000 fef7 	bl	8003084 <_localeconv_r>
 8002296:	f8d0 a000 	ldr.w	sl, [r0]
 800229a:	4650      	mov	r0, sl
 800229c:	f7fd fff0 	bl	8000280 <strlen>
 80022a0:	2300      	movs	r3, #0
 80022a2:	930a      	str	r3, [sp, #40]	; 0x28
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	9305      	str	r3, [sp, #20]
 80022a8:	f8d8 3000 	ldr.w	r3, [r8]
 80022ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80022b0:	3307      	adds	r3, #7
 80022b2:	f023 0307 	bic.w	r3, r3, #7
 80022b6:	f103 0208 	add.w	r2, r3, #8
 80022ba:	f8c8 2000 	str.w	r2, [r8]
 80022be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80022c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80022c6:	9307      	str	r3, [sp, #28]
 80022c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80022cc:	ee08 0a10 	vmov	s16, r0
 80022d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80022d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80022d8:	4b9e      	ldr	r3, [pc, #632]	; (8002554 <_printf_float+0x2d8>)
 80022da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022de:	f7fe fc2d 	bl	8000b3c <__aeabi_dcmpun>
 80022e2:	bb88      	cbnz	r0, 8002348 <_printf_float+0xcc>
 80022e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80022e8:	4b9a      	ldr	r3, [pc, #616]	; (8002554 <_printf_float+0x2d8>)
 80022ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022ee:	f7fe fc07 	bl	8000b00 <__aeabi_dcmple>
 80022f2:	bb48      	cbnz	r0, 8002348 <_printf_float+0xcc>
 80022f4:	2200      	movs	r2, #0
 80022f6:	2300      	movs	r3, #0
 80022f8:	4640      	mov	r0, r8
 80022fa:	4649      	mov	r1, r9
 80022fc:	f7fe fbf6 	bl	8000aec <__aeabi_dcmplt>
 8002300:	b110      	cbz	r0, 8002308 <_printf_float+0x8c>
 8002302:	232d      	movs	r3, #45	; 0x2d
 8002304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002308:	4a93      	ldr	r2, [pc, #588]	; (8002558 <_printf_float+0x2dc>)
 800230a:	4b94      	ldr	r3, [pc, #592]	; (800255c <_printf_float+0x2e0>)
 800230c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002310:	bf94      	ite	ls
 8002312:	4690      	movls	r8, r2
 8002314:	4698      	movhi	r8, r3
 8002316:	2303      	movs	r3, #3
 8002318:	6123      	str	r3, [r4, #16]
 800231a:	9b05      	ldr	r3, [sp, #20]
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	f04f 0900 	mov.w	r9, #0
 8002326:	9700      	str	r7, [sp, #0]
 8002328:	4633      	mov	r3, r6
 800232a:	aa0b      	add	r2, sp, #44	; 0x2c
 800232c:	4621      	mov	r1, r4
 800232e:	4628      	mov	r0, r5
 8002330:	f000 f9da 	bl	80026e8 <_printf_common>
 8002334:	3001      	adds	r0, #1
 8002336:	f040 8090 	bne.w	800245a <_printf_float+0x1de>
 800233a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800233e:	b00d      	add	sp, #52	; 0x34
 8002340:	ecbd 8b02 	vpop	{d8}
 8002344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002348:	4642      	mov	r2, r8
 800234a:	464b      	mov	r3, r9
 800234c:	4640      	mov	r0, r8
 800234e:	4649      	mov	r1, r9
 8002350:	f7fe fbf4 	bl	8000b3c <__aeabi_dcmpun>
 8002354:	b140      	cbz	r0, 8002368 <_printf_float+0xec>
 8002356:	464b      	mov	r3, r9
 8002358:	2b00      	cmp	r3, #0
 800235a:	bfbc      	itt	lt
 800235c:	232d      	movlt	r3, #45	; 0x2d
 800235e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002362:	4a7f      	ldr	r2, [pc, #508]	; (8002560 <_printf_float+0x2e4>)
 8002364:	4b7f      	ldr	r3, [pc, #508]	; (8002564 <_printf_float+0x2e8>)
 8002366:	e7d1      	b.n	800230c <_printf_float+0x90>
 8002368:	6863      	ldr	r3, [r4, #4]
 800236a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800236e:	9206      	str	r2, [sp, #24]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	d13f      	bne.n	80023f4 <_printf_float+0x178>
 8002374:	2306      	movs	r3, #6
 8002376:	6063      	str	r3, [r4, #4]
 8002378:	9b05      	ldr	r3, [sp, #20]
 800237a:	6861      	ldr	r1, [r4, #4]
 800237c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002380:	2300      	movs	r3, #0
 8002382:	9303      	str	r3, [sp, #12]
 8002384:	ab0a      	add	r3, sp, #40	; 0x28
 8002386:	e9cd b301 	strd	fp, r3, [sp, #4]
 800238a:	ab09      	add	r3, sp, #36	; 0x24
 800238c:	ec49 8b10 	vmov	d0, r8, r9
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	6022      	str	r2, [r4, #0]
 8002394:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002398:	4628      	mov	r0, r5
 800239a:	f7ff fecf 	bl	800213c <__cvt>
 800239e:	9b06      	ldr	r3, [sp, #24]
 80023a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80023a2:	2b47      	cmp	r3, #71	; 0x47
 80023a4:	4680      	mov	r8, r0
 80023a6:	d108      	bne.n	80023ba <_printf_float+0x13e>
 80023a8:	1cc8      	adds	r0, r1, #3
 80023aa:	db02      	blt.n	80023b2 <_printf_float+0x136>
 80023ac:	6863      	ldr	r3, [r4, #4]
 80023ae:	4299      	cmp	r1, r3
 80023b0:	dd41      	ble.n	8002436 <_printf_float+0x1ba>
 80023b2:	f1ab 0302 	sub.w	r3, fp, #2
 80023b6:	fa5f fb83 	uxtb.w	fp, r3
 80023ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80023be:	d820      	bhi.n	8002402 <_printf_float+0x186>
 80023c0:	3901      	subs	r1, #1
 80023c2:	465a      	mov	r2, fp
 80023c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80023c8:	9109      	str	r1, [sp, #36]	; 0x24
 80023ca:	f7ff ff19 	bl	8002200 <__exponent>
 80023ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023d0:	1813      	adds	r3, r2, r0
 80023d2:	2a01      	cmp	r2, #1
 80023d4:	4681      	mov	r9, r0
 80023d6:	6123      	str	r3, [r4, #16]
 80023d8:	dc02      	bgt.n	80023e0 <_printf_float+0x164>
 80023da:	6822      	ldr	r2, [r4, #0]
 80023dc:	07d2      	lsls	r2, r2, #31
 80023de:	d501      	bpl.n	80023e4 <_printf_float+0x168>
 80023e0:	3301      	adds	r3, #1
 80023e2:	6123      	str	r3, [r4, #16]
 80023e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d09c      	beq.n	8002326 <_printf_float+0xaa>
 80023ec:	232d      	movs	r3, #45	; 0x2d
 80023ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f2:	e798      	b.n	8002326 <_printf_float+0xaa>
 80023f4:	9a06      	ldr	r2, [sp, #24]
 80023f6:	2a47      	cmp	r2, #71	; 0x47
 80023f8:	d1be      	bne.n	8002378 <_printf_float+0xfc>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1bc      	bne.n	8002378 <_printf_float+0xfc>
 80023fe:	2301      	movs	r3, #1
 8002400:	e7b9      	b.n	8002376 <_printf_float+0xfa>
 8002402:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002406:	d118      	bne.n	800243a <_printf_float+0x1be>
 8002408:	2900      	cmp	r1, #0
 800240a:	6863      	ldr	r3, [r4, #4]
 800240c:	dd0b      	ble.n	8002426 <_printf_float+0x1aa>
 800240e:	6121      	str	r1, [r4, #16]
 8002410:	b913      	cbnz	r3, 8002418 <_printf_float+0x19c>
 8002412:	6822      	ldr	r2, [r4, #0]
 8002414:	07d0      	lsls	r0, r2, #31
 8002416:	d502      	bpl.n	800241e <_printf_float+0x1a2>
 8002418:	3301      	adds	r3, #1
 800241a:	440b      	add	r3, r1
 800241c:	6123      	str	r3, [r4, #16]
 800241e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002420:	f04f 0900 	mov.w	r9, #0
 8002424:	e7de      	b.n	80023e4 <_printf_float+0x168>
 8002426:	b913      	cbnz	r3, 800242e <_printf_float+0x1b2>
 8002428:	6822      	ldr	r2, [r4, #0]
 800242a:	07d2      	lsls	r2, r2, #31
 800242c:	d501      	bpl.n	8002432 <_printf_float+0x1b6>
 800242e:	3302      	adds	r3, #2
 8002430:	e7f4      	b.n	800241c <_printf_float+0x1a0>
 8002432:	2301      	movs	r3, #1
 8002434:	e7f2      	b.n	800241c <_printf_float+0x1a0>
 8002436:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800243a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800243c:	4299      	cmp	r1, r3
 800243e:	db05      	blt.n	800244c <_printf_float+0x1d0>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	6121      	str	r1, [r4, #16]
 8002444:	07d8      	lsls	r0, r3, #31
 8002446:	d5ea      	bpl.n	800241e <_printf_float+0x1a2>
 8002448:	1c4b      	adds	r3, r1, #1
 800244a:	e7e7      	b.n	800241c <_printf_float+0x1a0>
 800244c:	2900      	cmp	r1, #0
 800244e:	bfd4      	ite	le
 8002450:	f1c1 0202 	rsble	r2, r1, #2
 8002454:	2201      	movgt	r2, #1
 8002456:	4413      	add	r3, r2
 8002458:	e7e0      	b.n	800241c <_printf_float+0x1a0>
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	055a      	lsls	r2, r3, #21
 800245e:	d407      	bmi.n	8002470 <_printf_float+0x1f4>
 8002460:	6923      	ldr	r3, [r4, #16]
 8002462:	4642      	mov	r2, r8
 8002464:	4631      	mov	r1, r6
 8002466:	4628      	mov	r0, r5
 8002468:	47b8      	blx	r7
 800246a:	3001      	adds	r0, #1
 800246c:	d12c      	bne.n	80024c8 <_printf_float+0x24c>
 800246e:	e764      	b.n	800233a <_printf_float+0xbe>
 8002470:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002474:	f240 80e0 	bls.w	8002638 <_printf_float+0x3bc>
 8002478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800247c:	2200      	movs	r2, #0
 800247e:	2300      	movs	r3, #0
 8002480:	f7fe fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8002484:	2800      	cmp	r0, #0
 8002486:	d034      	beq.n	80024f2 <_printf_float+0x276>
 8002488:	4a37      	ldr	r2, [pc, #220]	; (8002568 <_printf_float+0x2ec>)
 800248a:	2301      	movs	r3, #1
 800248c:	4631      	mov	r1, r6
 800248e:	4628      	mov	r0, r5
 8002490:	47b8      	blx	r7
 8002492:	3001      	adds	r0, #1
 8002494:	f43f af51 	beq.w	800233a <_printf_float+0xbe>
 8002498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800249c:	429a      	cmp	r2, r3
 800249e:	db02      	blt.n	80024a6 <_printf_float+0x22a>
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	07d8      	lsls	r0, r3, #31
 80024a4:	d510      	bpl.n	80024c8 <_printf_float+0x24c>
 80024a6:	ee18 3a10 	vmov	r3, s16
 80024aa:	4652      	mov	r2, sl
 80024ac:	4631      	mov	r1, r6
 80024ae:	4628      	mov	r0, r5
 80024b0:	47b8      	blx	r7
 80024b2:	3001      	adds	r0, #1
 80024b4:	f43f af41 	beq.w	800233a <_printf_float+0xbe>
 80024b8:	f04f 0800 	mov.w	r8, #0
 80024bc:	f104 091a 	add.w	r9, r4, #26
 80024c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	4543      	cmp	r3, r8
 80024c6:	dc09      	bgt.n	80024dc <_printf_float+0x260>
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	079b      	lsls	r3, r3, #30
 80024cc:	f100 8107 	bmi.w	80026de <_printf_float+0x462>
 80024d0:	68e0      	ldr	r0, [r4, #12]
 80024d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80024d4:	4298      	cmp	r0, r3
 80024d6:	bfb8      	it	lt
 80024d8:	4618      	movlt	r0, r3
 80024da:	e730      	b.n	800233e <_printf_float+0xc2>
 80024dc:	2301      	movs	r3, #1
 80024de:	464a      	mov	r2, r9
 80024e0:	4631      	mov	r1, r6
 80024e2:	4628      	mov	r0, r5
 80024e4:	47b8      	blx	r7
 80024e6:	3001      	adds	r0, #1
 80024e8:	f43f af27 	beq.w	800233a <_printf_float+0xbe>
 80024ec:	f108 0801 	add.w	r8, r8, #1
 80024f0:	e7e6      	b.n	80024c0 <_printf_float+0x244>
 80024f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	dc39      	bgt.n	800256c <_printf_float+0x2f0>
 80024f8:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <_printf_float+0x2ec>)
 80024fa:	2301      	movs	r3, #1
 80024fc:	4631      	mov	r1, r6
 80024fe:	4628      	mov	r0, r5
 8002500:	47b8      	blx	r7
 8002502:	3001      	adds	r0, #1
 8002504:	f43f af19 	beq.w	800233a <_printf_float+0xbe>
 8002508:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800250c:	4313      	orrs	r3, r2
 800250e:	d102      	bne.n	8002516 <_printf_float+0x29a>
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	07d9      	lsls	r1, r3, #31
 8002514:	d5d8      	bpl.n	80024c8 <_printf_float+0x24c>
 8002516:	ee18 3a10 	vmov	r3, s16
 800251a:	4652      	mov	r2, sl
 800251c:	4631      	mov	r1, r6
 800251e:	4628      	mov	r0, r5
 8002520:	47b8      	blx	r7
 8002522:	3001      	adds	r0, #1
 8002524:	f43f af09 	beq.w	800233a <_printf_float+0xbe>
 8002528:	f04f 0900 	mov.w	r9, #0
 800252c:	f104 0a1a 	add.w	sl, r4, #26
 8002530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002532:	425b      	negs	r3, r3
 8002534:	454b      	cmp	r3, r9
 8002536:	dc01      	bgt.n	800253c <_printf_float+0x2c0>
 8002538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800253a:	e792      	b.n	8002462 <_printf_float+0x1e6>
 800253c:	2301      	movs	r3, #1
 800253e:	4652      	mov	r2, sl
 8002540:	4631      	mov	r1, r6
 8002542:	4628      	mov	r0, r5
 8002544:	47b8      	blx	r7
 8002546:	3001      	adds	r0, #1
 8002548:	f43f aef7 	beq.w	800233a <_printf_float+0xbe>
 800254c:	f109 0901 	add.w	r9, r9, #1
 8002550:	e7ee      	b.n	8002530 <_printf_float+0x2b4>
 8002552:	bf00      	nop
 8002554:	7fefffff 	.word	0x7fefffff
 8002558:	08006ef0 	.word	0x08006ef0
 800255c:	08006ef4 	.word	0x08006ef4
 8002560:	08006ef8 	.word	0x08006ef8
 8002564:	08006efc 	.word	0x08006efc
 8002568:	08006f00 	.word	0x08006f00
 800256c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800256e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002570:	429a      	cmp	r2, r3
 8002572:	bfa8      	it	ge
 8002574:	461a      	movge	r2, r3
 8002576:	2a00      	cmp	r2, #0
 8002578:	4691      	mov	r9, r2
 800257a:	dc37      	bgt.n	80025ec <_printf_float+0x370>
 800257c:	f04f 0b00 	mov.w	fp, #0
 8002580:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002584:	f104 021a 	add.w	r2, r4, #26
 8002588:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800258a:	9305      	str	r3, [sp, #20]
 800258c:	eba3 0309 	sub.w	r3, r3, r9
 8002590:	455b      	cmp	r3, fp
 8002592:	dc33      	bgt.n	80025fc <_printf_float+0x380>
 8002594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002598:	429a      	cmp	r2, r3
 800259a:	db3b      	blt.n	8002614 <_printf_float+0x398>
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	07da      	lsls	r2, r3, #31
 80025a0:	d438      	bmi.n	8002614 <_printf_float+0x398>
 80025a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80025a6:	eba2 0903 	sub.w	r9, r2, r3
 80025aa:	9b05      	ldr	r3, [sp, #20]
 80025ac:	1ad2      	subs	r2, r2, r3
 80025ae:	4591      	cmp	r9, r2
 80025b0:	bfa8      	it	ge
 80025b2:	4691      	movge	r9, r2
 80025b4:	f1b9 0f00 	cmp.w	r9, #0
 80025b8:	dc35      	bgt.n	8002626 <_printf_float+0x3aa>
 80025ba:	f04f 0800 	mov.w	r8, #0
 80025be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80025c2:	f104 0a1a 	add.w	sl, r4, #26
 80025c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	eba3 0309 	sub.w	r3, r3, r9
 80025d0:	4543      	cmp	r3, r8
 80025d2:	f77f af79 	ble.w	80024c8 <_printf_float+0x24c>
 80025d6:	2301      	movs	r3, #1
 80025d8:	4652      	mov	r2, sl
 80025da:	4631      	mov	r1, r6
 80025dc:	4628      	mov	r0, r5
 80025de:	47b8      	blx	r7
 80025e0:	3001      	adds	r0, #1
 80025e2:	f43f aeaa 	beq.w	800233a <_printf_float+0xbe>
 80025e6:	f108 0801 	add.w	r8, r8, #1
 80025ea:	e7ec      	b.n	80025c6 <_printf_float+0x34a>
 80025ec:	4613      	mov	r3, r2
 80025ee:	4631      	mov	r1, r6
 80025f0:	4642      	mov	r2, r8
 80025f2:	4628      	mov	r0, r5
 80025f4:	47b8      	blx	r7
 80025f6:	3001      	adds	r0, #1
 80025f8:	d1c0      	bne.n	800257c <_printf_float+0x300>
 80025fa:	e69e      	b.n	800233a <_printf_float+0xbe>
 80025fc:	2301      	movs	r3, #1
 80025fe:	4631      	mov	r1, r6
 8002600:	4628      	mov	r0, r5
 8002602:	9205      	str	r2, [sp, #20]
 8002604:	47b8      	blx	r7
 8002606:	3001      	adds	r0, #1
 8002608:	f43f ae97 	beq.w	800233a <_printf_float+0xbe>
 800260c:	9a05      	ldr	r2, [sp, #20]
 800260e:	f10b 0b01 	add.w	fp, fp, #1
 8002612:	e7b9      	b.n	8002588 <_printf_float+0x30c>
 8002614:	ee18 3a10 	vmov	r3, s16
 8002618:	4652      	mov	r2, sl
 800261a:	4631      	mov	r1, r6
 800261c:	4628      	mov	r0, r5
 800261e:	47b8      	blx	r7
 8002620:	3001      	adds	r0, #1
 8002622:	d1be      	bne.n	80025a2 <_printf_float+0x326>
 8002624:	e689      	b.n	800233a <_printf_float+0xbe>
 8002626:	9a05      	ldr	r2, [sp, #20]
 8002628:	464b      	mov	r3, r9
 800262a:	4442      	add	r2, r8
 800262c:	4631      	mov	r1, r6
 800262e:	4628      	mov	r0, r5
 8002630:	47b8      	blx	r7
 8002632:	3001      	adds	r0, #1
 8002634:	d1c1      	bne.n	80025ba <_printf_float+0x33e>
 8002636:	e680      	b.n	800233a <_printf_float+0xbe>
 8002638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800263a:	2a01      	cmp	r2, #1
 800263c:	dc01      	bgt.n	8002642 <_printf_float+0x3c6>
 800263e:	07db      	lsls	r3, r3, #31
 8002640:	d53a      	bpl.n	80026b8 <_printf_float+0x43c>
 8002642:	2301      	movs	r3, #1
 8002644:	4642      	mov	r2, r8
 8002646:	4631      	mov	r1, r6
 8002648:	4628      	mov	r0, r5
 800264a:	47b8      	blx	r7
 800264c:	3001      	adds	r0, #1
 800264e:	f43f ae74 	beq.w	800233a <_printf_float+0xbe>
 8002652:	ee18 3a10 	vmov	r3, s16
 8002656:	4652      	mov	r2, sl
 8002658:	4631      	mov	r1, r6
 800265a:	4628      	mov	r0, r5
 800265c:	47b8      	blx	r7
 800265e:	3001      	adds	r0, #1
 8002660:	f43f ae6b 	beq.w	800233a <_printf_float+0xbe>
 8002664:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002668:	2200      	movs	r2, #0
 800266a:	2300      	movs	r3, #0
 800266c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8002670:	f7fe fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 8002674:	b9d8      	cbnz	r0, 80026ae <_printf_float+0x432>
 8002676:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800267a:	f108 0201 	add.w	r2, r8, #1
 800267e:	4631      	mov	r1, r6
 8002680:	4628      	mov	r0, r5
 8002682:	47b8      	blx	r7
 8002684:	3001      	adds	r0, #1
 8002686:	d10e      	bne.n	80026a6 <_printf_float+0x42a>
 8002688:	e657      	b.n	800233a <_printf_float+0xbe>
 800268a:	2301      	movs	r3, #1
 800268c:	4652      	mov	r2, sl
 800268e:	4631      	mov	r1, r6
 8002690:	4628      	mov	r0, r5
 8002692:	47b8      	blx	r7
 8002694:	3001      	adds	r0, #1
 8002696:	f43f ae50 	beq.w	800233a <_printf_float+0xbe>
 800269a:	f108 0801 	add.w	r8, r8, #1
 800269e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	4543      	cmp	r3, r8
 80026a4:	dcf1      	bgt.n	800268a <_printf_float+0x40e>
 80026a6:	464b      	mov	r3, r9
 80026a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80026ac:	e6da      	b.n	8002464 <_printf_float+0x1e8>
 80026ae:	f04f 0800 	mov.w	r8, #0
 80026b2:	f104 0a1a 	add.w	sl, r4, #26
 80026b6:	e7f2      	b.n	800269e <_printf_float+0x422>
 80026b8:	2301      	movs	r3, #1
 80026ba:	4642      	mov	r2, r8
 80026bc:	e7df      	b.n	800267e <_printf_float+0x402>
 80026be:	2301      	movs	r3, #1
 80026c0:	464a      	mov	r2, r9
 80026c2:	4631      	mov	r1, r6
 80026c4:	4628      	mov	r0, r5
 80026c6:	47b8      	blx	r7
 80026c8:	3001      	adds	r0, #1
 80026ca:	f43f ae36 	beq.w	800233a <_printf_float+0xbe>
 80026ce:	f108 0801 	add.w	r8, r8, #1
 80026d2:	68e3      	ldr	r3, [r4, #12]
 80026d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80026d6:	1a5b      	subs	r3, r3, r1
 80026d8:	4543      	cmp	r3, r8
 80026da:	dcf0      	bgt.n	80026be <_printf_float+0x442>
 80026dc:	e6f8      	b.n	80024d0 <_printf_float+0x254>
 80026de:	f04f 0800 	mov.w	r8, #0
 80026e2:	f104 0919 	add.w	r9, r4, #25
 80026e6:	e7f4      	b.n	80026d2 <_printf_float+0x456>

080026e8 <_printf_common>:
 80026e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026ec:	4616      	mov	r6, r2
 80026ee:	4699      	mov	r9, r3
 80026f0:	688a      	ldr	r2, [r1, #8]
 80026f2:	690b      	ldr	r3, [r1, #16]
 80026f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026f8:	4293      	cmp	r3, r2
 80026fa:	bfb8      	it	lt
 80026fc:	4613      	movlt	r3, r2
 80026fe:	6033      	str	r3, [r6, #0]
 8002700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002704:	4607      	mov	r7, r0
 8002706:	460c      	mov	r4, r1
 8002708:	b10a      	cbz	r2, 800270e <_printf_common+0x26>
 800270a:	3301      	adds	r3, #1
 800270c:	6033      	str	r3, [r6, #0]
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	0699      	lsls	r1, r3, #26
 8002712:	bf42      	ittt	mi
 8002714:	6833      	ldrmi	r3, [r6, #0]
 8002716:	3302      	addmi	r3, #2
 8002718:	6033      	strmi	r3, [r6, #0]
 800271a:	6825      	ldr	r5, [r4, #0]
 800271c:	f015 0506 	ands.w	r5, r5, #6
 8002720:	d106      	bne.n	8002730 <_printf_common+0x48>
 8002722:	f104 0a19 	add.w	sl, r4, #25
 8002726:	68e3      	ldr	r3, [r4, #12]
 8002728:	6832      	ldr	r2, [r6, #0]
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	42ab      	cmp	r3, r5
 800272e:	dc26      	bgt.n	800277e <_printf_common+0x96>
 8002730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002734:	1e13      	subs	r3, r2, #0
 8002736:	6822      	ldr	r2, [r4, #0]
 8002738:	bf18      	it	ne
 800273a:	2301      	movne	r3, #1
 800273c:	0692      	lsls	r2, r2, #26
 800273e:	d42b      	bmi.n	8002798 <_printf_common+0xb0>
 8002740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002744:	4649      	mov	r1, r9
 8002746:	4638      	mov	r0, r7
 8002748:	47c0      	blx	r8
 800274a:	3001      	adds	r0, #1
 800274c:	d01e      	beq.n	800278c <_printf_common+0xa4>
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	6922      	ldr	r2, [r4, #16]
 8002752:	f003 0306 	and.w	r3, r3, #6
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf02      	ittt	eq
 800275a:	68e5      	ldreq	r5, [r4, #12]
 800275c:	6833      	ldreq	r3, [r6, #0]
 800275e:	1aed      	subeq	r5, r5, r3
 8002760:	68a3      	ldr	r3, [r4, #8]
 8002762:	bf0c      	ite	eq
 8002764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002768:	2500      	movne	r5, #0
 800276a:	4293      	cmp	r3, r2
 800276c:	bfc4      	itt	gt
 800276e:	1a9b      	subgt	r3, r3, r2
 8002770:	18ed      	addgt	r5, r5, r3
 8002772:	2600      	movs	r6, #0
 8002774:	341a      	adds	r4, #26
 8002776:	42b5      	cmp	r5, r6
 8002778:	d11a      	bne.n	80027b0 <_printf_common+0xc8>
 800277a:	2000      	movs	r0, #0
 800277c:	e008      	b.n	8002790 <_printf_common+0xa8>
 800277e:	2301      	movs	r3, #1
 8002780:	4652      	mov	r2, sl
 8002782:	4649      	mov	r1, r9
 8002784:	4638      	mov	r0, r7
 8002786:	47c0      	blx	r8
 8002788:	3001      	adds	r0, #1
 800278a:	d103      	bne.n	8002794 <_printf_common+0xac>
 800278c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002794:	3501      	adds	r5, #1
 8002796:	e7c6      	b.n	8002726 <_printf_common+0x3e>
 8002798:	18e1      	adds	r1, r4, r3
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	2030      	movs	r0, #48	; 0x30
 800279e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027a2:	4422      	add	r2, r4
 80027a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027ac:	3302      	adds	r3, #2
 80027ae:	e7c7      	b.n	8002740 <_printf_common+0x58>
 80027b0:	2301      	movs	r3, #1
 80027b2:	4622      	mov	r2, r4
 80027b4:	4649      	mov	r1, r9
 80027b6:	4638      	mov	r0, r7
 80027b8:	47c0      	blx	r8
 80027ba:	3001      	adds	r0, #1
 80027bc:	d0e6      	beq.n	800278c <_printf_common+0xa4>
 80027be:	3601      	adds	r6, #1
 80027c0:	e7d9      	b.n	8002776 <_printf_common+0x8e>
	...

080027c4 <_printf_i>:
 80027c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027c8:	7e0f      	ldrb	r7, [r1, #24]
 80027ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80027cc:	2f78      	cmp	r7, #120	; 0x78
 80027ce:	4691      	mov	r9, r2
 80027d0:	4680      	mov	r8, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	469a      	mov	sl, r3
 80027d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80027da:	d807      	bhi.n	80027ec <_printf_i+0x28>
 80027dc:	2f62      	cmp	r7, #98	; 0x62
 80027de:	d80a      	bhi.n	80027f6 <_printf_i+0x32>
 80027e0:	2f00      	cmp	r7, #0
 80027e2:	f000 80d4 	beq.w	800298e <_printf_i+0x1ca>
 80027e6:	2f58      	cmp	r7, #88	; 0x58
 80027e8:	f000 80c0 	beq.w	800296c <_printf_i+0x1a8>
 80027ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80027f4:	e03a      	b.n	800286c <_printf_i+0xa8>
 80027f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80027fa:	2b15      	cmp	r3, #21
 80027fc:	d8f6      	bhi.n	80027ec <_printf_i+0x28>
 80027fe:	a101      	add	r1, pc, #4	; (adr r1, 8002804 <_printf_i+0x40>)
 8002800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002804:	0800285d 	.word	0x0800285d
 8002808:	08002871 	.word	0x08002871
 800280c:	080027ed 	.word	0x080027ed
 8002810:	080027ed 	.word	0x080027ed
 8002814:	080027ed 	.word	0x080027ed
 8002818:	080027ed 	.word	0x080027ed
 800281c:	08002871 	.word	0x08002871
 8002820:	080027ed 	.word	0x080027ed
 8002824:	080027ed 	.word	0x080027ed
 8002828:	080027ed 	.word	0x080027ed
 800282c:	080027ed 	.word	0x080027ed
 8002830:	08002975 	.word	0x08002975
 8002834:	0800289d 	.word	0x0800289d
 8002838:	0800292f 	.word	0x0800292f
 800283c:	080027ed 	.word	0x080027ed
 8002840:	080027ed 	.word	0x080027ed
 8002844:	08002997 	.word	0x08002997
 8002848:	080027ed 	.word	0x080027ed
 800284c:	0800289d 	.word	0x0800289d
 8002850:	080027ed 	.word	0x080027ed
 8002854:	080027ed 	.word	0x080027ed
 8002858:	08002937 	.word	0x08002937
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	1d1a      	adds	r2, r3, #4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	602a      	str	r2, [r5, #0]
 8002864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800286c:	2301      	movs	r3, #1
 800286e:	e09f      	b.n	80029b0 <_printf_i+0x1ec>
 8002870:	6820      	ldr	r0, [r4, #0]
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	0607      	lsls	r7, r0, #24
 8002876:	f103 0104 	add.w	r1, r3, #4
 800287a:	6029      	str	r1, [r5, #0]
 800287c:	d501      	bpl.n	8002882 <_printf_i+0xbe>
 800287e:	681e      	ldr	r6, [r3, #0]
 8002880:	e003      	b.n	800288a <_printf_i+0xc6>
 8002882:	0646      	lsls	r6, r0, #25
 8002884:	d5fb      	bpl.n	800287e <_printf_i+0xba>
 8002886:	f9b3 6000 	ldrsh.w	r6, [r3]
 800288a:	2e00      	cmp	r6, #0
 800288c:	da03      	bge.n	8002896 <_printf_i+0xd2>
 800288e:	232d      	movs	r3, #45	; 0x2d
 8002890:	4276      	negs	r6, r6
 8002892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002896:	485a      	ldr	r0, [pc, #360]	; (8002a00 <_printf_i+0x23c>)
 8002898:	230a      	movs	r3, #10
 800289a:	e012      	b.n	80028c2 <_printf_i+0xfe>
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	1d19      	adds	r1, r3, #4
 80028a2:	6029      	str	r1, [r5, #0]
 80028a4:	0605      	lsls	r5, r0, #24
 80028a6:	d501      	bpl.n	80028ac <_printf_i+0xe8>
 80028a8:	681e      	ldr	r6, [r3, #0]
 80028aa:	e002      	b.n	80028b2 <_printf_i+0xee>
 80028ac:	0641      	lsls	r1, r0, #25
 80028ae:	d5fb      	bpl.n	80028a8 <_printf_i+0xe4>
 80028b0:	881e      	ldrh	r6, [r3, #0]
 80028b2:	4853      	ldr	r0, [pc, #332]	; (8002a00 <_printf_i+0x23c>)
 80028b4:	2f6f      	cmp	r7, #111	; 0x6f
 80028b6:	bf0c      	ite	eq
 80028b8:	2308      	moveq	r3, #8
 80028ba:	230a      	movne	r3, #10
 80028bc:	2100      	movs	r1, #0
 80028be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028c2:	6865      	ldr	r5, [r4, #4]
 80028c4:	60a5      	str	r5, [r4, #8]
 80028c6:	2d00      	cmp	r5, #0
 80028c8:	bfa2      	ittt	ge
 80028ca:	6821      	ldrge	r1, [r4, #0]
 80028cc:	f021 0104 	bicge.w	r1, r1, #4
 80028d0:	6021      	strge	r1, [r4, #0]
 80028d2:	b90e      	cbnz	r6, 80028d8 <_printf_i+0x114>
 80028d4:	2d00      	cmp	r5, #0
 80028d6:	d04b      	beq.n	8002970 <_printf_i+0x1ac>
 80028d8:	4615      	mov	r5, r2
 80028da:	fbb6 f1f3 	udiv	r1, r6, r3
 80028de:	fb03 6711 	mls	r7, r3, r1, r6
 80028e2:	5dc7      	ldrb	r7, [r0, r7]
 80028e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80028e8:	4637      	mov	r7, r6
 80028ea:	42bb      	cmp	r3, r7
 80028ec:	460e      	mov	r6, r1
 80028ee:	d9f4      	bls.n	80028da <_printf_i+0x116>
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d10b      	bne.n	800290c <_printf_i+0x148>
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	07de      	lsls	r6, r3, #31
 80028f8:	d508      	bpl.n	800290c <_printf_i+0x148>
 80028fa:	6923      	ldr	r3, [r4, #16]
 80028fc:	6861      	ldr	r1, [r4, #4]
 80028fe:	4299      	cmp	r1, r3
 8002900:	bfde      	ittt	le
 8002902:	2330      	movle	r3, #48	; 0x30
 8002904:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002908:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800290c:	1b52      	subs	r2, r2, r5
 800290e:	6122      	str	r2, [r4, #16]
 8002910:	f8cd a000 	str.w	sl, [sp]
 8002914:	464b      	mov	r3, r9
 8002916:	aa03      	add	r2, sp, #12
 8002918:	4621      	mov	r1, r4
 800291a:	4640      	mov	r0, r8
 800291c:	f7ff fee4 	bl	80026e8 <_printf_common>
 8002920:	3001      	adds	r0, #1
 8002922:	d14a      	bne.n	80029ba <_printf_i+0x1f6>
 8002924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002928:	b004      	add	sp, #16
 800292a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	f043 0320 	orr.w	r3, r3, #32
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	4833      	ldr	r0, [pc, #204]	; (8002a04 <_printf_i+0x240>)
 8002938:	2778      	movs	r7, #120	; 0x78
 800293a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	6829      	ldr	r1, [r5, #0]
 8002942:	061f      	lsls	r7, r3, #24
 8002944:	f851 6b04 	ldr.w	r6, [r1], #4
 8002948:	d402      	bmi.n	8002950 <_printf_i+0x18c>
 800294a:	065f      	lsls	r7, r3, #25
 800294c:	bf48      	it	mi
 800294e:	b2b6      	uxthmi	r6, r6
 8002950:	07df      	lsls	r7, r3, #31
 8002952:	bf48      	it	mi
 8002954:	f043 0320 	orrmi.w	r3, r3, #32
 8002958:	6029      	str	r1, [r5, #0]
 800295a:	bf48      	it	mi
 800295c:	6023      	strmi	r3, [r4, #0]
 800295e:	b91e      	cbnz	r6, 8002968 <_printf_i+0x1a4>
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	f023 0320 	bic.w	r3, r3, #32
 8002966:	6023      	str	r3, [r4, #0]
 8002968:	2310      	movs	r3, #16
 800296a:	e7a7      	b.n	80028bc <_printf_i+0xf8>
 800296c:	4824      	ldr	r0, [pc, #144]	; (8002a00 <_printf_i+0x23c>)
 800296e:	e7e4      	b.n	800293a <_printf_i+0x176>
 8002970:	4615      	mov	r5, r2
 8002972:	e7bd      	b.n	80028f0 <_printf_i+0x12c>
 8002974:	682b      	ldr	r3, [r5, #0]
 8002976:	6826      	ldr	r6, [r4, #0]
 8002978:	6961      	ldr	r1, [r4, #20]
 800297a:	1d18      	adds	r0, r3, #4
 800297c:	6028      	str	r0, [r5, #0]
 800297e:	0635      	lsls	r5, r6, #24
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	d501      	bpl.n	8002988 <_printf_i+0x1c4>
 8002984:	6019      	str	r1, [r3, #0]
 8002986:	e002      	b.n	800298e <_printf_i+0x1ca>
 8002988:	0670      	lsls	r0, r6, #25
 800298a:	d5fb      	bpl.n	8002984 <_printf_i+0x1c0>
 800298c:	8019      	strh	r1, [r3, #0]
 800298e:	2300      	movs	r3, #0
 8002990:	6123      	str	r3, [r4, #16]
 8002992:	4615      	mov	r5, r2
 8002994:	e7bc      	b.n	8002910 <_printf_i+0x14c>
 8002996:	682b      	ldr	r3, [r5, #0]
 8002998:	1d1a      	adds	r2, r3, #4
 800299a:	602a      	str	r2, [r5, #0]
 800299c:	681d      	ldr	r5, [r3, #0]
 800299e:	6862      	ldr	r2, [r4, #4]
 80029a0:	2100      	movs	r1, #0
 80029a2:	4628      	mov	r0, r5
 80029a4:	f7fd fc1c 	bl	80001e0 <memchr>
 80029a8:	b108      	cbz	r0, 80029ae <_printf_i+0x1ea>
 80029aa:	1b40      	subs	r0, r0, r5
 80029ac:	6060      	str	r0, [r4, #4]
 80029ae:	6863      	ldr	r3, [r4, #4]
 80029b0:	6123      	str	r3, [r4, #16]
 80029b2:	2300      	movs	r3, #0
 80029b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029b8:	e7aa      	b.n	8002910 <_printf_i+0x14c>
 80029ba:	6923      	ldr	r3, [r4, #16]
 80029bc:	462a      	mov	r2, r5
 80029be:	4649      	mov	r1, r9
 80029c0:	4640      	mov	r0, r8
 80029c2:	47d0      	blx	sl
 80029c4:	3001      	adds	r0, #1
 80029c6:	d0ad      	beq.n	8002924 <_printf_i+0x160>
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	079b      	lsls	r3, r3, #30
 80029cc:	d413      	bmi.n	80029f6 <_printf_i+0x232>
 80029ce:	68e0      	ldr	r0, [r4, #12]
 80029d0:	9b03      	ldr	r3, [sp, #12]
 80029d2:	4298      	cmp	r0, r3
 80029d4:	bfb8      	it	lt
 80029d6:	4618      	movlt	r0, r3
 80029d8:	e7a6      	b.n	8002928 <_printf_i+0x164>
 80029da:	2301      	movs	r3, #1
 80029dc:	4632      	mov	r2, r6
 80029de:	4649      	mov	r1, r9
 80029e0:	4640      	mov	r0, r8
 80029e2:	47d0      	blx	sl
 80029e4:	3001      	adds	r0, #1
 80029e6:	d09d      	beq.n	8002924 <_printf_i+0x160>
 80029e8:	3501      	adds	r5, #1
 80029ea:	68e3      	ldr	r3, [r4, #12]
 80029ec:	9903      	ldr	r1, [sp, #12]
 80029ee:	1a5b      	subs	r3, r3, r1
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dcf2      	bgt.n	80029da <_printf_i+0x216>
 80029f4:	e7eb      	b.n	80029ce <_printf_i+0x20a>
 80029f6:	2500      	movs	r5, #0
 80029f8:	f104 0619 	add.w	r6, r4, #25
 80029fc:	e7f5      	b.n	80029ea <_printf_i+0x226>
 80029fe:	bf00      	nop
 8002a00:	08006f02 	.word	0x08006f02
 8002a04:	08006f13 	.word	0x08006f13

08002a08 <_scanf_float>:
 8002a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	4617      	mov	r7, r2
 8002a10:	9303      	str	r3, [sp, #12]
 8002a12:	688b      	ldr	r3, [r1, #8]
 8002a14:	1e5a      	subs	r2, r3, #1
 8002a16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002a1a:	bf83      	ittte	hi
 8002a1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002a20:	195b      	addhi	r3, r3, r5
 8002a22:	9302      	strhi	r3, [sp, #8]
 8002a24:	2300      	movls	r3, #0
 8002a26:	bf86      	itte	hi
 8002a28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002a2c:	608b      	strhi	r3, [r1, #8]
 8002a2e:	9302      	strls	r3, [sp, #8]
 8002a30:	680b      	ldr	r3, [r1, #0]
 8002a32:	468b      	mov	fp, r1
 8002a34:	2500      	movs	r5, #0
 8002a36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002a3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8002a3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002a42:	4680      	mov	r8, r0
 8002a44:	460c      	mov	r4, r1
 8002a46:	465e      	mov	r6, fp
 8002a48:	46aa      	mov	sl, r5
 8002a4a:	46a9      	mov	r9, r5
 8002a4c:	9501      	str	r5, [sp, #4]
 8002a4e:	68a2      	ldr	r2, [r4, #8]
 8002a50:	b152      	cbz	r2, 8002a68 <_scanf_float+0x60>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b4e      	cmp	r3, #78	; 0x4e
 8002a58:	d864      	bhi.n	8002b24 <_scanf_float+0x11c>
 8002a5a:	2b40      	cmp	r3, #64	; 0x40
 8002a5c:	d83c      	bhi.n	8002ad8 <_scanf_float+0xd0>
 8002a5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8002a62:	b2c8      	uxtb	r0, r1
 8002a64:	280e      	cmp	r0, #14
 8002a66:	d93a      	bls.n	8002ade <_scanf_float+0xd6>
 8002a68:	f1b9 0f00 	cmp.w	r9, #0
 8002a6c:	d003      	beq.n	8002a76 <_scanf_float+0x6e>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a74:	6023      	str	r3, [r4, #0]
 8002a76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002a7a:	f1ba 0f01 	cmp.w	sl, #1
 8002a7e:	f200 8113 	bhi.w	8002ca8 <_scanf_float+0x2a0>
 8002a82:	455e      	cmp	r6, fp
 8002a84:	f200 8105 	bhi.w	8002c92 <_scanf_float+0x28a>
 8002a88:	2501      	movs	r5, #1
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	b007      	add	sp, #28
 8002a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002a96:	2a0d      	cmp	r2, #13
 8002a98:	d8e6      	bhi.n	8002a68 <_scanf_float+0x60>
 8002a9a:	a101      	add	r1, pc, #4	; (adr r1, 8002aa0 <_scanf_float+0x98>)
 8002a9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002aa0:	08002bdf 	.word	0x08002bdf
 8002aa4:	08002a69 	.word	0x08002a69
 8002aa8:	08002a69 	.word	0x08002a69
 8002aac:	08002a69 	.word	0x08002a69
 8002ab0:	08002c3f 	.word	0x08002c3f
 8002ab4:	08002c17 	.word	0x08002c17
 8002ab8:	08002a69 	.word	0x08002a69
 8002abc:	08002a69 	.word	0x08002a69
 8002ac0:	08002bed 	.word	0x08002bed
 8002ac4:	08002a69 	.word	0x08002a69
 8002ac8:	08002a69 	.word	0x08002a69
 8002acc:	08002a69 	.word	0x08002a69
 8002ad0:	08002a69 	.word	0x08002a69
 8002ad4:	08002ba5 	.word	0x08002ba5
 8002ad8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002adc:	e7db      	b.n	8002a96 <_scanf_float+0x8e>
 8002ade:	290e      	cmp	r1, #14
 8002ae0:	d8c2      	bhi.n	8002a68 <_scanf_float+0x60>
 8002ae2:	a001      	add	r0, pc, #4	; (adr r0, 8002ae8 <_scanf_float+0xe0>)
 8002ae4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002ae8:	08002b97 	.word	0x08002b97
 8002aec:	08002a69 	.word	0x08002a69
 8002af0:	08002b97 	.word	0x08002b97
 8002af4:	08002c2b 	.word	0x08002c2b
 8002af8:	08002a69 	.word	0x08002a69
 8002afc:	08002b45 	.word	0x08002b45
 8002b00:	08002b81 	.word	0x08002b81
 8002b04:	08002b81 	.word	0x08002b81
 8002b08:	08002b81 	.word	0x08002b81
 8002b0c:	08002b81 	.word	0x08002b81
 8002b10:	08002b81 	.word	0x08002b81
 8002b14:	08002b81 	.word	0x08002b81
 8002b18:	08002b81 	.word	0x08002b81
 8002b1c:	08002b81 	.word	0x08002b81
 8002b20:	08002b81 	.word	0x08002b81
 8002b24:	2b6e      	cmp	r3, #110	; 0x6e
 8002b26:	d809      	bhi.n	8002b3c <_scanf_float+0x134>
 8002b28:	2b60      	cmp	r3, #96	; 0x60
 8002b2a:	d8b2      	bhi.n	8002a92 <_scanf_float+0x8a>
 8002b2c:	2b54      	cmp	r3, #84	; 0x54
 8002b2e:	d077      	beq.n	8002c20 <_scanf_float+0x218>
 8002b30:	2b59      	cmp	r3, #89	; 0x59
 8002b32:	d199      	bne.n	8002a68 <_scanf_float+0x60>
 8002b34:	2d07      	cmp	r5, #7
 8002b36:	d197      	bne.n	8002a68 <_scanf_float+0x60>
 8002b38:	2508      	movs	r5, #8
 8002b3a:	e029      	b.n	8002b90 <_scanf_float+0x188>
 8002b3c:	2b74      	cmp	r3, #116	; 0x74
 8002b3e:	d06f      	beq.n	8002c20 <_scanf_float+0x218>
 8002b40:	2b79      	cmp	r3, #121	; 0x79
 8002b42:	e7f6      	b.n	8002b32 <_scanf_float+0x12a>
 8002b44:	6821      	ldr	r1, [r4, #0]
 8002b46:	05c8      	lsls	r0, r1, #23
 8002b48:	d51a      	bpl.n	8002b80 <_scanf_float+0x178>
 8002b4a:	9b02      	ldr	r3, [sp, #8]
 8002b4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002b50:	6021      	str	r1, [r4, #0]
 8002b52:	f109 0901 	add.w	r9, r9, #1
 8002b56:	b11b      	cbz	r3, 8002b60 <_scanf_float+0x158>
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	3201      	adds	r2, #1
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	60a2      	str	r2, [r4, #8]
 8002b60:	68a3      	ldr	r3, [r4, #8]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	60a3      	str	r3, [r4, #8]
 8002b66:	6923      	ldr	r3, [r4, #16]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	6123      	str	r3, [r4, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	f340 8084 	ble.w	8002c80 <_scanf_float+0x278>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	e766      	b.n	8002a4e <_scanf_float+0x46>
 8002b80:	eb1a 0f05 	cmn.w	sl, r5
 8002b84:	f47f af70 	bne.w	8002a68 <_scanf_float+0x60>
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8002b8e:	6022      	str	r2, [r4, #0]
 8002b90:	f806 3b01 	strb.w	r3, [r6], #1
 8002b94:	e7e4      	b.n	8002b60 <_scanf_float+0x158>
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	0610      	lsls	r0, r2, #24
 8002b9a:	f57f af65 	bpl.w	8002a68 <_scanf_float+0x60>
 8002b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba2:	e7f4      	b.n	8002b8e <_scanf_float+0x186>
 8002ba4:	f1ba 0f00 	cmp.w	sl, #0
 8002ba8:	d10e      	bne.n	8002bc8 <_scanf_float+0x1c0>
 8002baa:	f1b9 0f00 	cmp.w	r9, #0
 8002bae:	d10e      	bne.n	8002bce <_scanf_float+0x1c6>
 8002bb0:	6822      	ldr	r2, [r4, #0]
 8002bb2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002bb6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002bba:	d108      	bne.n	8002bce <_scanf_float+0x1c6>
 8002bbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002bc0:	6022      	str	r2, [r4, #0]
 8002bc2:	f04f 0a01 	mov.w	sl, #1
 8002bc6:	e7e3      	b.n	8002b90 <_scanf_float+0x188>
 8002bc8:	f1ba 0f02 	cmp.w	sl, #2
 8002bcc:	d055      	beq.n	8002c7a <_scanf_float+0x272>
 8002bce:	2d01      	cmp	r5, #1
 8002bd0:	d002      	beq.n	8002bd8 <_scanf_float+0x1d0>
 8002bd2:	2d04      	cmp	r5, #4
 8002bd4:	f47f af48 	bne.w	8002a68 <_scanf_float+0x60>
 8002bd8:	3501      	adds	r5, #1
 8002bda:	b2ed      	uxtb	r5, r5
 8002bdc:	e7d8      	b.n	8002b90 <_scanf_float+0x188>
 8002bde:	f1ba 0f01 	cmp.w	sl, #1
 8002be2:	f47f af41 	bne.w	8002a68 <_scanf_float+0x60>
 8002be6:	f04f 0a02 	mov.w	sl, #2
 8002bea:	e7d1      	b.n	8002b90 <_scanf_float+0x188>
 8002bec:	b97d      	cbnz	r5, 8002c0e <_scanf_float+0x206>
 8002bee:	f1b9 0f00 	cmp.w	r9, #0
 8002bf2:	f47f af3c 	bne.w	8002a6e <_scanf_float+0x66>
 8002bf6:	6822      	ldr	r2, [r4, #0]
 8002bf8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002bfc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002c00:	f47f af39 	bne.w	8002a76 <_scanf_float+0x6e>
 8002c04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002c08:	6022      	str	r2, [r4, #0]
 8002c0a:	2501      	movs	r5, #1
 8002c0c:	e7c0      	b.n	8002b90 <_scanf_float+0x188>
 8002c0e:	2d03      	cmp	r5, #3
 8002c10:	d0e2      	beq.n	8002bd8 <_scanf_float+0x1d0>
 8002c12:	2d05      	cmp	r5, #5
 8002c14:	e7de      	b.n	8002bd4 <_scanf_float+0x1cc>
 8002c16:	2d02      	cmp	r5, #2
 8002c18:	f47f af26 	bne.w	8002a68 <_scanf_float+0x60>
 8002c1c:	2503      	movs	r5, #3
 8002c1e:	e7b7      	b.n	8002b90 <_scanf_float+0x188>
 8002c20:	2d06      	cmp	r5, #6
 8002c22:	f47f af21 	bne.w	8002a68 <_scanf_float+0x60>
 8002c26:	2507      	movs	r5, #7
 8002c28:	e7b2      	b.n	8002b90 <_scanf_float+0x188>
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	0591      	lsls	r1, r2, #22
 8002c2e:	f57f af1b 	bpl.w	8002a68 <_scanf_float+0x60>
 8002c32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8002c36:	6022      	str	r2, [r4, #0]
 8002c38:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c3c:	e7a8      	b.n	8002b90 <_scanf_float+0x188>
 8002c3e:	6822      	ldr	r2, [r4, #0]
 8002c40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8002c44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002c48:	d006      	beq.n	8002c58 <_scanf_float+0x250>
 8002c4a:	0550      	lsls	r0, r2, #21
 8002c4c:	f57f af0c 	bpl.w	8002a68 <_scanf_float+0x60>
 8002c50:	f1b9 0f00 	cmp.w	r9, #0
 8002c54:	f43f af0f 	beq.w	8002a76 <_scanf_float+0x6e>
 8002c58:	0591      	lsls	r1, r2, #22
 8002c5a:	bf58      	it	pl
 8002c5c:	9901      	ldrpl	r1, [sp, #4]
 8002c5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002c62:	bf58      	it	pl
 8002c64:	eba9 0101 	subpl.w	r1, r9, r1
 8002c68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8002c6c:	bf58      	it	pl
 8002c6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002c72:	6022      	str	r2, [r4, #0]
 8002c74:	f04f 0900 	mov.w	r9, #0
 8002c78:	e78a      	b.n	8002b90 <_scanf_float+0x188>
 8002c7a:	f04f 0a03 	mov.w	sl, #3
 8002c7e:	e787      	b.n	8002b90 <_scanf_float+0x188>
 8002c80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002c84:	4639      	mov	r1, r7
 8002c86:	4640      	mov	r0, r8
 8002c88:	4798      	blx	r3
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	f43f aedf 	beq.w	8002a4e <_scanf_float+0x46>
 8002c90:	e6ea      	b.n	8002a68 <_scanf_float+0x60>
 8002c92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002c96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002c9a:	463a      	mov	r2, r7
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	4798      	blx	r3
 8002ca0:	6923      	ldr	r3, [r4, #16]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	6123      	str	r3, [r4, #16]
 8002ca6:	e6ec      	b.n	8002a82 <_scanf_float+0x7a>
 8002ca8:	1e6b      	subs	r3, r5, #1
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d825      	bhi.n	8002cfa <_scanf_float+0x2f2>
 8002cae:	2d02      	cmp	r5, #2
 8002cb0:	d836      	bhi.n	8002d20 <_scanf_float+0x318>
 8002cb2:	455e      	cmp	r6, fp
 8002cb4:	f67f aee8 	bls.w	8002a88 <_scanf_float+0x80>
 8002cb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002cbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002cc0:	463a      	mov	r2, r7
 8002cc2:	4640      	mov	r0, r8
 8002cc4:	4798      	blx	r3
 8002cc6:	6923      	ldr	r3, [r4, #16]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	6123      	str	r3, [r4, #16]
 8002ccc:	e7f1      	b.n	8002cb2 <_scanf_float+0x2aa>
 8002cce:	9802      	ldr	r0, [sp, #8]
 8002cd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002cd4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8002cd8:	9002      	str	r0, [sp, #8]
 8002cda:	463a      	mov	r2, r7
 8002cdc:	4640      	mov	r0, r8
 8002cde:	4798      	blx	r3
 8002ce0:	6923      	ldr	r3, [r4, #16]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	6123      	str	r3, [r4, #16]
 8002ce6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002cea:	fa5f fa8a 	uxtb.w	sl, sl
 8002cee:	f1ba 0f02 	cmp.w	sl, #2
 8002cf2:	d1ec      	bne.n	8002cce <_scanf_float+0x2c6>
 8002cf4:	3d03      	subs	r5, #3
 8002cf6:	b2ed      	uxtb	r5, r5
 8002cf8:	1b76      	subs	r6, r6, r5
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	05da      	lsls	r2, r3, #23
 8002cfe:	d52f      	bpl.n	8002d60 <_scanf_float+0x358>
 8002d00:	055b      	lsls	r3, r3, #21
 8002d02:	d510      	bpl.n	8002d26 <_scanf_float+0x31e>
 8002d04:	455e      	cmp	r6, fp
 8002d06:	f67f aebf 	bls.w	8002a88 <_scanf_float+0x80>
 8002d0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002d12:	463a      	mov	r2, r7
 8002d14:	4640      	mov	r0, r8
 8002d16:	4798      	blx	r3
 8002d18:	6923      	ldr	r3, [r4, #16]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	6123      	str	r3, [r4, #16]
 8002d1e:	e7f1      	b.n	8002d04 <_scanf_float+0x2fc>
 8002d20:	46aa      	mov	sl, r5
 8002d22:	9602      	str	r6, [sp, #8]
 8002d24:	e7df      	b.n	8002ce6 <_scanf_float+0x2de>
 8002d26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002d2a:	6923      	ldr	r3, [r4, #16]
 8002d2c:	2965      	cmp	r1, #101	; 0x65
 8002d2e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002d32:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8002d36:	6123      	str	r3, [r4, #16]
 8002d38:	d00c      	beq.n	8002d54 <_scanf_float+0x34c>
 8002d3a:	2945      	cmp	r1, #69	; 0x45
 8002d3c:	d00a      	beq.n	8002d54 <_scanf_float+0x34c>
 8002d3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d42:	463a      	mov	r2, r7
 8002d44:	4640      	mov	r0, r8
 8002d46:	4798      	blx	r3
 8002d48:	6923      	ldr	r3, [r4, #16]
 8002d4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	1eb5      	subs	r5, r6, #2
 8002d52:	6123      	str	r3, [r4, #16]
 8002d54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d58:	463a      	mov	r2, r7
 8002d5a:	4640      	mov	r0, r8
 8002d5c:	4798      	blx	r3
 8002d5e:	462e      	mov	r6, r5
 8002d60:	6825      	ldr	r5, [r4, #0]
 8002d62:	f015 0510 	ands.w	r5, r5, #16
 8002d66:	d158      	bne.n	8002e1a <_scanf_float+0x412>
 8002d68:	7035      	strb	r5, [r6, #0]
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d74:	d11c      	bne.n	8002db0 <_scanf_float+0x3a8>
 8002d76:	9b01      	ldr	r3, [sp, #4]
 8002d78:	454b      	cmp	r3, r9
 8002d7a:	eba3 0209 	sub.w	r2, r3, r9
 8002d7e:	d124      	bne.n	8002dca <_scanf_float+0x3c2>
 8002d80:	2200      	movs	r2, #0
 8002d82:	4659      	mov	r1, fp
 8002d84:	4640      	mov	r0, r8
 8002d86:	f002 fc2f 	bl	80055e8 <_strtod_r>
 8002d8a:	9b03      	ldr	r3, [sp, #12]
 8002d8c:	6821      	ldr	r1, [r4, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f011 0f02 	tst.w	r1, #2
 8002d94:	ec57 6b10 	vmov	r6, r7, d0
 8002d98:	f103 0204 	add.w	r2, r3, #4
 8002d9c:	d020      	beq.n	8002de0 <_scanf_float+0x3d8>
 8002d9e:	9903      	ldr	r1, [sp, #12]
 8002da0:	600a      	str	r2, [r1, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	e9c3 6700 	strd	r6, r7, [r3]
 8002da8:	68e3      	ldr	r3, [r4, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60e3      	str	r3, [r4, #12]
 8002dae:	e66c      	b.n	8002a8a <_scanf_float+0x82>
 8002db0:	9b04      	ldr	r3, [sp, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0e4      	beq.n	8002d80 <_scanf_float+0x378>
 8002db6:	9905      	ldr	r1, [sp, #20]
 8002db8:	230a      	movs	r3, #10
 8002dba:	462a      	mov	r2, r5
 8002dbc:	3101      	adds	r1, #1
 8002dbe:	4640      	mov	r0, r8
 8002dc0:	f002 fc9a 	bl	80056f8 <_strtol_r>
 8002dc4:	9b04      	ldr	r3, [sp, #16]
 8002dc6:	9e05      	ldr	r6, [sp, #20]
 8002dc8:	1ac2      	subs	r2, r0, r3
 8002dca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8002dce:	429e      	cmp	r6, r3
 8002dd0:	bf28      	it	cs
 8002dd2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8002dd6:	4912      	ldr	r1, [pc, #72]	; (8002e20 <_scanf_float+0x418>)
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f000 f8e7 	bl	8002fac <siprintf>
 8002dde:	e7cf      	b.n	8002d80 <_scanf_float+0x378>
 8002de0:	f011 0f04 	tst.w	r1, #4
 8002de4:	9903      	ldr	r1, [sp, #12]
 8002de6:	600a      	str	r2, [r1, #0]
 8002de8:	d1db      	bne.n	8002da2 <_scanf_float+0x39a>
 8002dea:	f8d3 8000 	ldr.w	r8, [r3]
 8002dee:	ee10 2a10 	vmov	r2, s0
 8002df2:	ee10 0a10 	vmov	r0, s0
 8002df6:	463b      	mov	r3, r7
 8002df8:	4639      	mov	r1, r7
 8002dfa:	f7fd fe9f 	bl	8000b3c <__aeabi_dcmpun>
 8002dfe:	b128      	cbz	r0, 8002e0c <_scanf_float+0x404>
 8002e00:	4808      	ldr	r0, [pc, #32]	; (8002e24 <_scanf_float+0x41c>)
 8002e02:	f000 f9b7 	bl	8003174 <nanf>
 8002e06:	ed88 0a00 	vstr	s0, [r8]
 8002e0a:	e7cd      	b.n	8002da8 <_scanf_float+0x3a0>
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	4639      	mov	r1, r7
 8002e10:	f7fd fef2 	bl	8000bf8 <__aeabi_d2f>
 8002e14:	f8c8 0000 	str.w	r0, [r8]
 8002e18:	e7c6      	b.n	8002da8 <_scanf_float+0x3a0>
 8002e1a:	2500      	movs	r5, #0
 8002e1c:	e635      	b.n	8002a8a <_scanf_float+0x82>
 8002e1e:	bf00      	nop
 8002e20:	08006f24 	.word	0x08006f24
 8002e24:	080072b5 	.word	0x080072b5

08002e28 <std>:
 8002e28:	2300      	movs	r3, #0
 8002e2a:	b510      	push	{r4, lr}
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e36:	6083      	str	r3, [r0, #8]
 8002e38:	8181      	strh	r1, [r0, #12]
 8002e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8002e3c:	81c2      	strh	r2, [r0, #14]
 8002e3e:	6183      	str	r3, [r0, #24]
 8002e40:	4619      	mov	r1, r3
 8002e42:	2208      	movs	r2, #8
 8002e44:	305c      	adds	r0, #92	; 0x5c
 8002e46:	f000 f914 	bl	8003072 <memset>
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <std+0x58>)
 8002e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <std+0x5c>)
 8002e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <std+0x60>)
 8002e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <std+0x64>)
 8002e58:	6323      	str	r3, [r4, #48]	; 0x30
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <std+0x68>)
 8002e5c:	6224      	str	r4, [r4, #32]
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	d006      	beq.n	8002e70 <std+0x48>
 8002e62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002e66:	4294      	cmp	r4, r2
 8002e68:	d002      	beq.n	8002e70 <std+0x48>
 8002e6a:	33d0      	adds	r3, #208	; 0xd0
 8002e6c:	429c      	cmp	r4, r3
 8002e6e:	d105      	bne.n	8002e7c <std+0x54>
 8002e70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e78:	f000 b978 	b.w	800316c <__retarget_lock_init_recursive>
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	bf00      	nop
 8002e80:	08002fed 	.word	0x08002fed
 8002e84:	0800300f 	.word	0x0800300f
 8002e88:	08003047 	.word	0x08003047
 8002e8c:	0800306b 	.word	0x0800306b
 8002e90:	200004a0 	.word	0x200004a0

08002e94 <stdio_exit_handler>:
 8002e94:	4a02      	ldr	r2, [pc, #8]	; (8002ea0 <stdio_exit_handler+0xc>)
 8002e96:	4903      	ldr	r1, [pc, #12]	; (8002ea4 <stdio_exit_handler+0x10>)
 8002e98:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <stdio_exit_handler+0x14>)
 8002e9a:	f000 b869 	b.w	8002f70 <_fwalk_sglue>
 8002e9e:	bf00      	nop
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	08005ab9 	.word	0x08005ab9
 8002ea8:	2000000c 	.word	0x2000000c

08002eac <cleanup_stdio>:
 8002eac:	6841      	ldr	r1, [r0, #4]
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <cleanup_stdio+0x34>)
 8002eb0:	4299      	cmp	r1, r3
 8002eb2:	b510      	push	{r4, lr}
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	d001      	beq.n	8002ebc <cleanup_stdio+0x10>
 8002eb8:	f002 fdfe 	bl	8005ab8 <_fflush_r>
 8002ebc:	68a1      	ldr	r1, [r4, #8]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <cleanup_stdio+0x38>)
 8002ec0:	4299      	cmp	r1, r3
 8002ec2:	d002      	beq.n	8002eca <cleanup_stdio+0x1e>
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f002 fdf7 	bl	8005ab8 <_fflush_r>
 8002eca:	68e1      	ldr	r1, [r4, #12]
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <cleanup_stdio+0x3c>)
 8002ece:	4299      	cmp	r1, r3
 8002ed0:	d004      	beq.n	8002edc <cleanup_stdio+0x30>
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed8:	f002 bdee 	b.w	8005ab8 <_fflush_r>
 8002edc:	bd10      	pop	{r4, pc}
 8002ede:	bf00      	nop
 8002ee0:	200004a0 	.word	0x200004a0
 8002ee4:	20000508 	.word	0x20000508
 8002ee8:	20000570 	.word	0x20000570

08002eec <global_stdio_init.part.0>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <global_stdio_init.part.0+0x30>)
 8002ef0:	4c0b      	ldr	r4, [pc, #44]	; (8002f20 <global_stdio_init.part.0+0x34>)
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <global_stdio_init.part.0+0x38>)
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2104      	movs	r1, #4
 8002efc:	f7ff ff94 	bl	8002e28 <std>
 8002f00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002f04:	2201      	movs	r2, #1
 8002f06:	2109      	movs	r1, #9
 8002f08:	f7ff ff8e 	bl	8002e28 <std>
 8002f0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002f10:	2202      	movs	r2, #2
 8002f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f16:	2112      	movs	r1, #18
 8002f18:	f7ff bf86 	b.w	8002e28 <std>
 8002f1c:	200005d8 	.word	0x200005d8
 8002f20:	200004a0 	.word	0x200004a0
 8002f24:	08002e95 	.word	0x08002e95

08002f28 <__sfp_lock_acquire>:
 8002f28:	4801      	ldr	r0, [pc, #4]	; (8002f30 <__sfp_lock_acquire+0x8>)
 8002f2a:	f000 b920 	b.w	800316e <__retarget_lock_acquire_recursive>
 8002f2e:	bf00      	nop
 8002f30:	200005e1 	.word	0x200005e1

08002f34 <__sfp_lock_release>:
 8002f34:	4801      	ldr	r0, [pc, #4]	; (8002f3c <__sfp_lock_release+0x8>)
 8002f36:	f000 b91b 	b.w	8003170 <__retarget_lock_release_recursive>
 8002f3a:	bf00      	nop
 8002f3c:	200005e1 	.word	0x200005e1

08002f40 <__sinit>:
 8002f40:	b510      	push	{r4, lr}
 8002f42:	4604      	mov	r4, r0
 8002f44:	f7ff fff0 	bl	8002f28 <__sfp_lock_acquire>
 8002f48:	6a23      	ldr	r3, [r4, #32]
 8002f4a:	b11b      	cbz	r3, 8002f54 <__sinit+0x14>
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f50:	f7ff bff0 	b.w	8002f34 <__sfp_lock_release>
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <__sinit+0x28>)
 8002f56:	6223      	str	r3, [r4, #32]
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <__sinit+0x2c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f5      	bne.n	8002f4c <__sinit+0xc>
 8002f60:	f7ff ffc4 	bl	8002eec <global_stdio_init.part.0>
 8002f64:	e7f2      	b.n	8002f4c <__sinit+0xc>
 8002f66:	bf00      	nop
 8002f68:	08002ead 	.word	0x08002ead
 8002f6c:	200005d8 	.word	0x200005d8

08002f70 <_fwalk_sglue>:
 8002f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f74:	4607      	mov	r7, r0
 8002f76:	4688      	mov	r8, r1
 8002f78:	4614      	mov	r4, r2
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f80:	f1b9 0901 	subs.w	r9, r9, #1
 8002f84:	d505      	bpl.n	8002f92 <_fwalk_sglue+0x22>
 8002f86:	6824      	ldr	r4, [r4, #0]
 8002f88:	2c00      	cmp	r4, #0
 8002f8a:	d1f7      	bne.n	8002f7c <_fwalk_sglue+0xc>
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f92:	89ab      	ldrh	r3, [r5, #12]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d907      	bls.n	8002fa8 <_fwalk_sglue+0x38>
 8002f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	d003      	beq.n	8002fa8 <_fwalk_sglue+0x38>
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	47c0      	blx	r8
 8002fa6:	4306      	orrs	r6, r0
 8002fa8:	3568      	adds	r5, #104	; 0x68
 8002faa:	e7e9      	b.n	8002f80 <_fwalk_sglue+0x10>

08002fac <siprintf>:
 8002fac:	b40e      	push	{r1, r2, r3}
 8002fae:	b500      	push	{lr}
 8002fb0:	b09c      	sub	sp, #112	; 0x70
 8002fb2:	ab1d      	add	r3, sp, #116	; 0x74
 8002fb4:	9002      	str	r0, [sp, #8]
 8002fb6:	9006      	str	r0, [sp, #24]
 8002fb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fbc:	4809      	ldr	r0, [pc, #36]	; (8002fe4 <siprintf+0x38>)
 8002fbe:	9107      	str	r1, [sp, #28]
 8002fc0:	9104      	str	r1, [sp, #16]
 8002fc2:	4909      	ldr	r1, [pc, #36]	; (8002fe8 <siprintf+0x3c>)
 8002fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fc8:	9105      	str	r1, [sp, #20]
 8002fca:	6800      	ldr	r0, [r0, #0]
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	a902      	add	r1, sp, #8
 8002fd0:	f002 fbee 	bl	80057b0 <_svfiprintf_r>
 8002fd4:	9b02      	ldr	r3, [sp, #8]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	b01c      	add	sp, #112	; 0x70
 8002fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fe0:	b003      	add	sp, #12
 8002fe2:	4770      	bx	lr
 8002fe4:	20000058 	.word	0x20000058
 8002fe8:	ffff0208 	.word	0xffff0208

08002fec <__sread>:
 8002fec:	b510      	push	{r4, lr}
 8002fee:	460c      	mov	r4, r1
 8002ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ff4:	f000 f86c 	bl	80030d0 <_read_r>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	bfab      	itete	ge
 8002ffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8003000:	181b      	addge	r3, r3, r0
 8003002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003006:	bfac      	ite	ge
 8003008:	6563      	strge	r3, [r4, #84]	; 0x54
 800300a:	81a3      	strhlt	r3, [r4, #12]
 800300c:	bd10      	pop	{r4, pc}

0800300e <__swrite>:
 800300e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003012:	461f      	mov	r7, r3
 8003014:	898b      	ldrh	r3, [r1, #12]
 8003016:	05db      	lsls	r3, r3, #23
 8003018:	4605      	mov	r5, r0
 800301a:	460c      	mov	r4, r1
 800301c:	4616      	mov	r6, r2
 800301e:	d505      	bpl.n	800302c <__swrite+0x1e>
 8003020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003024:	2302      	movs	r3, #2
 8003026:	2200      	movs	r2, #0
 8003028:	f000 f840 	bl	80030ac <_lseek_r>
 800302c:	89a3      	ldrh	r3, [r4, #12]
 800302e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003036:	81a3      	strh	r3, [r4, #12]
 8003038:	4632      	mov	r2, r6
 800303a:	463b      	mov	r3, r7
 800303c:	4628      	mov	r0, r5
 800303e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003042:	f000 b857 	b.w	80030f4 <_write_r>

08003046 <__sseek>:
 8003046:	b510      	push	{r4, lr}
 8003048:	460c      	mov	r4, r1
 800304a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800304e:	f000 f82d 	bl	80030ac <_lseek_r>
 8003052:	1c43      	adds	r3, r0, #1
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	bf15      	itete	ne
 8003058:	6560      	strne	r0, [r4, #84]	; 0x54
 800305a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800305e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003062:	81a3      	strheq	r3, [r4, #12]
 8003064:	bf18      	it	ne
 8003066:	81a3      	strhne	r3, [r4, #12]
 8003068:	bd10      	pop	{r4, pc}

0800306a <__sclose>:
 800306a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800306e:	f000 b80d 	b.w	800308c <_close_r>

08003072 <memset>:
 8003072:	4402      	add	r2, r0
 8003074:	4603      	mov	r3, r0
 8003076:	4293      	cmp	r3, r2
 8003078:	d100      	bne.n	800307c <memset+0xa>
 800307a:	4770      	bx	lr
 800307c:	f803 1b01 	strb.w	r1, [r3], #1
 8003080:	e7f9      	b.n	8003076 <memset+0x4>
	...

08003084 <_localeconv_r>:
 8003084:	4800      	ldr	r0, [pc, #0]	; (8003088 <_localeconv_r+0x4>)
 8003086:	4770      	bx	lr
 8003088:	2000014c 	.word	0x2000014c

0800308c <_close_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4d06      	ldr	r5, [pc, #24]	; (80030a8 <_close_r+0x1c>)
 8003090:	2300      	movs	r3, #0
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	f7fe fae5 	bl	8001666 <_close>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_close_r+0x1a>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_close_r+0x1a>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	200005dc 	.word	0x200005dc

080030ac <_lseek_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4d07      	ldr	r5, [pc, #28]	; (80030cc <_lseek_r+0x20>)
 80030b0:	4604      	mov	r4, r0
 80030b2:	4608      	mov	r0, r1
 80030b4:	4611      	mov	r1, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	602a      	str	r2, [r5, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7fe fafa 	bl	80016b4 <_lseek>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d102      	bne.n	80030ca <_lseek_r+0x1e>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	b103      	cbz	r3, 80030ca <_lseek_r+0x1e>
 80030c8:	6023      	str	r3, [r4, #0]
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	200005dc 	.word	0x200005dc

080030d0 <_read_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d07      	ldr	r5, [pc, #28]	; (80030f0 <_read_r+0x20>)
 80030d4:	4604      	mov	r4, r0
 80030d6:	4608      	mov	r0, r1
 80030d8:	4611      	mov	r1, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	602a      	str	r2, [r5, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7fe fa88 	bl	80015f4 <_read>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_read_r+0x1e>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_read_r+0x1e>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	200005dc 	.word	0x200005dc

080030f4 <_write_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	4d07      	ldr	r5, [pc, #28]	; (8003114 <_write_r+0x20>)
 80030f8:	4604      	mov	r4, r0
 80030fa:	4608      	mov	r0, r1
 80030fc:	4611      	mov	r1, r2
 80030fe:	2200      	movs	r2, #0
 8003100:	602a      	str	r2, [r5, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	f7fe fa93 	bl	800162e <_write>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d102      	bne.n	8003112 <_write_r+0x1e>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	b103      	cbz	r3, 8003112 <_write_r+0x1e>
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	bd38      	pop	{r3, r4, r5, pc}
 8003114:	200005dc 	.word	0x200005dc

08003118 <__errno>:
 8003118:	4b01      	ldr	r3, [pc, #4]	; (8003120 <__errno+0x8>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000058 	.word	0x20000058

08003124 <__libc_init_array>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	4d0d      	ldr	r5, [pc, #52]	; (800315c <__libc_init_array+0x38>)
 8003128:	4c0d      	ldr	r4, [pc, #52]	; (8003160 <__libc_init_array+0x3c>)
 800312a:	1b64      	subs	r4, r4, r5
 800312c:	10a4      	asrs	r4, r4, #2
 800312e:	2600      	movs	r6, #0
 8003130:	42a6      	cmp	r6, r4
 8003132:	d109      	bne.n	8003148 <__libc_init_array+0x24>
 8003134:	4d0b      	ldr	r5, [pc, #44]	; (8003164 <__libc_init_array+0x40>)
 8003136:	4c0c      	ldr	r4, [pc, #48]	; (8003168 <__libc_init_array+0x44>)
 8003138:	f003 fbd6 	bl	80068e8 <_init>
 800313c:	1b64      	subs	r4, r4, r5
 800313e:	10a4      	asrs	r4, r4, #2
 8003140:	2600      	movs	r6, #0
 8003142:	42a6      	cmp	r6, r4
 8003144:	d105      	bne.n	8003152 <__libc_init_array+0x2e>
 8003146:	bd70      	pop	{r4, r5, r6, pc}
 8003148:	f855 3b04 	ldr.w	r3, [r5], #4
 800314c:	4798      	blx	r3
 800314e:	3601      	adds	r6, #1
 8003150:	e7ee      	b.n	8003130 <__libc_init_array+0xc>
 8003152:	f855 3b04 	ldr.w	r3, [r5], #4
 8003156:	4798      	blx	r3
 8003158:	3601      	adds	r6, #1
 800315a:	e7f2      	b.n	8003142 <__libc_init_array+0x1e>
 800315c:	08007318 	.word	0x08007318
 8003160:	08007318 	.word	0x08007318
 8003164:	08007318 	.word	0x08007318
 8003168:	0800731c 	.word	0x0800731c

0800316c <__retarget_lock_init_recursive>:
 800316c:	4770      	bx	lr

0800316e <__retarget_lock_acquire_recursive>:
 800316e:	4770      	bx	lr

08003170 <__retarget_lock_release_recursive>:
 8003170:	4770      	bx	lr
	...

08003174 <nanf>:
 8003174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800317c <nanf+0x8>
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	7fc00000 	.word	0x7fc00000

08003180 <quorem>:
 8003180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	6903      	ldr	r3, [r0, #16]
 8003186:	690c      	ldr	r4, [r1, #16]
 8003188:	42a3      	cmp	r3, r4
 800318a:	4607      	mov	r7, r0
 800318c:	db7e      	blt.n	800328c <quorem+0x10c>
 800318e:	3c01      	subs	r4, #1
 8003190:	f101 0814 	add.w	r8, r1, #20
 8003194:	f100 0514 	add.w	r5, r0, #20
 8003198:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80031a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031a6:	3301      	adds	r3, #1
 80031a8:	429a      	cmp	r2, r3
 80031aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80031ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80031b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80031b6:	d331      	bcc.n	800321c <quorem+0x9c>
 80031b8:	f04f 0e00 	mov.w	lr, #0
 80031bc:	4640      	mov	r0, r8
 80031be:	46ac      	mov	ip, r5
 80031c0:	46f2      	mov	sl, lr
 80031c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80031c6:	b293      	uxth	r3, r2
 80031c8:	fb06 e303 	mla	r3, r6, r3, lr
 80031cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80031d0:	0c1a      	lsrs	r2, r3, #16
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	ebaa 0303 	sub.w	r3, sl, r3
 80031d8:	f8dc a000 	ldr.w	sl, [ip]
 80031dc:	fa13 f38a 	uxtah	r3, r3, sl
 80031e0:	fb06 220e 	mla	r2, r6, lr, r2
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	9b00      	ldr	r3, [sp, #0]
 80031e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80031ec:	b292      	uxth	r2, r2
 80031ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80031f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80031f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80031fa:	4581      	cmp	r9, r0
 80031fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003200:	f84c 3b04 	str.w	r3, [ip], #4
 8003204:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003208:	d2db      	bcs.n	80031c2 <quorem+0x42>
 800320a:	f855 300b 	ldr.w	r3, [r5, fp]
 800320e:	b92b      	cbnz	r3, 800321c <quorem+0x9c>
 8003210:	9b01      	ldr	r3, [sp, #4]
 8003212:	3b04      	subs	r3, #4
 8003214:	429d      	cmp	r5, r3
 8003216:	461a      	mov	r2, r3
 8003218:	d32c      	bcc.n	8003274 <quorem+0xf4>
 800321a:	613c      	str	r4, [r7, #16]
 800321c:	4638      	mov	r0, r7
 800321e:	f001 f9ef 	bl	8004600 <__mcmp>
 8003222:	2800      	cmp	r0, #0
 8003224:	db22      	blt.n	800326c <quorem+0xec>
 8003226:	3601      	adds	r6, #1
 8003228:	4629      	mov	r1, r5
 800322a:	2000      	movs	r0, #0
 800322c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003230:	f8d1 c000 	ldr.w	ip, [r1]
 8003234:	b293      	uxth	r3, r2
 8003236:	1ac3      	subs	r3, r0, r3
 8003238:	0c12      	lsrs	r2, r2, #16
 800323a:	fa13 f38c 	uxtah	r3, r3, ip
 800323e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003242:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003246:	b29b      	uxth	r3, r3
 8003248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800324c:	45c1      	cmp	r9, r8
 800324e:	f841 3b04 	str.w	r3, [r1], #4
 8003252:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003256:	d2e9      	bcs.n	800322c <quorem+0xac>
 8003258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800325c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003260:	b922      	cbnz	r2, 800326c <quorem+0xec>
 8003262:	3b04      	subs	r3, #4
 8003264:	429d      	cmp	r5, r3
 8003266:	461a      	mov	r2, r3
 8003268:	d30a      	bcc.n	8003280 <quorem+0x100>
 800326a:	613c      	str	r4, [r7, #16]
 800326c:	4630      	mov	r0, r6
 800326e:	b003      	add	sp, #12
 8003270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	3b04      	subs	r3, #4
 8003278:	2a00      	cmp	r2, #0
 800327a:	d1ce      	bne.n	800321a <quorem+0x9a>
 800327c:	3c01      	subs	r4, #1
 800327e:	e7c9      	b.n	8003214 <quorem+0x94>
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	3b04      	subs	r3, #4
 8003284:	2a00      	cmp	r2, #0
 8003286:	d1f0      	bne.n	800326a <quorem+0xea>
 8003288:	3c01      	subs	r4, #1
 800328a:	e7eb      	b.n	8003264 <quorem+0xe4>
 800328c:	2000      	movs	r0, #0
 800328e:	e7ee      	b.n	800326e <quorem+0xee>

08003290 <_dtoa_r>:
 8003290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003294:	ed2d 8b04 	vpush	{d8-d9}
 8003298:	69c5      	ldr	r5, [r0, #28]
 800329a:	b093      	sub	sp, #76	; 0x4c
 800329c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80032a0:	ec57 6b10 	vmov	r6, r7, d0
 80032a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80032a8:	9107      	str	r1, [sp, #28]
 80032aa:	4604      	mov	r4, r0
 80032ac:	920a      	str	r2, [sp, #40]	; 0x28
 80032ae:	930d      	str	r3, [sp, #52]	; 0x34
 80032b0:	b975      	cbnz	r5, 80032d0 <_dtoa_r+0x40>
 80032b2:	2010      	movs	r0, #16
 80032b4:	f000 fe2a 	bl	8003f0c <malloc>
 80032b8:	4602      	mov	r2, r0
 80032ba:	61e0      	str	r0, [r4, #28]
 80032bc:	b920      	cbnz	r0, 80032c8 <_dtoa_r+0x38>
 80032be:	4bae      	ldr	r3, [pc, #696]	; (8003578 <_dtoa_r+0x2e8>)
 80032c0:	21ef      	movs	r1, #239	; 0xef
 80032c2:	48ae      	ldr	r0, [pc, #696]	; (800357c <_dtoa_r+0x2ec>)
 80032c4:	f002 fc74 	bl	8005bb0 <__assert_func>
 80032c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80032cc:	6005      	str	r5, [r0, #0]
 80032ce:	60c5      	str	r5, [r0, #12]
 80032d0:	69e3      	ldr	r3, [r4, #28]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	b151      	cbz	r1, 80032ec <_dtoa_r+0x5c>
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	604a      	str	r2, [r1, #4]
 80032da:	2301      	movs	r3, #1
 80032dc:	4093      	lsls	r3, r2
 80032de:	608b      	str	r3, [r1, #8]
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 ff07 	bl	80040f4 <_Bfree>
 80032e6:	69e3      	ldr	r3, [r4, #28]
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	1e3b      	subs	r3, r7, #0
 80032ee:	bfbb      	ittet	lt
 80032f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	9303      	strlt	r3, [sp, #12]
 80032f6:	2300      	movge	r3, #0
 80032f8:	2201      	movlt	r2, #1
 80032fa:	bfac      	ite	ge
 80032fc:	f8c8 3000 	strge.w	r3, [r8]
 8003300:	f8c8 2000 	strlt.w	r2, [r8]
 8003304:	4b9e      	ldr	r3, [pc, #632]	; (8003580 <_dtoa_r+0x2f0>)
 8003306:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800330a:	ea33 0308 	bics.w	r3, r3, r8
 800330e:	d11b      	bne.n	8003348 <_dtoa_r+0xb8>
 8003310:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003312:	f242 730f 	movw	r3, #9999	; 0x270f
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800331c:	4333      	orrs	r3, r6
 800331e:	f000 8593 	beq.w	8003e48 <_dtoa_r+0xbb8>
 8003322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003324:	b963      	cbnz	r3, 8003340 <_dtoa_r+0xb0>
 8003326:	4b97      	ldr	r3, [pc, #604]	; (8003584 <_dtoa_r+0x2f4>)
 8003328:	e027      	b.n	800337a <_dtoa_r+0xea>
 800332a:	4b97      	ldr	r3, [pc, #604]	; (8003588 <_dtoa_r+0x2f8>)
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	9800      	ldr	r0, [sp, #0]
 8003336:	b013      	add	sp, #76	; 0x4c
 8003338:	ecbd 8b04 	vpop	{d8-d9}
 800333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003340:	4b90      	ldr	r3, [pc, #576]	; (8003584 <_dtoa_r+0x2f4>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	3303      	adds	r3, #3
 8003346:	e7f3      	b.n	8003330 <_dtoa_r+0xa0>
 8003348:	ed9d 7b02 	vldr	d7, [sp, #8]
 800334c:	2200      	movs	r2, #0
 800334e:	ec51 0b17 	vmov	r0, r1, d7
 8003352:	eeb0 8a47 	vmov.f32	s16, s14
 8003356:	eef0 8a67 	vmov.f32	s17, s15
 800335a:	2300      	movs	r3, #0
 800335c:	f7fd fbbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8003360:	4681      	mov	r9, r0
 8003362:	b160      	cbz	r0, 800337e <_dtoa_r+0xee>
 8003364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003366:	2301      	movs	r3, #1
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8568 	beq.w	8003e42 <_dtoa_r+0xbb2>
 8003372:	4b86      	ldr	r3, [pc, #536]	; (800358c <_dtoa_r+0x2fc>)
 8003374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	3b01      	subs	r3, #1
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	e7da      	b.n	8003334 <_dtoa_r+0xa4>
 800337e:	aa10      	add	r2, sp, #64	; 0x40
 8003380:	a911      	add	r1, sp, #68	; 0x44
 8003382:	4620      	mov	r0, r4
 8003384:	eeb0 0a48 	vmov.f32	s0, s16
 8003388:	eef0 0a68 	vmov.f32	s1, s17
 800338c:	f001 fa4e 	bl	800482c <__d2b>
 8003390:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003394:	4682      	mov	sl, r0
 8003396:	2d00      	cmp	r5, #0
 8003398:	d07f      	beq.n	800349a <_dtoa_r+0x20a>
 800339a:	ee18 3a90 	vmov	r3, s17
 800339e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80033a6:	ec51 0b18 	vmov	r0, r1, d8
 80033aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80033ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80033b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80033b6:	4619      	mov	r1, r3
 80033b8:	2200      	movs	r2, #0
 80033ba:	4b75      	ldr	r3, [pc, #468]	; (8003590 <_dtoa_r+0x300>)
 80033bc:	f7fc ff6c 	bl	8000298 <__aeabi_dsub>
 80033c0:	a367      	add	r3, pc, #412	; (adr r3, 8003560 <_dtoa_r+0x2d0>)
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f7fd f91f 	bl	8000608 <__aeabi_dmul>
 80033ca:	a367      	add	r3, pc, #412	; (adr r3, 8003568 <_dtoa_r+0x2d8>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fc ff64 	bl	800029c <__adddf3>
 80033d4:	4606      	mov	r6, r0
 80033d6:	4628      	mov	r0, r5
 80033d8:	460f      	mov	r7, r1
 80033da:	f7fd f8ab 	bl	8000534 <__aeabi_i2d>
 80033de:	a364      	add	r3, pc, #400	; (adr r3, 8003570 <_dtoa_r+0x2e0>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f7fd f910 	bl	8000608 <__aeabi_dmul>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4630      	mov	r0, r6
 80033ee:	4639      	mov	r1, r7
 80033f0:	f7fc ff54 	bl	800029c <__adddf3>
 80033f4:	4606      	mov	r6, r0
 80033f6:	460f      	mov	r7, r1
 80033f8:	f7fd fbb6 	bl	8000b68 <__aeabi_d2iz>
 80033fc:	2200      	movs	r2, #0
 80033fe:	4683      	mov	fp, r0
 8003400:	2300      	movs	r3, #0
 8003402:	4630      	mov	r0, r6
 8003404:	4639      	mov	r1, r7
 8003406:	f7fd fb71 	bl	8000aec <__aeabi_dcmplt>
 800340a:	b148      	cbz	r0, 8003420 <_dtoa_r+0x190>
 800340c:	4658      	mov	r0, fp
 800340e:	f7fd f891 	bl	8000534 <__aeabi_i2d>
 8003412:	4632      	mov	r2, r6
 8003414:	463b      	mov	r3, r7
 8003416:	f7fd fb5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800341a:	b908      	cbnz	r0, 8003420 <_dtoa_r+0x190>
 800341c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003420:	f1bb 0f16 	cmp.w	fp, #22
 8003424:	d857      	bhi.n	80034d6 <_dtoa_r+0x246>
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <_dtoa_r+0x304>)
 8003428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	ec51 0b18 	vmov	r0, r1, d8
 8003434:	f7fd fb5a 	bl	8000aec <__aeabi_dcmplt>
 8003438:	2800      	cmp	r0, #0
 800343a:	d04e      	beq.n	80034da <_dtoa_r+0x24a>
 800343c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003440:	2300      	movs	r3, #0
 8003442:	930c      	str	r3, [sp, #48]	; 0x30
 8003444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003446:	1b5b      	subs	r3, r3, r5
 8003448:	1e5a      	subs	r2, r3, #1
 800344a:	bf45      	ittet	mi
 800344c:	f1c3 0301 	rsbmi	r3, r3, #1
 8003450:	9305      	strmi	r3, [sp, #20]
 8003452:	2300      	movpl	r3, #0
 8003454:	2300      	movmi	r3, #0
 8003456:	9206      	str	r2, [sp, #24]
 8003458:	bf54      	ite	pl
 800345a:	9305      	strpl	r3, [sp, #20]
 800345c:	9306      	strmi	r3, [sp, #24]
 800345e:	f1bb 0f00 	cmp.w	fp, #0
 8003462:	db3c      	blt.n	80034de <_dtoa_r+0x24e>
 8003464:	9b06      	ldr	r3, [sp, #24]
 8003466:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800346a:	445b      	add	r3, fp
 800346c:	9306      	str	r3, [sp, #24]
 800346e:	2300      	movs	r3, #0
 8003470:	9308      	str	r3, [sp, #32]
 8003472:	9b07      	ldr	r3, [sp, #28]
 8003474:	2b09      	cmp	r3, #9
 8003476:	d868      	bhi.n	800354a <_dtoa_r+0x2ba>
 8003478:	2b05      	cmp	r3, #5
 800347a:	bfc4      	itt	gt
 800347c:	3b04      	subgt	r3, #4
 800347e:	9307      	strgt	r3, [sp, #28]
 8003480:	9b07      	ldr	r3, [sp, #28]
 8003482:	f1a3 0302 	sub.w	r3, r3, #2
 8003486:	bfcc      	ite	gt
 8003488:	2500      	movgt	r5, #0
 800348a:	2501      	movle	r5, #1
 800348c:	2b03      	cmp	r3, #3
 800348e:	f200 8085 	bhi.w	800359c <_dtoa_r+0x30c>
 8003492:	e8df f003 	tbb	[pc, r3]
 8003496:	3b2e      	.short	0x3b2e
 8003498:	5839      	.short	0x5839
 800349a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800349e:	441d      	add	r5, r3
 80034a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	bfc1      	itttt	gt
 80034a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80034ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80034b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80034b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80034b8:	bfd6      	itet	le
 80034ba:	f1c3 0320 	rsble	r3, r3, #32
 80034be:	ea48 0003 	orrgt.w	r0, r8, r3
 80034c2:	fa06 f003 	lslle.w	r0, r6, r3
 80034c6:	f7fd f825 	bl	8000514 <__aeabi_ui2d>
 80034ca:	2201      	movs	r2, #1
 80034cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80034d0:	3d01      	subs	r5, #1
 80034d2:	920e      	str	r2, [sp, #56]	; 0x38
 80034d4:	e76f      	b.n	80033b6 <_dtoa_r+0x126>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e7b3      	b.n	8003442 <_dtoa_r+0x1b2>
 80034da:	900c      	str	r0, [sp, #48]	; 0x30
 80034dc:	e7b2      	b.n	8003444 <_dtoa_r+0x1b4>
 80034de:	9b05      	ldr	r3, [sp, #20]
 80034e0:	eba3 030b 	sub.w	r3, r3, fp
 80034e4:	9305      	str	r3, [sp, #20]
 80034e6:	f1cb 0300 	rsb	r3, fp, #0
 80034ea:	9308      	str	r3, [sp, #32]
 80034ec:	2300      	movs	r3, #0
 80034ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80034f0:	e7bf      	b.n	8003472 <_dtoa_r+0x1e2>
 80034f2:	2300      	movs	r3, #0
 80034f4:	9309      	str	r3, [sp, #36]	; 0x24
 80034f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	dc52      	bgt.n	80035a2 <_dtoa_r+0x312>
 80034fc:	2301      	movs	r3, #1
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	9304      	str	r3, [sp, #16]
 8003502:	461a      	mov	r2, r3
 8003504:	920a      	str	r2, [sp, #40]	; 0x28
 8003506:	e00b      	b.n	8003520 <_dtoa_r+0x290>
 8003508:	2301      	movs	r3, #1
 800350a:	e7f3      	b.n	80034f4 <_dtoa_r+0x264>
 800350c:	2300      	movs	r3, #0
 800350e:	9309      	str	r3, [sp, #36]	; 0x24
 8003510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003512:	445b      	add	r3, fp
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	3301      	adds	r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	9304      	str	r3, [sp, #16]
 800351c:	bfb8      	it	lt
 800351e:	2301      	movlt	r3, #1
 8003520:	69e0      	ldr	r0, [r4, #28]
 8003522:	2100      	movs	r1, #0
 8003524:	2204      	movs	r2, #4
 8003526:	f102 0614 	add.w	r6, r2, #20
 800352a:	429e      	cmp	r6, r3
 800352c:	d93d      	bls.n	80035aa <_dtoa_r+0x31a>
 800352e:	6041      	str	r1, [r0, #4]
 8003530:	4620      	mov	r0, r4
 8003532:	f000 fd9f 	bl	8004074 <_Balloc>
 8003536:	9000      	str	r0, [sp, #0]
 8003538:	2800      	cmp	r0, #0
 800353a:	d139      	bne.n	80035b0 <_dtoa_r+0x320>
 800353c:	4b16      	ldr	r3, [pc, #88]	; (8003598 <_dtoa_r+0x308>)
 800353e:	4602      	mov	r2, r0
 8003540:	f240 11af 	movw	r1, #431	; 0x1af
 8003544:	e6bd      	b.n	80032c2 <_dtoa_r+0x32>
 8003546:	2301      	movs	r3, #1
 8003548:	e7e1      	b.n	800350e <_dtoa_r+0x27e>
 800354a:	2501      	movs	r5, #1
 800354c:	2300      	movs	r3, #0
 800354e:	9307      	str	r3, [sp, #28]
 8003550:	9509      	str	r5, [sp, #36]	; 0x24
 8003552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	2200      	movs	r2, #0
 800355c:	2312      	movs	r3, #18
 800355e:	e7d1      	b.n	8003504 <_dtoa_r+0x274>
 8003560:	636f4361 	.word	0x636f4361
 8003564:	3fd287a7 	.word	0x3fd287a7
 8003568:	8b60c8b3 	.word	0x8b60c8b3
 800356c:	3fc68a28 	.word	0x3fc68a28
 8003570:	509f79fb 	.word	0x509f79fb
 8003574:	3fd34413 	.word	0x3fd34413
 8003578:	08006f36 	.word	0x08006f36
 800357c:	08006f4d 	.word	0x08006f4d
 8003580:	7ff00000 	.word	0x7ff00000
 8003584:	08006f32 	.word	0x08006f32
 8003588:	08006f29 	.word	0x08006f29
 800358c:	08006f01 	.word	0x08006f01
 8003590:	3ff80000 	.word	0x3ff80000
 8003594:	08007038 	.word	0x08007038
 8003598:	08006fa5 	.word	0x08006fa5
 800359c:	2301      	movs	r3, #1
 800359e:	9309      	str	r3, [sp, #36]	; 0x24
 80035a0:	e7d7      	b.n	8003552 <_dtoa_r+0x2c2>
 80035a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	9304      	str	r3, [sp, #16]
 80035a8:	e7ba      	b.n	8003520 <_dtoa_r+0x290>
 80035aa:	3101      	adds	r1, #1
 80035ac:	0052      	lsls	r2, r2, #1
 80035ae:	e7ba      	b.n	8003526 <_dtoa_r+0x296>
 80035b0:	69e3      	ldr	r3, [r4, #28]
 80035b2:	9a00      	ldr	r2, [sp, #0]
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	9b04      	ldr	r3, [sp, #16]
 80035b8:	2b0e      	cmp	r3, #14
 80035ba:	f200 80a8 	bhi.w	800370e <_dtoa_r+0x47e>
 80035be:	2d00      	cmp	r5, #0
 80035c0:	f000 80a5 	beq.w	800370e <_dtoa_r+0x47e>
 80035c4:	f1bb 0f00 	cmp.w	fp, #0
 80035c8:	dd38      	ble.n	800363c <_dtoa_r+0x3ac>
 80035ca:	4bc0      	ldr	r3, [pc, #768]	; (80038cc <_dtoa_r+0x63c>)
 80035cc:	f00b 020f 	and.w	r2, fp, #15
 80035d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80035d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80035dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80035e0:	d019      	beq.n	8003616 <_dtoa_r+0x386>
 80035e2:	4bbb      	ldr	r3, [pc, #748]	; (80038d0 <_dtoa_r+0x640>)
 80035e4:	ec51 0b18 	vmov	r0, r1, d8
 80035e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80035ec:	f7fd f936 	bl	800085c <__aeabi_ddiv>
 80035f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035f4:	f008 080f 	and.w	r8, r8, #15
 80035f8:	2503      	movs	r5, #3
 80035fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80038d0 <_dtoa_r+0x640>
 80035fe:	f1b8 0f00 	cmp.w	r8, #0
 8003602:	d10a      	bne.n	800361a <_dtoa_r+0x38a>
 8003604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003608:	4632      	mov	r2, r6
 800360a:	463b      	mov	r3, r7
 800360c:	f7fd f926 	bl	800085c <__aeabi_ddiv>
 8003610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003614:	e02b      	b.n	800366e <_dtoa_r+0x3de>
 8003616:	2502      	movs	r5, #2
 8003618:	e7ef      	b.n	80035fa <_dtoa_r+0x36a>
 800361a:	f018 0f01 	tst.w	r8, #1
 800361e:	d008      	beq.n	8003632 <_dtoa_r+0x3a2>
 8003620:	4630      	mov	r0, r6
 8003622:	4639      	mov	r1, r7
 8003624:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003628:	f7fc ffee 	bl	8000608 <__aeabi_dmul>
 800362c:	3501      	adds	r5, #1
 800362e:	4606      	mov	r6, r0
 8003630:	460f      	mov	r7, r1
 8003632:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003636:	f109 0908 	add.w	r9, r9, #8
 800363a:	e7e0      	b.n	80035fe <_dtoa_r+0x36e>
 800363c:	f000 809f 	beq.w	800377e <_dtoa_r+0x4ee>
 8003640:	f1cb 0600 	rsb	r6, fp, #0
 8003644:	4ba1      	ldr	r3, [pc, #644]	; (80038cc <_dtoa_r+0x63c>)
 8003646:	4fa2      	ldr	r7, [pc, #648]	; (80038d0 <_dtoa_r+0x640>)
 8003648:	f006 020f 	and.w	r2, r6, #15
 800364c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	ec51 0b18 	vmov	r0, r1, d8
 8003658:	f7fc ffd6 	bl	8000608 <__aeabi_dmul>
 800365c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003660:	1136      	asrs	r6, r6, #4
 8003662:	2300      	movs	r3, #0
 8003664:	2502      	movs	r5, #2
 8003666:	2e00      	cmp	r6, #0
 8003668:	d17e      	bne.n	8003768 <_dtoa_r+0x4d8>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1d0      	bne.n	8003610 <_dtoa_r+0x380>
 800366e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003670:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 8084 	beq.w	8003782 <_dtoa_r+0x4f2>
 800367a:	4b96      	ldr	r3, [pc, #600]	; (80038d4 <_dtoa_r+0x644>)
 800367c:	2200      	movs	r2, #0
 800367e:	4640      	mov	r0, r8
 8003680:	4649      	mov	r1, r9
 8003682:	f7fd fa33 	bl	8000aec <__aeabi_dcmplt>
 8003686:	2800      	cmp	r0, #0
 8003688:	d07b      	beq.n	8003782 <_dtoa_r+0x4f2>
 800368a:	9b04      	ldr	r3, [sp, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d078      	beq.n	8003782 <_dtoa_r+0x4f2>
 8003690:	9b01      	ldr	r3, [sp, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	dd39      	ble.n	800370a <_dtoa_r+0x47a>
 8003696:	4b90      	ldr	r3, [pc, #576]	; (80038d8 <_dtoa_r+0x648>)
 8003698:	2200      	movs	r2, #0
 800369a:	4640      	mov	r0, r8
 800369c:	4649      	mov	r1, r9
 800369e:	f7fc ffb3 	bl	8000608 <__aeabi_dmul>
 80036a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036a6:	9e01      	ldr	r6, [sp, #4]
 80036a8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80036ac:	3501      	adds	r5, #1
 80036ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80036b2:	4628      	mov	r0, r5
 80036b4:	f7fc ff3e 	bl	8000534 <__aeabi_i2d>
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	f7fc ffa4 	bl	8000608 <__aeabi_dmul>
 80036c0:	4b86      	ldr	r3, [pc, #536]	; (80038dc <_dtoa_r+0x64c>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	f7fc fdea 	bl	800029c <__adddf3>
 80036c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80036cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036d0:	9303      	str	r3, [sp, #12]
 80036d2:	2e00      	cmp	r6, #0
 80036d4:	d158      	bne.n	8003788 <_dtoa_r+0x4f8>
 80036d6:	4b82      	ldr	r3, [pc, #520]	; (80038e0 <_dtoa_r+0x650>)
 80036d8:	2200      	movs	r2, #0
 80036da:	4640      	mov	r0, r8
 80036dc:	4649      	mov	r1, r9
 80036de:	f7fc fddb 	bl	8000298 <__aeabi_dsub>
 80036e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036e6:	4680      	mov	r8, r0
 80036e8:	4689      	mov	r9, r1
 80036ea:	f7fd fa1d 	bl	8000b28 <__aeabi_dcmpgt>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	f040 8296 	bne.w	8003c20 <_dtoa_r+0x990>
 80036f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80036f8:	4640      	mov	r0, r8
 80036fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80036fe:	4649      	mov	r1, r9
 8003700:	f7fd f9f4 	bl	8000aec <__aeabi_dcmplt>
 8003704:	2800      	cmp	r0, #0
 8003706:	f040 8289 	bne.w	8003c1c <_dtoa_r+0x98c>
 800370a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800370e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003710:	2b00      	cmp	r3, #0
 8003712:	f2c0 814e 	blt.w	80039b2 <_dtoa_r+0x722>
 8003716:	f1bb 0f0e 	cmp.w	fp, #14
 800371a:	f300 814a 	bgt.w	80039b2 <_dtoa_r+0x722>
 800371e:	4b6b      	ldr	r3, [pc, #428]	; (80038cc <_dtoa_r+0x63c>)
 8003720:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003724:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800372a:	2b00      	cmp	r3, #0
 800372c:	f280 80dc 	bge.w	80038e8 <_dtoa_r+0x658>
 8003730:	9b04      	ldr	r3, [sp, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f300 80d8 	bgt.w	80038e8 <_dtoa_r+0x658>
 8003738:	f040 826f 	bne.w	8003c1a <_dtoa_r+0x98a>
 800373c:	4b68      	ldr	r3, [pc, #416]	; (80038e0 <_dtoa_r+0x650>)
 800373e:	2200      	movs	r2, #0
 8003740:	4640      	mov	r0, r8
 8003742:	4649      	mov	r1, r9
 8003744:	f7fc ff60 	bl	8000608 <__aeabi_dmul>
 8003748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800374c:	f7fd f9e2 	bl	8000b14 <__aeabi_dcmpge>
 8003750:	9e04      	ldr	r6, [sp, #16]
 8003752:	4637      	mov	r7, r6
 8003754:	2800      	cmp	r0, #0
 8003756:	f040 8245 	bne.w	8003be4 <_dtoa_r+0x954>
 800375a:	9d00      	ldr	r5, [sp, #0]
 800375c:	2331      	movs	r3, #49	; 0x31
 800375e:	f805 3b01 	strb.w	r3, [r5], #1
 8003762:	f10b 0b01 	add.w	fp, fp, #1
 8003766:	e241      	b.n	8003bec <_dtoa_r+0x95c>
 8003768:	07f2      	lsls	r2, r6, #31
 800376a:	d505      	bpl.n	8003778 <_dtoa_r+0x4e8>
 800376c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003770:	f7fc ff4a 	bl	8000608 <__aeabi_dmul>
 8003774:	3501      	adds	r5, #1
 8003776:	2301      	movs	r3, #1
 8003778:	1076      	asrs	r6, r6, #1
 800377a:	3708      	adds	r7, #8
 800377c:	e773      	b.n	8003666 <_dtoa_r+0x3d6>
 800377e:	2502      	movs	r5, #2
 8003780:	e775      	b.n	800366e <_dtoa_r+0x3de>
 8003782:	9e04      	ldr	r6, [sp, #16]
 8003784:	465f      	mov	r7, fp
 8003786:	e792      	b.n	80036ae <_dtoa_r+0x41e>
 8003788:	9900      	ldr	r1, [sp, #0]
 800378a:	4b50      	ldr	r3, [pc, #320]	; (80038cc <_dtoa_r+0x63c>)
 800378c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003790:	4431      	add	r1, r6
 8003792:	9102      	str	r1, [sp, #8]
 8003794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003796:	eeb0 9a47 	vmov.f32	s18, s14
 800379a:	eef0 9a67 	vmov.f32	s19, s15
 800379e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80037a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d044      	beq.n	8003834 <_dtoa_r+0x5a4>
 80037aa:	494e      	ldr	r1, [pc, #312]	; (80038e4 <_dtoa_r+0x654>)
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7fd f855 	bl	800085c <__aeabi_ddiv>
 80037b2:	ec53 2b19 	vmov	r2, r3, d9
 80037b6:	f7fc fd6f 	bl	8000298 <__aeabi_dsub>
 80037ba:	9d00      	ldr	r5, [sp, #0]
 80037bc:	ec41 0b19 	vmov	d9, r0, r1
 80037c0:	4649      	mov	r1, r9
 80037c2:	4640      	mov	r0, r8
 80037c4:	f7fd f9d0 	bl	8000b68 <__aeabi_d2iz>
 80037c8:	4606      	mov	r6, r0
 80037ca:	f7fc feb3 	bl	8000534 <__aeabi_i2d>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4640      	mov	r0, r8
 80037d4:	4649      	mov	r1, r9
 80037d6:	f7fc fd5f 	bl	8000298 <__aeabi_dsub>
 80037da:	3630      	adds	r6, #48	; 0x30
 80037dc:	f805 6b01 	strb.w	r6, [r5], #1
 80037e0:	ec53 2b19 	vmov	r2, r3, d9
 80037e4:	4680      	mov	r8, r0
 80037e6:	4689      	mov	r9, r1
 80037e8:	f7fd f980 	bl	8000aec <__aeabi_dcmplt>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d164      	bne.n	80038ba <_dtoa_r+0x62a>
 80037f0:	4642      	mov	r2, r8
 80037f2:	464b      	mov	r3, r9
 80037f4:	4937      	ldr	r1, [pc, #220]	; (80038d4 <_dtoa_r+0x644>)
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7fc fd4e 	bl	8000298 <__aeabi_dsub>
 80037fc:	ec53 2b19 	vmov	r2, r3, d9
 8003800:	f7fd f974 	bl	8000aec <__aeabi_dcmplt>
 8003804:	2800      	cmp	r0, #0
 8003806:	f040 80b6 	bne.w	8003976 <_dtoa_r+0x6e6>
 800380a:	9b02      	ldr	r3, [sp, #8]
 800380c:	429d      	cmp	r5, r3
 800380e:	f43f af7c 	beq.w	800370a <_dtoa_r+0x47a>
 8003812:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <_dtoa_r+0x648>)
 8003814:	ec51 0b19 	vmov	r0, r1, d9
 8003818:	2200      	movs	r2, #0
 800381a:	f7fc fef5 	bl	8000608 <__aeabi_dmul>
 800381e:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <_dtoa_r+0x648>)
 8003820:	ec41 0b19 	vmov	d9, r0, r1
 8003824:	2200      	movs	r2, #0
 8003826:	4640      	mov	r0, r8
 8003828:	4649      	mov	r1, r9
 800382a:	f7fc feed 	bl	8000608 <__aeabi_dmul>
 800382e:	4680      	mov	r8, r0
 8003830:	4689      	mov	r9, r1
 8003832:	e7c5      	b.n	80037c0 <_dtoa_r+0x530>
 8003834:	ec51 0b17 	vmov	r0, r1, d7
 8003838:	f7fc fee6 	bl	8000608 <__aeabi_dmul>
 800383c:	9b02      	ldr	r3, [sp, #8]
 800383e:	9d00      	ldr	r5, [sp, #0]
 8003840:	930f      	str	r3, [sp, #60]	; 0x3c
 8003842:	ec41 0b19 	vmov	d9, r0, r1
 8003846:	4649      	mov	r1, r9
 8003848:	4640      	mov	r0, r8
 800384a:	f7fd f98d 	bl	8000b68 <__aeabi_d2iz>
 800384e:	4606      	mov	r6, r0
 8003850:	f7fc fe70 	bl	8000534 <__aeabi_i2d>
 8003854:	3630      	adds	r6, #48	; 0x30
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4640      	mov	r0, r8
 800385c:	4649      	mov	r1, r9
 800385e:	f7fc fd1b 	bl	8000298 <__aeabi_dsub>
 8003862:	f805 6b01 	strb.w	r6, [r5], #1
 8003866:	9b02      	ldr	r3, [sp, #8]
 8003868:	429d      	cmp	r5, r3
 800386a:	4680      	mov	r8, r0
 800386c:	4689      	mov	r9, r1
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	d124      	bne.n	80038be <_dtoa_r+0x62e>
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <_dtoa_r+0x654>)
 8003876:	ec51 0b19 	vmov	r0, r1, d9
 800387a:	f7fc fd0f 	bl	800029c <__adddf3>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4640      	mov	r0, r8
 8003884:	4649      	mov	r1, r9
 8003886:	f7fd f94f 	bl	8000b28 <__aeabi_dcmpgt>
 800388a:	2800      	cmp	r0, #0
 800388c:	d173      	bne.n	8003976 <_dtoa_r+0x6e6>
 800388e:	ec53 2b19 	vmov	r2, r3, d9
 8003892:	4914      	ldr	r1, [pc, #80]	; (80038e4 <_dtoa_r+0x654>)
 8003894:	2000      	movs	r0, #0
 8003896:	f7fc fcff 	bl	8000298 <__aeabi_dsub>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4640      	mov	r0, r8
 80038a0:	4649      	mov	r1, r9
 80038a2:	f7fd f923 	bl	8000aec <__aeabi_dcmplt>
 80038a6:	2800      	cmp	r0, #0
 80038a8:	f43f af2f 	beq.w	800370a <_dtoa_r+0x47a>
 80038ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80038ae:	1e6b      	subs	r3, r5, #1
 80038b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80038b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80038b6:	2b30      	cmp	r3, #48	; 0x30
 80038b8:	d0f8      	beq.n	80038ac <_dtoa_r+0x61c>
 80038ba:	46bb      	mov	fp, r7
 80038bc:	e04a      	b.n	8003954 <_dtoa_r+0x6c4>
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <_dtoa_r+0x648>)
 80038c0:	f7fc fea2 	bl	8000608 <__aeabi_dmul>
 80038c4:	4680      	mov	r8, r0
 80038c6:	4689      	mov	r9, r1
 80038c8:	e7bd      	b.n	8003846 <_dtoa_r+0x5b6>
 80038ca:	bf00      	nop
 80038cc:	08007038 	.word	0x08007038
 80038d0:	08007010 	.word	0x08007010
 80038d4:	3ff00000 	.word	0x3ff00000
 80038d8:	40240000 	.word	0x40240000
 80038dc:	401c0000 	.word	0x401c0000
 80038e0:	40140000 	.word	0x40140000
 80038e4:	3fe00000 	.word	0x3fe00000
 80038e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80038ec:	9d00      	ldr	r5, [sp, #0]
 80038ee:	4642      	mov	r2, r8
 80038f0:	464b      	mov	r3, r9
 80038f2:	4630      	mov	r0, r6
 80038f4:	4639      	mov	r1, r7
 80038f6:	f7fc ffb1 	bl	800085c <__aeabi_ddiv>
 80038fa:	f7fd f935 	bl	8000b68 <__aeabi_d2iz>
 80038fe:	9001      	str	r0, [sp, #4]
 8003900:	f7fc fe18 	bl	8000534 <__aeabi_i2d>
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	f7fc fe7e 	bl	8000608 <__aeabi_dmul>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4630      	mov	r0, r6
 8003912:	4639      	mov	r1, r7
 8003914:	f7fc fcc0 	bl	8000298 <__aeabi_dsub>
 8003918:	9e01      	ldr	r6, [sp, #4]
 800391a:	9f04      	ldr	r7, [sp, #16]
 800391c:	3630      	adds	r6, #48	; 0x30
 800391e:	f805 6b01 	strb.w	r6, [r5], #1
 8003922:	9e00      	ldr	r6, [sp, #0]
 8003924:	1bae      	subs	r6, r5, r6
 8003926:	42b7      	cmp	r7, r6
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	d134      	bne.n	8003998 <_dtoa_r+0x708>
 800392e:	f7fc fcb5 	bl	800029c <__adddf3>
 8003932:	4642      	mov	r2, r8
 8003934:	464b      	mov	r3, r9
 8003936:	4606      	mov	r6, r0
 8003938:	460f      	mov	r7, r1
 800393a:	f7fd f8f5 	bl	8000b28 <__aeabi_dcmpgt>
 800393e:	b9c8      	cbnz	r0, 8003974 <_dtoa_r+0x6e4>
 8003940:	4642      	mov	r2, r8
 8003942:	464b      	mov	r3, r9
 8003944:	4630      	mov	r0, r6
 8003946:	4639      	mov	r1, r7
 8003948:	f7fd f8c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800394c:	b110      	cbz	r0, 8003954 <_dtoa_r+0x6c4>
 800394e:	9b01      	ldr	r3, [sp, #4]
 8003950:	07db      	lsls	r3, r3, #31
 8003952:	d40f      	bmi.n	8003974 <_dtoa_r+0x6e4>
 8003954:	4651      	mov	r1, sl
 8003956:	4620      	mov	r0, r4
 8003958:	f000 fbcc 	bl	80040f4 <_Bfree>
 800395c:	2300      	movs	r3, #0
 800395e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003960:	702b      	strb	r3, [r5, #0]
 8003962:	f10b 0301 	add.w	r3, fp, #1
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800396a:	2b00      	cmp	r3, #0
 800396c:	f43f ace2 	beq.w	8003334 <_dtoa_r+0xa4>
 8003970:	601d      	str	r5, [r3, #0]
 8003972:	e4df      	b.n	8003334 <_dtoa_r+0xa4>
 8003974:	465f      	mov	r7, fp
 8003976:	462b      	mov	r3, r5
 8003978:	461d      	mov	r5, r3
 800397a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800397e:	2a39      	cmp	r2, #57	; 0x39
 8003980:	d106      	bne.n	8003990 <_dtoa_r+0x700>
 8003982:	9a00      	ldr	r2, [sp, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d1f7      	bne.n	8003978 <_dtoa_r+0x6e8>
 8003988:	9900      	ldr	r1, [sp, #0]
 800398a:	2230      	movs	r2, #48	; 0x30
 800398c:	3701      	adds	r7, #1
 800398e:	700a      	strb	r2, [r1, #0]
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	3201      	adds	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e790      	b.n	80038ba <_dtoa_r+0x62a>
 8003998:	4ba3      	ldr	r3, [pc, #652]	; (8003c28 <_dtoa_r+0x998>)
 800399a:	2200      	movs	r2, #0
 800399c:	f7fc fe34 	bl	8000608 <__aeabi_dmul>
 80039a0:	2200      	movs	r2, #0
 80039a2:	2300      	movs	r3, #0
 80039a4:	4606      	mov	r6, r0
 80039a6:	460f      	mov	r7, r1
 80039a8:	f7fd f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d09e      	beq.n	80038ee <_dtoa_r+0x65e>
 80039b0:	e7d0      	b.n	8003954 <_dtoa_r+0x6c4>
 80039b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	f000 80ca 	beq.w	8003b4e <_dtoa_r+0x8be>
 80039ba:	9a07      	ldr	r2, [sp, #28]
 80039bc:	2a01      	cmp	r2, #1
 80039be:	f300 80ad 	bgt.w	8003b1c <_dtoa_r+0x88c>
 80039c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039c4:	2a00      	cmp	r2, #0
 80039c6:	f000 80a5 	beq.w	8003b14 <_dtoa_r+0x884>
 80039ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80039ce:	9e08      	ldr	r6, [sp, #32]
 80039d0:	9d05      	ldr	r5, [sp, #20]
 80039d2:	9a05      	ldr	r2, [sp, #20]
 80039d4:	441a      	add	r2, r3
 80039d6:	9205      	str	r2, [sp, #20]
 80039d8:	9a06      	ldr	r2, [sp, #24]
 80039da:	2101      	movs	r1, #1
 80039dc:	441a      	add	r2, r3
 80039de:	4620      	mov	r0, r4
 80039e0:	9206      	str	r2, [sp, #24]
 80039e2:	f000 fc87 	bl	80042f4 <__i2b>
 80039e6:	4607      	mov	r7, r0
 80039e8:	b165      	cbz	r5, 8003a04 <_dtoa_r+0x774>
 80039ea:	9b06      	ldr	r3, [sp, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dd09      	ble.n	8003a04 <_dtoa_r+0x774>
 80039f0:	42ab      	cmp	r3, r5
 80039f2:	9a05      	ldr	r2, [sp, #20]
 80039f4:	bfa8      	it	ge
 80039f6:	462b      	movge	r3, r5
 80039f8:	1ad2      	subs	r2, r2, r3
 80039fa:	9205      	str	r2, [sp, #20]
 80039fc:	9a06      	ldr	r2, [sp, #24]
 80039fe:	1aed      	subs	r5, r5, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	9306      	str	r3, [sp, #24]
 8003a04:	9b08      	ldr	r3, [sp, #32]
 8003a06:	b1f3      	cbz	r3, 8003a46 <_dtoa_r+0x7b6>
 8003a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80a3 	beq.w	8003b56 <_dtoa_r+0x8c6>
 8003a10:	2e00      	cmp	r6, #0
 8003a12:	dd10      	ble.n	8003a36 <_dtoa_r+0x7a6>
 8003a14:	4639      	mov	r1, r7
 8003a16:	4632      	mov	r2, r6
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f000 fd2b 	bl	8004474 <__pow5mult>
 8003a1e:	4652      	mov	r2, sl
 8003a20:	4601      	mov	r1, r0
 8003a22:	4607      	mov	r7, r0
 8003a24:	4620      	mov	r0, r4
 8003a26:	f000 fc7b 	bl	8004320 <__multiply>
 8003a2a:	4651      	mov	r1, sl
 8003a2c:	4680      	mov	r8, r0
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f000 fb60 	bl	80040f4 <_Bfree>
 8003a34:	46c2      	mov	sl, r8
 8003a36:	9b08      	ldr	r3, [sp, #32]
 8003a38:	1b9a      	subs	r2, r3, r6
 8003a3a:	d004      	beq.n	8003a46 <_dtoa_r+0x7b6>
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f000 fd18 	bl	8004474 <__pow5mult>
 8003a44:	4682      	mov	sl, r0
 8003a46:	2101      	movs	r1, #1
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f000 fc53 	bl	80042f4 <__i2b>
 8003a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	4606      	mov	r6, r0
 8003a54:	f340 8081 	ble.w	8003b5a <_dtoa_r+0x8ca>
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f000 fd09 	bl	8004474 <__pow5mult>
 8003a62:	9b07      	ldr	r3, [sp, #28]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	4606      	mov	r6, r0
 8003a68:	dd7a      	ble.n	8003b60 <_dtoa_r+0x8d0>
 8003a6a:	f04f 0800 	mov.w	r8, #0
 8003a6e:	6933      	ldr	r3, [r6, #16]
 8003a70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003a74:	6918      	ldr	r0, [r3, #16]
 8003a76:	f000 fbef 	bl	8004258 <__hi0bits>
 8003a7a:	f1c0 0020 	rsb	r0, r0, #32
 8003a7e:	9b06      	ldr	r3, [sp, #24]
 8003a80:	4418      	add	r0, r3
 8003a82:	f010 001f 	ands.w	r0, r0, #31
 8003a86:	f000 8094 	beq.w	8003bb2 <_dtoa_r+0x922>
 8003a8a:	f1c0 0320 	rsb	r3, r0, #32
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	f340 8085 	ble.w	8003b9e <_dtoa_r+0x90e>
 8003a94:	9b05      	ldr	r3, [sp, #20]
 8003a96:	f1c0 001c 	rsb	r0, r0, #28
 8003a9a:	4403      	add	r3, r0
 8003a9c:	9305      	str	r3, [sp, #20]
 8003a9e:	9b06      	ldr	r3, [sp, #24]
 8003aa0:	4403      	add	r3, r0
 8003aa2:	4405      	add	r5, r0
 8003aa4:	9306      	str	r3, [sp, #24]
 8003aa6:	9b05      	ldr	r3, [sp, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	dd05      	ble.n	8003ab8 <_dtoa_r+0x828>
 8003aac:	4651      	mov	r1, sl
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f000 fd39 	bl	8004528 <__lshift>
 8003ab6:	4682      	mov	sl, r0
 8003ab8:	9b06      	ldr	r3, [sp, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	dd05      	ble.n	8003aca <_dtoa_r+0x83a>
 8003abe:	4631      	mov	r1, r6
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f000 fd30 	bl	8004528 <__lshift>
 8003ac8:	4606      	mov	r6, r0
 8003aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d072      	beq.n	8003bb6 <_dtoa_r+0x926>
 8003ad0:	4631      	mov	r1, r6
 8003ad2:	4650      	mov	r0, sl
 8003ad4:	f000 fd94 	bl	8004600 <__mcmp>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	da6c      	bge.n	8003bb6 <_dtoa_r+0x926>
 8003adc:	2300      	movs	r3, #0
 8003ade:	4651      	mov	r1, sl
 8003ae0:	220a      	movs	r2, #10
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f000 fb28 	bl	8004138 <__multadd>
 8003ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003aee:	4682      	mov	sl, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 81b0 	beq.w	8003e56 <_dtoa_r+0xbc6>
 8003af6:	2300      	movs	r3, #0
 8003af8:	4639      	mov	r1, r7
 8003afa:	220a      	movs	r2, #10
 8003afc:	4620      	mov	r0, r4
 8003afe:	f000 fb1b 	bl	8004138 <__multadd>
 8003b02:	9b01      	ldr	r3, [sp, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	4607      	mov	r7, r0
 8003b08:	f300 8096 	bgt.w	8003c38 <_dtoa_r+0x9a8>
 8003b0c:	9b07      	ldr	r3, [sp, #28]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	dc59      	bgt.n	8003bc6 <_dtoa_r+0x936>
 8003b12:	e091      	b.n	8003c38 <_dtoa_r+0x9a8>
 8003b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003b1a:	e758      	b.n	80039ce <_dtoa_r+0x73e>
 8003b1c:	9b04      	ldr	r3, [sp, #16]
 8003b1e:	1e5e      	subs	r6, r3, #1
 8003b20:	9b08      	ldr	r3, [sp, #32]
 8003b22:	42b3      	cmp	r3, r6
 8003b24:	bfbf      	itttt	lt
 8003b26:	9b08      	ldrlt	r3, [sp, #32]
 8003b28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8003b2a:	9608      	strlt	r6, [sp, #32]
 8003b2c:	1af3      	sublt	r3, r6, r3
 8003b2e:	bfb4      	ite	lt
 8003b30:	18d2      	addlt	r2, r2, r3
 8003b32:	1b9e      	subge	r6, r3, r6
 8003b34:	9b04      	ldr	r3, [sp, #16]
 8003b36:	bfbc      	itt	lt
 8003b38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8003b3a:	2600      	movlt	r6, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bfb7      	itett	lt
 8003b40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8003b44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003b48:	1a9d      	sublt	r5, r3, r2
 8003b4a:	2300      	movlt	r3, #0
 8003b4c:	e741      	b.n	80039d2 <_dtoa_r+0x742>
 8003b4e:	9e08      	ldr	r6, [sp, #32]
 8003b50:	9d05      	ldr	r5, [sp, #20]
 8003b52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003b54:	e748      	b.n	80039e8 <_dtoa_r+0x758>
 8003b56:	9a08      	ldr	r2, [sp, #32]
 8003b58:	e770      	b.n	8003a3c <_dtoa_r+0x7ac>
 8003b5a:	9b07      	ldr	r3, [sp, #28]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	dc19      	bgt.n	8003b94 <_dtoa_r+0x904>
 8003b60:	9b02      	ldr	r3, [sp, #8]
 8003b62:	b9bb      	cbnz	r3, 8003b94 <_dtoa_r+0x904>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b6a:	b99b      	cbnz	r3, 8003b94 <_dtoa_r+0x904>
 8003b6c:	9b03      	ldr	r3, [sp, #12]
 8003b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b72:	0d1b      	lsrs	r3, r3, #20
 8003b74:	051b      	lsls	r3, r3, #20
 8003b76:	b183      	cbz	r3, 8003b9a <_dtoa_r+0x90a>
 8003b78:	9b05      	ldr	r3, [sp, #20]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	9305      	str	r3, [sp, #20]
 8003b7e:	9b06      	ldr	r3, [sp, #24]
 8003b80:	3301      	adds	r3, #1
 8003b82:	9306      	str	r3, [sp, #24]
 8003b84:	f04f 0801 	mov.w	r8, #1
 8003b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f47f af6f 	bne.w	8003a6e <_dtoa_r+0x7de>
 8003b90:	2001      	movs	r0, #1
 8003b92:	e774      	b.n	8003a7e <_dtoa_r+0x7ee>
 8003b94:	f04f 0800 	mov.w	r8, #0
 8003b98:	e7f6      	b.n	8003b88 <_dtoa_r+0x8f8>
 8003b9a:	4698      	mov	r8, r3
 8003b9c:	e7f4      	b.n	8003b88 <_dtoa_r+0x8f8>
 8003b9e:	d082      	beq.n	8003aa6 <_dtoa_r+0x816>
 8003ba0:	9a05      	ldr	r2, [sp, #20]
 8003ba2:	331c      	adds	r3, #28
 8003ba4:	441a      	add	r2, r3
 8003ba6:	9205      	str	r2, [sp, #20]
 8003ba8:	9a06      	ldr	r2, [sp, #24]
 8003baa:	441a      	add	r2, r3
 8003bac:	441d      	add	r5, r3
 8003bae:	9206      	str	r2, [sp, #24]
 8003bb0:	e779      	b.n	8003aa6 <_dtoa_r+0x816>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	e7f4      	b.n	8003ba0 <_dtoa_r+0x910>
 8003bb6:	9b04      	ldr	r3, [sp, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	dc37      	bgt.n	8003c2c <_dtoa_r+0x99c>
 8003bbc:	9b07      	ldr	r3, [sp, #28]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	dd34      	ble.n	8003c2c <_dtoa_r+0x99c>
 8003bc2:	9b04      	ldr	r3, [sp, #16]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	9b01      	ldr	r3, [sp, #4]
 8003bc8:	b963      	cbnz	r3, 8003be4 <_dtoa_r+0x954>
 8003bca:	4631      	mov	r1, r6
 8003bcc:	2205      	movs	r2, #5
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f000 fab2 	bl	8004138 <__multadd>
 8003bd4:	4601      	mov	r1, r0
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	4650      	mov	r0, sl
 8003bda:	f000 fd11 	bl	8004600 <__mcmp>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	f73f adbb 	bgt.w	800375a <_dtoa_r+0x4ca>
 8003be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003be6:	9d00      	ldr	r5, [sp, #0]
 8003be8:	ea6f 0b03 	mvn.w	fp, r3
 8003bec:	f04f 0800 	mov.w	r8, #0
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f000 fa7e 	bl	80040f4 <_Bfree>
 8003bf8:	2f00      	cmp	r7, #0
 8003bfa:	f43f aeab 	beq.w	8003954 <_dtoa_r+0x6c4>
 8003bfe:	f1b8 0f00 	cmp.w	r8, #0
 8003c02:	d005      	beq.n	8003c10 <_dtoa_r+0x980>
 8003c04:	45b8      	cmp	r8, r7
 8003c06:	d003      	beq.n	8003c10 <_dtoa_r+0x980>
 8003c08:	4641      	mov	r1, r8
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 fa72 	bl	80040f4 <_Bfree>
 8003c10:	4639      	mov	r1, r7
 8003c12:	4620      	mov	r0, r4
 8003c14:	f000 fa6e 	bl	80040f4 <_Bfree>
 8003c18:	e69c      	b.n	8003954 <_dtoa_r+0x6c4>
 8003c1a:	2600      	movs	r6, #0
 8003c1c:	4637      	mov	r7, r6
 8003c1e:	e7e1      	b.n	8003be4 <_dtoa_r+0x954>
 8003c20:	46bb      	mov	fp, r7
 8003c22:	4637      	mov	r7, r6
 8003c24:	e599      	b.n	800375a <_dtoa_r+0x4ca>
 8003c26:	bf00      	nop
 8003c28:	40240000 	.word	0x40240000
 8003c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80c8 	beq.w	8003dc4 <_dtoa_r+0xb34>
 8003c34:	9b04      	ldr	r3, [sp, #16]
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	2d00      	cmp	r5, #0
 8003c3a:	dd05      	ble.n	8003c48 <_dtoa_r+0x9b8>
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	462a      	mov	r2, r5
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 fc71 	bl	8004528 <__lshift>
 8003c46:	4607      	mov	r7, r0
 8003c48:	f1b8 0f00 	cmp.w	r8, #0
 8003c4c:	d05b      	beq.n	8003d06 <_dtoa_r+0xa76>
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 fa0f 	bl	8004074 <_Balloc>
 8003c56:	4605      	mov	r5, r0
 8003c58:	b928      	cbnz	r0, 8003c66 <_dtoa_r+0x9d6>
 8003c5a:	4b83      	ldr	r3, [pc, #524]	; (8003e68 <_dtoa_r+0xbd8>)
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003c62:	f7ff bb2e 	b.w	80032c2 <_dtoa_r+0x32>
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	3202      	adds	r2, #2
 8003c6a:	0092      	lsls	r2, r2, #2
 8003c6c:	f107 010c 	add.w	r1, r7, #12
 8003c70:	300c      	adds	r0, #12
 8003c72:	f001 ff85 	bl	8005b80 <memcpy>
 8003c76:	2201      	movs	r2, #1
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f000 fc54 	bl	8004528 <__lshift>
 8003c80:	9b00      	ldr	r3, [sp, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	9304      	str	r3, [sp, #16]
 8003c86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	9308      	str	r3, [sp, #32]
 8003c8e:	9b02      	ldr	r3, [sp, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	46b8      	mov	r8, r7
 8003c96:	9306      	str	r3, [sp, #24]
 8003c98:	4607      	mov	r7, r0
 8003c9a:	9b04      	ldr	r3, [sp, #16]
 8003c9c:	4631      	mov	r1, r6
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	4650      	mov	r0, sl
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	f7ff fa6c 	bl	8003180 <quorem>
 8003ca8:	4641      	mov	r1, r8
 8003caa:	9002      	str	r0, [sp, #8]
 8003cac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003cb0:	4650      	mov	r0, sl
 8003cb2:	f000 fca5 	bl	8004600 <__mcmp>
 8003cb6:	463a      	mov	r2, r7
 8003cb8:	9005      	str	r0, [sp, #20]
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f000 fcbb 	bl	8004638 <__mdiff>
 8003cc2:	68c2      	ldr	r2, [r0, #12]
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	bb02      	cbnz	r2, 8003d0a <_dtoa_r+0xa7a>
 8003cc8:	4601      	mov	r1, r0
 8003cca:	4650      	mov	r0, sl
 8003ccc:	f000 fc98 	bl	8004600 <__mcmp>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8003cd8:	f000 fa0c 	bl	80040f4 <_Bfree>
 8003cdc:	9b07      	ldr	r3, [sp, #28]
 8003cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ce0:	9d04      	ldr	r5, [sp, #16]
 8003ce2:	ea43 0102 	orr.w	r1, r3, r2
 8003ce6:	9b06      	ldr	r3, [sp, #24]
 8003ce8:	4319      	orrs	r1, r3
 8003cea:	d110      	bne.n	8003d0e <_dtoa_r+0xa7e>
 8003cec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003cf0:	d029      	beq.n	8003d46 <_dtoa_r+0xab6>
 8003cf2:	9b05      	ldr	r3, [sp, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	dd02      	ble.n	8003cfe <_dtoa_r+0xa6e>
 8003cf8:	9b02      	ldr	r3, [sp, #8]
 8003cfa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003cfe:	9b01      	ldr	r3, [sp, #4]
 8003d00:	f883 9000 	strb.w	r9, [r3]
 8003d04:	e774      	b.n	8003bf0 <_dtoa_r+0x960>
 8003d06:	4638      	mov	r0, r7
 8003d08:	e7ba      	b.n	8003c80 <_dtoa_r+0x9f0>
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	e7e1      	b.n	8003cd2 <_dtoa_r+0xa42>
 8003d0e:	9b05      	ldr	r3, [sp, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	db04      	blt.n	8003d1e <_dtoa_r+0xa8e>
 8003d14:	9907      	ldr	r1, [sp, #28]
 8003d16:	430b      	orrs	r3, r1
 8003d18:	9906      	ldr	r1, [sp, #24]
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	d120      	bne.n	8003d60 <_dtoa_r+0xad0>
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	dded      	ble.n	8003cfe <_dtoa_r+0xa6e>
 8003d22:	4651      	mov	r1, sl
 8003d24:	2201      	movs	r2, #1
 8003d26:	4620      	mov	r0, r4
 8003d28:	f000 fbfe 	bl	8004528 <__lshift>
 8003d2c:	4631      	mov	r1, r6
 8003d2e:	4682      	mov	sl, r0
 8003d30:	f000 fc66 	bl	8004600 <__mcmp>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	dc03      	bgt.n	8003d40 <_dtoa_r+0xab0>
 8003d38:	d1e1      	bne.n	8003cfe <_dtoa_r+0xa6e>
 8003d3a:	f019 0f01 	tst.w	r9, #1
 8003d3e:	d0de      	beq.n	8003cfe <_dtoa_r+0xa6e>
 8003d40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003d44:	d1d8      	bne.n	8003cf8 <_dtoa_r+0xa68>
 8003d46:	9a01      	ldr	r2, [sp, #4]
 8003d48:	2339      	movs	r3, #57	; 0x39
 8003d4a:	7013      	strb	r3, [r2, #0]
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	461d      	mov	r5, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003d56:	2a39      	cmp	r2, #57	; 0x39
 8003d58:	d06c      	beq.n	8003e34 <_dtoa_r+0xba4>
 8003d5a:	3201      	adds	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e747      	b.n	8003bf0 <_dtoa_r+0x960>
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	dd07      	ble.n	8003d74 <_dtoa_r+0xae4>
 8003d64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003d68:	d0ed      	beq.n	8003d46 <_dtoa_r+0xab6>
 8003d6a:	9a01      	ldr	r2, [sp, #4]
 8003d6c:	f109 0301 	add.w	r3, r9, #1
 8003d70:	7013      	strb	r3, [r2, #0]
 8003d72:	e73d      	b.n	8003bf0 <_dtoa_r+0x960>
 8003d74:	9b04      	ldr	r3, [sp, #16]
 8003d76:	9a08      	ldr	r2, [sp, #32]
 8003d78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d043      	beq.n	8003e08 <_dtoa_r+0xb78>
 8003d80:	4651      	mov	r1, sl
 8003d82:	2300      	movs	r3, #0
 8003d84:	220a      	movs	r2, #10
 8003d86:	4620      	mov	r0, r4
 8003d88:	f000 f9d6 	bl	8004138 <__multadd>
 8003d8c:	45b8      	cmp	r8, r7
 8003d8e:	4682      	mov	sl, r0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	f04f 020a 	mov.w	r2, #10
 8003d98:	4641      	mov	r1, r8
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	d107      	bne.n	8003dae <_dtoa_r+0xb1e>
 8003d9e:	f000 f9cb 	bl	8004138 <__multadd>
 8003da2:	4680      	mov	r8, r0
 8003da4:	4607      	mov	r7, r0
 8003da6:	9b04      	ldr	r3, [sp, #16]
 8003da8:	3301      	adds	r3, #1
 8003daa:	9304      	str	r3, [sp, #16]
 8003dac:	e775      	b.n	8003c9a <_dtoa_r+0xa0a>
 8003dae:	f000 f9c3 	bl	8004138 <__multadd>
 8003db2:	4639      	mov	r1, r7
 8003db4:	4680      	mov	r8, r0
 8003db6:	2300      	movs	r3, #0
 8003db8:	220a      	movs	r2, #10
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f000 f9bc 	bl	8004138 <__multadd>
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	e7f0      	b.n	8003da6 <_dtoa_r+0xb16>
 8003dc4:	9b04      	ldr	r3, [sp, #16]
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	9d00      	ldr	r5, [sp, #0]
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4650      	mov	r0, sl
 8003dce:	f7ff f9d7 	bl	8003180 <quorem>
 8003dd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003dd6:	9b00      	ldr	r3, [sp, #0]
 8003dd8:	f805 9b01 	strb.w	r9, [r5], #1
 8003ddc:	1aea      	subs	r2, r5, r3
 8003dde:	9b01      	ldr	r3, [sp, #4]
 8003de0:	4293      	cmp	r3, r2
 8003de2:	dd07      	ble.n	8003df4 <_dtoa_r+0xb64>
 8003de4:	4651      	mov	r1, sl
 8003de6:	2300      	movs	r3, #0
 8003de8:	220a      	movs	r2, #10
 8003dea:	4620      	mov	r0, r4
 8003dec:	f000 f9a4 	bl	8004138 <__multadd>
 8003df0:	4682      	mov	sl, r0
 8003df2:	e7ea      	b.n	8003dca <_dtoa_r+0xb3a>
 8003df4:	9b01      	ldr	r3, [sp, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bfc8      	it	gt
 8003dfa:	461d      	movgt	r5, r3
 8003dfc:	9b00      	ldr	r3, [sp, #0]
 8003dfe:	bfd8      	it	le
 8003e00:	2501      	movle	r5, #1
 8003e02:	441d      	add	r5, r3
 8003e04:	f04f 0800 	mov.w	r8, #0
 8003e08:	4651      	mov	r1, sl
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 fb8b 	bl	8004528 <__lshift>
 8003e12:	4631      	mov	r1, r6
 8003e14:	4682      	mov	sl, r0
 8003e16:	f000 fbf3 	bl	8004600 <__mcmp>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	dc96      	bgt.n	8003d4c <_dtoa_r+0xabc>
 8003e1e:	d102      	bne.n	8003e26 <_dtoa_r+0xb96>
 8003e20:	f019 0f01 	tst.w	r9, #1
 8003e24:	d192      	bne.n	8003d4c <_dtoa_r+0xabc>
 8003e26:	462b      	mov	r3, r5
 8003e28:	461d      	mov	r5, r3
 8003e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003e2e:	2a30      	cmp	r2, #48	; 0x30
 8003e30:	d0fa      	beq.n	8003e28 <_dtoa_r+0xb98>
 8003e32:	e6dd      	b.n	8003bf0 <_dtoa_r+0x960>
 8003e34:	9a00      	ldr	r2, [sp, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d189      	bne.n	8003d4e <_dtoa_r+0xabe>
 8003e3a:	f10b 0b01 	add.w	fp, fp, #1
 8003e3e:	2331      	movs	r3, #49	; 0x31
 8003e40:	e796      	b.n	8003d70 <_dtoa_r+0xae0>
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <_dtoa_r+0xbdc>)
 8003e44:	f7ff ba99 	b.w	800337a <_dtoa_r+0xea>
 8003e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f47f aa6d 	bne.w	800332a <_dtoa_r+0x9a>
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <_dtoa_r+0xbe0>)
 8003e52:	f7ff ba92 	b.w	800337a <_dtoa_r+0xea>
 8003e56:	9b01      	ldr	r3, [sp, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	dcb5      	bgt.n	8003dc8 <_dtoa_r+0xb38>
 8003e5c:	9b07      	ldr	r3, [sp, #28]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	f73f aeb1 	bgt.w	8003bc6 <_dtoa_r+0x936>
 8003e64:	e7b0      	b.n	8003dc8 <_dtoa_r+0xb38>
 8003e66:	bf00      	nop
 8003e68:	08006fa5 	.word	0x08006fa5
 8003e6c:	08006f00 	.word	0x08006f00
 8003e70:	08006f29 	.word	0x08006f29

08003e74 <_free_r>:
 8003e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e76:	2900      	cmp	r1, #0
 8003e78:	d044      	beq.n	8003f04 <_free_r+0x90>
 8003e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e7e:	9001      	str	r0, [sp, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f1a1 0404 	sub.w	r4, r1, #4
 8003e86:	bfb8      	it	lt
 8003e88:	18e4      	addlt	r4, r4, r3
 8003e8a:	f000 f8e7 	bl	800405c <__malloc_lock>
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <_free_r+0x94>)
 8003e90:	9801      	ldr	r0, [sp, #4]
 8003e92:	6813      	ldr	r3, [r2, #0]
 8003e94:	b933      	cbnz	r3, 8003ea4 <_free_r+0x30>
 8003e96:	6063      	str	r3, [r4, #4]
 8003e98:	6014      	str	r4, [r2, #0]
 8003e9a:	b003      	add	sp, #12
 8003e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ea0:	f000 b8e2 	b.w	8004068 <__malloc_unlock>
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	d908      	bls.n	8003eba <_free_r+0x46>
 8003ea8:	6825      	ldr	r5, [r4, #0]
 8003eaa:	1961      	adds	r1, r4, r5
 8003eac:	428b      	cmp	r3, r1
 8003eae:	bf01      	itttt	eq
 8003eb0:	6819      	ldreq	r1, [r3, #0]
 8003eb2:	685b      	ldreq	r3, [r3, #4]
 8003eb4:	1949      	addeq	r1, r1, r5
 8003eb6:	6021      	streq	r1, [r4, #0]
 8003eb8:	e7ed      	b.n	8003e96 <_free_r+0x22>
 8003eba:	461a      	mov	r2, r3
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	b10b      	cbz	r3, 8003ec4 <_free_r+0x50>
 8003ec0:	42a3      	cmp	r3, r4
 8003ec2:	d9fa      	bls.n	8003eba <_free_r+0x46>
 8003ec4:	6811      	ldr	r1, [r2, #0]
 8003ec6:	1855      	adds	r5, r2, r1
 8003ec8:	42a5      	cmp	r5, r4
 8003eca:	d10b      	bne.n	8003ee4 <_free_r+0x70>
 8003ecc:	6824      	ldr	r4, [r4, #0]
 8003ece:	4421      	add	r1, r4
 8003ed0:	1854      	adds	r4, r2, r1
 8003ed2:	42a3      	cmp	r3, r4
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	d1e0      	bne.n	8003e9a <_free_r+0x26>
 8003ed8:	681c      	ldr	r4, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	6053      	str	r3, [r2, #4]
 8003ede:	440c      	add	r4, r1
 8003ee0:	6014      	str	r4, [r2, #0]
 8003ee2:	e7da      	b.n	8003e9a <_free_r+0x26>
 8003ee4:	d902      	bls.n	8003eec <_free_r+0x78>
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	6003      	str	r3, [r0, #0]
 8003eea:	e7d6      	b.n	8003e9a <_free_r+0x26>
 8003eec:	6825      	ldr	r5, [r4, #0]
 8003eee:	1961      	adds	r1, r4, r5
 8003ef0:	428b      	cmp	r3, r1
 8003ef2:	bf04      	itt	eq
 8003ef4:	6819      	ldreq	r1, [r3, #0]
 8003ef6:	685b      	ldreq	r3, [r3, #4]
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	bf04      	itt	eq
 8003efc:	1949      	addeq	r1, r1, r5
 8003efe:	6021      	streq	r1, [r4, #0]
 8003f00:	6054      	str	r4, [r2, #4]
 8003f02:	e7ca      	b.n	8003e9a <_free_r+0x26>
 8003f04:	b003      	add	sp, #12
 8003f06:	bd30      	pop	{r4, r5, pc}
 8003f08:	200005e4 	.word	0x200005e4

08003f0c <malloc>:
 8003f0c:	4b02      	ldr	r3, [pc, #8]	; (8003f18 <malloc+0xc>)
 8003f0e:	4601      	mov	r1, r0
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	f000 b823 	b.w	8003f5c <_malloc_r>
 8003f16:	bf00      	nop
 8003f18:	20000058 	.word	0x20000058

08003f1c <sbrk_aligned>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	4e0e      	ldr	r6, [pc, #56]	; (8003f58 <sbrk_aligned+0x3c>)
 8003f20:	460c      	mov	r4, r1
 8003f22:	6831      	ldr	r1, [r6, #0]
 8003f24:	4605      	mov	r5, r0
 8003f26:	b911      	cbnz	r1, 8003f2e <sbrk_aligned+0x12>
 8003f28:	f001 fe1a 	bl	8005b60 <_sbrk_r>
 8003f2c:	6030      	str	r0, [r6, #0]
 8003f2e:	4621      	mov	r1, r4
 8003f30:	4628      	mov	r0, r5
 8003f32:	f001 fe15 	bl	8005b60 <_sbrk_r>
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	d00a      	beq.n	8003f50 <sbrk_aligned+0x34>
 8003f3a:	1cc4      	adds	r4, r0, #3
 8003f3c:	f024 0403 	bic.w	r4, r4, #3
 8003f40:	42a0      	cmp	r0, r4
 8003f42:	d007      	beq.n	8003f54 <sbrk_aligned+0x38>
 8003f44:	1a21      	subs	r1, r4, r0
 8003f46:	4628      	mov	r0, r5
 8003f48:	f001 fe0a 	bl	8005b60 <_sbrk_r>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d101      	bne.n	8003f54 <sbrk_aligned+0x38>
 8003f50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f54:	4620      	mov	r0, r4
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	200005e8 	.word	0x200005e8

08003f5c <_malloc_r>:
 8003f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f60:	1ccd      	adds	r5, r1, #3
 8003f62:	f025 0503 	bic.w	r5, r5, #3
 8003f66:	3508      	adds	r5, #8
 8003f68:	2d0c      	cmp	r5, #12
 8003f6a:	bf38      	it	cc
 8003f6c:	250c      	movcc	r5, #12
 8003f6e:	2d00      	cmp	r5, #0
 8003f70:	4607      	mov	r7, r0
 8003f72:	db01      	blt.n	8003f78 <_malloc_r+0x1c>
 8003f74:	42a9      	cmp	r1, r5
 8003f76:	d905      	bls.n	8003f84 <_malloc_r+0x28>
 8003f78:	230c      	movs	r3, #12
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	4630      	mov	r0, r6
 8003f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004058 <_malloc_r+0xfc>
 8003f88:	f000 f868 	bl	800405c <__malloc_lock>
 8003f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f90:	461c      	mov	r4, r3
 8003f92:	bb5c      	cbnz	r4, 8003fec <_malloc_r+0x90>
 8003f94:	4629      	mov	r1, r5
 8003f96:	4638      	mov	r0, r7
 8003f98:	f7ff ffc0 	bl	8003f1c <sbrk_aligned>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	d155      	bne.n	800404e <_malloc_r+0xf2>
 8003fa2:	f8d8 4000 	ldr.w	r4, [r8]
 8003fa6:	4626      	mov	r6, r4
 8003fa8:	2e00      	cmp	r6, #0
 8003faa:	d145      	bne.n	8004038 <_malloc_r+0xdc>
 8003fac:	2c00      	cmp	r4, #0
 8003fae:	d048      	beq.n	8004042 <_malloc_r+0xe6>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	eb04 0903 	add.w	r9, r4, r3
 8003fba:	f001 fdd1 	bl	8005b60 <_sbrk_r>
 8003fbe:	4581      	cmp	r9, r0
 8003fc0:	d13f      	bne.n	8004042 <_malloc_r+0xe6>
 8003fc2:	6821      	ldr	r1, [r4, #0]
 8003fc4:	1a6d      	subs	r5, r5, r1
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f7ff ffa7 	bl	8003f1c <sbrk_aligned>
 8003fce:	3001      	adds	r0, #1
 8003fd0:	d037      	beq.n	8004042 <_malloc_r+0xe6>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	442b      	add	r3, r5
 8003fd6:	6023      	str	r3, [r4, #0]
 8003fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d038      	beq.n	8004052 <_malloc_r+0xf6>
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	42a2      	cmp	r2, r4
 8003fe4:	d12b      	bne.n	800403e <_malloc_r+0xe2>
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e00f      	b.n	800400c <_malloc_r+0xb0>
 8003fec:	6822      	ldr	r2, [r4, #0]
 8003fee:	1b52      	subs	r2, r2, r5
 8003ff0:	d41f      	bmi.n	8004032 <_malloc_r+0xd6>
 8003ff2:	2a0b      	cmp	r2, #11
 8003ff4:	d917      	bls.n	8004026 <_malloc_r+0xca>
 8003ff6:	1961      	adds	r1, r4, r5
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	6025      	str	r5, [r4, #0]
 8003ffc:	bf18      	it	ne
 8003ffe:	6059      	strne	r1, [r3, #4]
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	bf08      	it	eq
 8004004:	f8c8 1000 	streq.w	r1, [r8]
 8004008:	5162      	str	r2, [r4, r5]
 800400a:	604b      	str	r3, [r1, #4]
 800400c:	4638      	mov	r0, r7
 800400e:	f104 060b 	add.w	r6, r4, #11
 8004012:	f000 f829 	bl	8004068 <__malloc_unlock>
 8004016:	f026 0607 	bic.w	r6, r6, #7
 800401a:	1d23      	adds	r3, r4, #4
 800401c:	1af2      	subs	r2, r6, r3
 800401e:	d0ae      	beq.n	8003f7e <_malloc_r+0x22>
 8004020:	1b9b      	subs	r3, r3, r6
 8004022:	50a3      	str	r3, [r4, r2]
 8004024:	e7ab      	b.n	8003f7e <_malloc_r+0x22>
 8004026:	42a3      	cmp	r3, r4
 8004028:	6862      	ldr	r2, [r4, #4]
 800402a:	d1dd      	bne.n	8003fe8 <_malloc_r+0x8c>
 800402c:	f8c8 2000 	str.w	r2, [r8]
 8004030:	e7ec      	b.n	800400c <_malloc_r+0xb0>
 8004032:	4623      	mov	r3, r4
 8004034:	6864      	ldr	r4, [r4, #4]
 8004036:	e7ac      	b.n	8003f92 <_malloc_r+0x36>
 8004038:	4634      	mov	r4, r6
 800403a:	6876      	ldr	r6, [r6, #4]
 800403c:	e7b4      	b.n	8003fa8 <_malloc_r+0x4c>
 800403e:	4613      	mov	r3, r2
 8004040:	e7cc      	b.n	8003fdc <_malloc_r+0x80>
 8004042:	230c      	movs	r3, #12
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	4638      	mov	r0, r7
 8004048:	f000 f80e 	bl	8004068 <__malloc_unlock>
 800404c:	e797      	b.n	8003f7e <_malloc_r+0x22>
 800404e:	6025      	str	r5, [r4, #0]
 8004050:	e7dc      	b.n	800400c <_malloc_r+0xb0>
 8004052:	605b      	str	r3, [r3, #4]
 8004054:	deff      	udf	#255	; 0xff
 8004056:	bf00      	nop
 8004058:	200005e4 	.word	0x200005e4

0800405c <__malloc_lock>:
 800405c:	4801      	ldr	r0, [pc, #4]	; (8004064 <__malloc_lock+0x8>)
 800405e:	f7ff b886 	b.w	800316e <__retarget_lock_acquire_recursive>
 8004062:	bf00      	nop
 8004064:	200005e0 	.word	0x200005e0

08004068 <__malloc_unlock>:
 8004068:	4801      	ldr	r0, [pc, #4]	; (8004070 <__malloc_unlock+0x8>)
 800406a:	f7ff b881 	b.w	8003170 <__retarget_lock_release_recursive>
 800406e:	bf00      	nop
 8004070:	200005e0 	.word	0x200005e0

08004074 <_Balloc>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	69c6      	ldr	r6, [r0, #28]
 8004078:	4604      	mov	r4, r0
 800407a:	460d      	mov	r5, r1
 800407c:	b976      	cbnz	r6, 800409c <_Balloc+0x28>
 800407e:	2010      	movs	r0, #16
 8004080:	f7ff ff44 	bl	8003f0c <malloc>
 8004084:	4602      	mov	r2, r0
 8004086:	61e0      	str	r0, [r4, #28]
 8004088:	b920      	cbnz	r0, 8004094 <_Balloc+0x20>
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <_Balloc+0x78>)
 800408c:	4818      	ldr	r0, [pc, #96]	; (80040f0 <_Balloc+0x7c>)
 800408e:	216b      	movs	r1, #107	; 0x6b
 8004090:	f001 fd8e 	bl	8005bb0 <__assert_func>
 8004094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004098:	6006      	str	r6, [r0, #0]
 800409a:	60c6      	str	r6, [r0, #12]
 800409c:	69e6      	ldr	r6, [r4, #28]
 800409e:	68f3      	ldr	r3, [r6, #12]
 80040a0:	b183      	cbz	r3, 80040c4 <_Balloc+0x50>
 80040a2:	69e3      	ldr	r3, [r4, #28]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80040aa:	b9b8      	cbnz	r0, 80040dc <_Balloc+0x68>
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f605 	lsl.w	r6, r1, r5
 80040b2:	1d72      	adds	r2, r6, #5
 80040b4:	0092      	lsls	r2, r2, #2
 80040b6:	4620      	mov	r0, r4
 80040b8:	f001 fd98 	bl	8005bec <_calloc_r>
 80040bc:	b160      	cbz	r0, 80040d8 <_Balloc+0x64>
 80040be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80040c2:	e00e      	b.n	80040e2 <_Balloc+0x6e>
 80040c4:	2221      	movs	r2, #33	; 0x21
 80040c6:	2104      	movs	r1, #4
 80040c8:	4620      	mov	r0, r4
 80040ca:	f001 fd8f 	bl	8005bec <_calloc_r>
 80040ce:	69e3      	ldr	r3, [r4, #28]
 80040d0:	60f0      	str	r0, [r6, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e4      	bne.n	80040a2 <_Balloc+0x2e>
 80040d8:	2000      	movs	r0, #0
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	6802      	ldr	r2, [r0, #0]
 80040de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80040e2:	2300      	movs	r3, #0
 80040e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80040e8:	e7f7      	b.n	80040da <_Balloc+0x66>
 80040ea:	bf00      	nop
 80040ec:	08006f36 	.word	0x08006f36
 80040f0:	08006fb6 	.word	0x08006fb6

080040f4 <_Bfree>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	69c6      	ldr	r6, [r0, #28]
 80040f8:	4605      	mov	r5, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	b976      	cbnz	r6, 800411c <_Bfree+0x28>
 80040fe:	2010      	movs	r0, #16
 8004100:	f7ff ff04 	bl	8003f0c <malloc>
 8004104:	4602      	mov	r2, r0
 8004106:	61e8      	str	r0, [r5, #28]
 8004108:	b920      	cbnz	r0, 8004114 <_Bfree+0x20>
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <_Bfree+0x3c>)
 800410c:	4809      	ldr	r0, [pc, #36]	; (8004134 <_Bfree+0x40>)
 800410e:	218f      	movs	r1, #143	; 0x8f
 8004110:	f001 fd4e 	bl	8005bb0 <__assert_func>
 8004114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004118:	6006      	str	r6, [r0, #0]
 800411a:	60c6      	str	r6, [r0, #12]
 800411c:	b13c      	cbz	r4, 800412e <_Bfree+0x3a>
 800411e:	69eb      	ldr	r3, [r5, #28]
 8004120:	6862      	ldr	r2, [r4, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004128:	6021      	str	r1, [r4, #0]
 800412a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	08006f36 	.word	0x08006f36
 8004134:	08006fb6 	.word	0x08006fb6

08004138 <__multadd>:
 8004138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413c:	690d      	ldr	r5, [r1, #16]
 800413e:	4607      	mov	r7, r0
 8004140:	460c      	mov	r4, r1
 8004142:	461e      	mov	r6, r3
 8004144:	f101 0c14 	add.w	ip, r1, #20
 8004148:	2000      	movs	r0, #0
 800414a:	f8dc 3000 	ldr.w	r3, [ip]
 800414e:	b299      	uxth	r1, r3
 8004150:	fb02 6101 	mla	r1, r2, r1, r6
 8004154:	0c1e      	lsrs	r6, r3, #16
 8004156:	0c0b      	lsrs	r3, r1, #16
 8004158:	fb02 3306 	mla	r3, r2, r6, r3
 800415c:	b289      	uxth	r1, r1
 800415e:	3001      	adds	r0, #1
 8004160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004164:	4285      	cmp	r5, r0
 8004166:	f84c 1b04 	str.w	r1, [ip], #4
 800416a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800416e:	dcec      	bgt.n	800414a <__multadd+0x12>
 8004170:	b30e      	cbz	r6, 80041b6 <__multadd+0x7e>
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	42ab      	cmp	r3, r5
 8004176:	dc19      	bgt.n	80041ac <__multadd+0x74>
 8004178:	6861      	ldr	r1, [r4, #4]
 800417a:	4638      	mov	r0, r7
 800417c:	3101      	adds	r1, #1
 800417e:	f7ff ff79 	bl	8004074 <_Balloc>
 8004182:	4680      	mov	r8, r0
 8004184:	b928      	cbnz	r0, 8004192 <__multadd+0x5a>
 8004186:	4602      	mov	r2, r0
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <__multadd+0x84>)
 800418a:	480d      	ldr	r0, [pc, #52]	; (80041c0 <__multadd+0x88>)
 800418c:	21ba      	movs	r1, #186	; 0xba
 800418e:	f001 fd0f 	bl	8005bb0 <__assert_func>
 8004192:	6922      	ldr	r2, [r4, #16]
 8004194:	3202      	adds	r2, #2
 8004196:	f104 010c 	add.w	r1, r4, #12
 800419a:	0092      	lsls	r2, r2, #2
 800419c:	300c      	adds	r0, #12
 800419e:	f001 fcef 	bl	8005b80 <memcpy>
 80041a2:	4621      	mov	r1, r4
 80041a4:	4638      	mov	r0, r7
 80041a6:	f7ff ffa5 	bl	80040f4 <_Bfree>
 80041aa:	4644      	mov	r4, r8
 80041ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80041b0:	3501      	adds	r5, #1
 80041b2:	615e      	str	r6, [r3, #20]
 80041b4:	6125      	str	r5, [r4, #16]
 80041b6:	4620      	mov	r0, r4
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041bc:	08006fa5 	.word	0x08006fa5
 80041c0:	08006fb6 	.word	0x08006fb6

080041c4 <__s2b>:
 80041c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041c8:	460c      	mov	r4, r1
 80041ca:	4615      	mov	r5, r2
 80041cc:	461f      	mov	r7, r3
 80041ce:	2209      	movs	r2, #9
 80041d0:	3308      	adds	r3, #8
 80041d2:	4606      	mov	r6, r0
 80041d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80041d8:	2100      	movs	r1, #0
 80041da:	2201      	movs	r2, #1
 80041dc:	429a      	cmp	r2, r3
 80041de:	db09      	blt.n	80041f4 <__s2b+0x30>
 80041e0:	4630      	mov	r0, r6
 80041e2:	f7ff ff47 	bl	8004074 <_Balloc>
 80041e6:	b940      	cbnz	r0, 80041fa <__s2b+0x36>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b19      	ldr	r3, [pc, #100]	; (8004250 <__s2b+0x8c>)
 80041ec:	4819      	ldr	r0, [pc, #100]	; (8004254 <__s2b+0x90>)
 80041ee:	21d3      	movs	r1, #211	; 0xd3
 80041f0:	f001 fcde 	bl	8005bb0 <__assert_func>
 80041f4:	0052      	lsls	r2, r2, #1
 80041f6:	3101      	adds	r1, #1
 80041f8:	e7f0      	b.n	80041dc <__s2b+0x18>
 80041fa:	9b08      	ldr	r3, [sp, #32]
 80041fc:	6143      	str	r3, [r0, #20]
 80041fe:	2d09      	cmp	r5, #9
 8004200:	f04f 0301 	mov.w	r3, #1
 8004204:	6103      	str	r3, [r0, #16]
 8004206:	dd16      	ble.n	8004236 <__s2b+0x72>
 8004208:	f104 0909 	add.w	r9, r4, #9
 800420c:	46c8      	mov	r8, r9
 800420e:	442c      	add	r4, r5
 8004210:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004214:	4601      	mov	r1, r0
 8004216:	3b30      	subs	r3, #48	; 0x30
 8004218:	220a      	movs	r2, #10
 800421a:	4630      	mov	r0, r6
 800421c:	f7ff ff8c 	bl	8004138 <__multadd>
 8004220:	45a0      	cmp	r8, r4
 8004222:	d1f5      	bne.n	8004210 <__s2b+0x4c>
 8004224:	f1a5 0408 	sub.w	r4, r5, #8
 8004228:	444c      	add	r4, r9
 800422a:	1b2d      	subs	r5, r5, r4
 800422c:	1963      	adds	r3, r4, r5
 800422e:	42bb      	cmp	r3, r7
 8004230:	db04      	blt.n	800423c <__s2b+0x78>
 8004232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004236:	340a      	adds	r4, #10
 8004238:	2509      	movs	r5, #9
 800423a:	e7f6      	b.n	800422a <__s2b+0x66>
 800423c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004240:	4601      	mov	r1, r0
 8004242:	3b30      	subs	r3, #48	; 0x30
 8004244:	220a      	movs	r2, #10
 8004246:	4630      	mov	r0, r6
 8004248:	f7ff ff76 	bl	8004138 <__multadd>
 800424c:	e7ee      	b.n	800422c <__s2b+0x68>
 800424e:	bf00      	nop
 8004250:	08006fa5 	.word	0x08006fa5
 8004254:	08006fb6 	.word	0x08006fb6

08004258 <__hi0bits>:
 8004258:	0c03      	lsrs	r3, r0, #16
 800425a:	041b      	lsls	r3, r3, #16
 800425c:	b9d3      	cbnz	r3, 8004294 <__hi0bits+0x3c>
 800425e:	0400      	lsls	r0, r0, #16
 8004260:	2310      	movs	r3, #16
 8004262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004266:	bf04      	itt	eq
 8004268:	0200      	lsleq	r0, r0, #8
 800426a:	3308      	addeq	r3, #8
 800426c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004270:	bf04      	itt	eq
 8004272:	0100      	lsleq	r0, r0, #4
 8004274:	3304      	addeq	r3, #4
 8004276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800427a:	bf04      	itt	eq
 800427c:	0080      	lsleq	r0, r0, #2
 800427e:	3302      	addeq	r3, #2
 8004280:	2800      	cmp	r0, #0
 8004282:	db05      	blt.n	8004290 <__hi0bits+0x38>
 8004284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004288:	f103 0301 	add.w	r3, r3, #1
 800428c:	bf08      	it	eq
 800428e:	2320      	moveq	r3, #32
 8004290:	4618      	mov	r0, r3
 8004292:	4770      	bx	lr
 8004294:	2300      	movs	r3, #0
 8004296:	e7e4      	b.n	8004262 <__hi0bits+0xa>

08004298 <__lo0bits>:
 8004298:	6803      	ldr	r3, [r0, #0]
 800429a:	f013 0207 	ands.w	r2, r3, #7
 800429e:	d00c      	beq.n	80042ba <__lo0bits+0x22>
 80042a0:	07d9      	lsls	r1, r3, #31
 80042a2:	d422      	bmi.n	80042ea <__lo0bits+0x52>
 80042a4:	079a      	lsls	r2, r3, #30
 80042a6:	bf49      	itett	mi
 80042a8:	085b      	lsrmi	r3, r3, #1
 80042aa:	089b      	lsrpl	r3, r3, #2
 80042ac:	6003      	strmi	r3, [r0, #0]
 80042ae:	2201      	movmi	r2, #1
 80042b0:	bf5c      	itt	pl
 80042b2:	6003      	strpl	r3, [r0, #0]
 80042b4:	2202      	movpl	r2, #2
 80042b6:	4610      	mov	r0, r2
 80042b8:	4770      	bx	lr
 80042ba:	b299      	uxth	r1, r3
 80042bc:	b909      	cbnz	r1, 80042c2 <__lo0bits+0x2a>
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	2210      	movs	r2, #16
 80042c2:	b2d9      	uxtb	r1, r3
 80042c4:	b909      	cbnz	r1, 80042ca <__lo0bits+0x32>
 80042c6:	3208      	adds	r2, #8
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	0719      	lsls	r1, r3, #28
 80042cc:	bf04      	itt	eq
 80042ce:	091b      	lsreq	r3, r3, #4
 80042d0:	3204      	addeq	r2, #4
 80042d2:	0799      	lsls	r1, r3, #30
 80042d4:	bf04      	itt	eq
 80042d6:	089b      	lsreq	r3, r3, #2
 80042d8:	3202      	addeq	r2, #2
 80042da:	07d9      	lsls	r1, r3, #31
 80042dc:	d403      	bmi.n	80042e6 <__lo0bits+0x4e>
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	f102 0201 	add.w	r2, r2, #1
 80042e4:	d003      	beq.n	80042ee <__lo0bits+0x56>
 80042e6:	6003      	str	r3, [r0, #0]
 80042e8:	e7e5      	b.n	80042b6 <__lo0bits+0x1e>
 80042ea:	2200      	movs	r2, #0
 80042ec:	e7e3      	b.n	80042b6 <__lo0bits+0x1e>
 80042ee:	2220      	movs	r2, #32
 80042f0:	e7e1      	b.n	80042b6 <__lo0bits+0x1e>
	...

080042f4 <__i2b>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	460c      	mov	r4, r1
 80042f8:	2101      	movs	r1, #1
 80042fa:	f7ff febb 	bl	8004074 <_Balloc>
 80042fe:	4602      	mov	r2, r0
 8004300:	b928      	cbnz	r0, 800430e <__i2b+0x1a>
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <__i2b+0x24>)
 8004304:	4805      	ldr	r0, [pc, #20]	; (800431c <__i2b+0x28>)
 8004306:	f240 1145 	movw	r1, #325	; 0x145
 800430a:	f001 fc51 	bl	8005bb0 <__assert_func>
 800430e:	2301      	movs	r3, #1
 8004310:	6144      	str	r4, [r0, #20]
 8004312:	6103      	str	r3, [r0, #16]
 8004314:	bd10      	pop	{r4, pc}
 8004316:	bf00      	nop
 8004318:	08006fa5 	.word	0x08006fa5
 800431c:	08006fb6 	.word	0x08006fb6

08004320 <__multiply>:
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	4691      	mov	r9, r2
 8004326:	690a      	ldr	r2, [r1, #16]
 8004328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800432c:	429a      	cmp	r2, r3
 800432e:	bfb8      	it	lt
 8004330:	460b      	movlt	r3, r1
 8004332:	460c      	mov	r4, r1
 8004334:	bfbc      	itt	lt
 8004336:	464c      	movlt	r4, r9
 8004338:	4699      	movlt	r9, r3
 800433a:	6927      	ldr	r7, [r4, #16]
 800433c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004340:	68a3      	ldr	r3, [r4, #8]
 8004342:	6861      	ldr	r1, [r4, #4]
 8004344:	eb07 060a 	add.w	r6, r7, sl
 8004348:	42b3      	cmp	r3, r6
 800434a:	b085      	sub	sp, #20
 800434c:	bfb8      	it	lt
 800434e:	3101      	addlt	r1, #1
 8004350:	f7ff fe90 	bl	8004074 <_Balloc>
 8004354:	b930      	cbnz	r0, 8004364 <__multiply+0x44>
 8004356:	4602      	mov	r2, r0
 8004358:	4b44      	ldr	r3, [pc, #272]	; (800446c <__multiply+0x14c>)
 800435a:	4845      	ldr	r0, [pc, #276]	; (8004470 <__multiply+0x150>)
 800435c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004360:	f001 fc26 	bl	8005bb0 <__assert_func>
 8004364:	f100 0514 	add.w	r5, r0, #20
 8004368:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800436c:	462b      	mov	r3, r5
 800436e:	2200      	movs	r2, #0
 8004370:	4543      	cmp	r3, r8
 8004372:	d321      	bcc.n	80043b8 <__multiply+0x98>
 8004374:	f104 0314 	add.w	r3, r4, #20
 8004378:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800437c:	f109 0314 	add.w	r3, r9, #20
 8004380:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004384:	9202      	str	r2, [sp, #8]
 8004386:	1b3a      	subs	r2, r7, r4
 8004388:	3a15      	subs	r2, #21
 800438a:	f022 0203 	bic.w	r2, r2, #3
 800438e:	3204      	adds	r2, #4
 8004390:	f104 0115 	add.w	r1, r4, #21
 8004394:	428f      	cmp	r7, r1
 8004396:	bf38      	it	cc
 8004398:	2204      	movcc	r2, #4
 800439a:	9201      	str	r2, [sp, #4]
 800439c:	9a02      	ldr	r2, [sp, #8]
 800439e:	9303      	str	r3, [sp, #12]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d80c      	bhi.n	80043be <__multiply+0x9e>
 80043a4:	2e00      	cmp	r6, #0
 80043a6:	dd03      	ble.n	80043b0 <__multiply+0x90>
 80043a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d05b      	beq.n	8004468 <__multiply+0x148>
 80043b0:	6106      	str	r6, [r0, #16]
 80043b2:	b005      	add	sp, #20
 80043b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b8:	f843 2b04 	str.w	r2, [r3], #4
 80043bc:	e7d8      	b.n	8004370 <__multiply+0x50>
 80043be:	f8b3 a000 	ldrh.w	sl, [r3]
 80043c2:	f1ba 0f00 	cmp.w	sl, #0
 80043c6:	d024      	beq.n	8004412 <__multiply+0xf2>
 80043c8:	f104 0e14 	add.w	lr, r4, #20
 80043cc:	46a9      	mov	r9, r5
 80043ce:	f04f 0c00 	mov.w	ip, #0
 80043d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80043d6:	f8d9 1000 	ldr.w	r1, [r9]
 80043da:	fa1f fb82 	uxth.w	fp, r2
 80043de:	b289      	uxth	r1, r1
 80043e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80043e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80043e8:	f8d9 2000 	ldr.w	r2, [r9]
 80043ec:	4461      	add	r1, ip
 80043ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80043f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80043f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80043fa:	b289      	uxth	r1, r1
 80043fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004400:	4577      	cmp	r7, lr
 8004402:	f849 1b04 	str.w	r1, [r9], #4
 8004406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800440a:	d8e2      	bhi.n	80043d2 <__multiply+0xb2>
 800440c:	9a01      	ldr	r2, [sp, #4]
 800440e:	f845 c002 	str.w	ip, [r5, r2]
 8004412:	9a03      	ldr	r2, [sp, #12]
 8004414:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004418:	3304      	adds	r3, #4
 800441a:	f1b9 0f00 	cmp.w	r9, #0
 800441e:	d021      	beq.n	8004464 <__multiply+0x144>
 8004420:	6829      	ldr	r1, [r5, #0]
 8004422:	f104 0c14 	add.w	ip, r4, #20
 8004426:	46ae      	mov	lr, r5
 8004428:	f04f 0a00 	mov.w	sl, #0
 800442c:	f8bc b000 	ldrh.w	fp, [ip]
 8004430:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004434:	fb09 220b 	mla	r2, r9, fp, r2
 8004438:	4452      	add	r2, sl
 800443a:	b289      	uxth	r1, r1
 800443c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004440:	f84e 1b04 	str.w	r1, [lr], #4
 8004444:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004448:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800444c:	f8be 1000 	ldrh.w	r1, [lr]
 8004450:	fb09 110a 	mla	r1, r9, sl, r1
 8004454:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004458:	4567      	cmp	r7, ip
 800445a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800445e:	d8e5      	bhi.n	800442c <__multiply+0x10c>
 8004460:	9a01      	ldr	r2, [sp, #4]
 8004462:	50a9      	str	r1, [r5, r2]
 8004464:	3504      	adds	r5, #4
 8004466:	e799      	b.n	800439c <__multiply+0x7c>
 8004468:	3e01      	subs	r6, #1
 800446a:	e79b      	b.n	80043a4 <__multiply+0x84>
 800446c:	08006fa5 	.word	0x08006fa5
 8004470:	08006fb6 	.word	0x08006fb6

08004474 <__pow5mult>:
 8004474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004478:	4615      	mov	r5, r2
 800447a:	f012 0203 	ands.w	r2, r2, #3
 800447e:	4606      	mov	r6, r0
 8004480:	460f      	mov	r7, r1
 8004482:	d007      	beq.n	8004494 <__pow5mult+0x20>
 8004484:	4c25      	ldr	r4, [pc, #148]	; (800451c <__pow5mult+0xa8>)
 8004486:	3a01      	subs	r2, #1
 8004488:	2300      	movs	r3, #0
 800448a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800448e:	f7ff fe53 	bl	8004138 <__multadd>
 8004492:	4607      	mov	r7, r0
 8004494:	10ad      	asrs	r5, r5, #2
 8004496:	d03d      	beq.n	8004514 <__pow5mult+0xa0>
 8004498:	69f4      	ldr	r4, [r6, #28]
 800449a:	b97c      	cbnz	r4, 80044bc <__pow5mult+0x48>
 800449c:	2010      	movs	r0, #16
 800449e:	f7ff fd35 	bl	8003f0c <malloc>
 80044a2:	4602      	mov	r2, r0
 80044a4:	61f0      	str	r0, [r6, #28]
 80044a6:	b928      	cbnz	r0, 80044b4 <__pow5mult+0x40>
 80044a8:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <__pow5mult+0xac>)
 80044aa:	481e      	ldr	r0, [pc, #120]	; (8004524 <__pow5mult+0xb0>)
 80044ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80044b0:	f001 fb7e 	bl	8005bb0 <__assert_func>
 80044b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80044b8:	6004      	str	r4, [r0, #0]
 80044ba:	60c4      	str	r4, [r0, #12]
 80044bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80044c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80044c4:	b94c      	cbnz	r4, 80044da <__pow5mult+0x66>
 80044c6:	f240 2171 	movw	r1, #625	; 0x271
 80044ca:	4630      	mov	r0, r6
 80044cc:	f7ff ff12 	bl	80042f4 <__i2b>
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80044d6:	4604      	mov	r4, r0
 80044d8:	6003      	str	r3, [r0, #0]
 80044da:	f04f 0900 	mov.w	r9, #0
 80044de:	07eb      	lsls	r3, r5, #31
 80044e0:	d50a      	bpl.n	80044f8 <__pow5mult+0x84>
 80044e2:	4639      	mov	r1, r7
 80044e4:	4622      	mov	r2, r4
 80044e6:	4630      	mov	r0, r6
 80044e8:	f7ff ff1a 	bl	8004320 <__multiply>
 80044ec:	4639      	mov	r1, r7
 80044ee:	4680      	mov	r8, r0
 80044f0:	4630      	mov	r0, r6
 80044f2:	f7ff fdff 	bl	80040f4 <_Bfree>
 80044f6:	4647      	mov	r7, r8
 80044f8:	106d      	asrs	r5, r5, #1
 80044fa:	d00b      	beq.n	8004514 <__pow5mult+0xa0>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	b938      	cbnz	r0, 8004510 <__pow5mult+0x9c>
 8004500:	4622      	mov	r2, r4
 8004502:	4621      	mov	r1, r4
 8004504:	4630      	mov	r0, r6
 8004506:	f7ff ff0b 	bl	8004320 <__multiply>
 800450a:	6020      	str	r0, [r4, #0]
 800450c:	f8c0 9000 	str.w	r9, [r0]
 8004510:	4604      	mov	r4, r0
 8004512:	e7e4      	b.n	80044de <__pow5mult+0x6a>
 8004514:	4638      	mov	r0, r7
 8004516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800451a:	bf00      	nop
 800451c:	08007100 	.word	0x08007100
 8004520:	08006f36 	.word	0x08006f36
 8004524:	08006fb6 	.word	0x08006fb6

08004528 <__lshift>:
 8004528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800452c:	460c      	mov	r4, r1
 800452e:	6849      	ldr	r1, [r1, #4]
 8004530:	6923      	ldr	r3, [r4, #16]
 8004532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004536:	68a3      	ldr	r3, [r4, #8]
 8004538:	4607      	mov	r7, r0
 800453a:	4691      	mov	r9, r2
 800453c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004540:	f108 0601 	add.w	r6, r8, #1
 8004544:	42b3      	cmp	r3, r6
 8004546:	db0b      	blt.n	8004560 <__lshift+0x38>
 8004548:	4638      	mov	r0, r7
 800454a:	f7ff fd93 	bl	8004074 <_Balloc>
 800454e:	4605      	mov	r5, r0
 8004550:	b948      	cbnz	r0, 8004566 <__lshift+0x3e>
 8004552:	4602      	mov	r2, r0
 8004554:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <__lshift+0xd0>)
 8004556:	4829      	ldr	r0, [pc, #164]	; (80045fc <__lshift+0xd4>)
 8004558:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800455c:	f001 fb28 	bl	8005bb0 <__assert_func>
 8004560:	3101      	adds	r1, #1
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	e7ee      	b.n	8004544 <__lshift+0x1c>
 8004566:	2300      	movs	r3, #0
 8004568:	f100 0114 	add.w	r1, r0, #20
 800456c:	f100 0210 	add.w	r2, r0, #16
 8004570:	4618      	mov	r0, r3
 8004572:	4553      	cmp	r3, sl
 8004574:	db33      	blt.n	80045de <__lshift+0xb6>
 8004576:	6920      	ldr	r0, [r4, #16]
 8004578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800457c:	f104 0314 	add.w	r3, r4, #20
 8004580:	f019 091f 	ands.w	r9, r9, #31
 8004584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004588:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800458c:	d02b      	beq.n	80045e6 <__lshift+0xbe>
 800458e:	f1c9 0e20 	rsb	lr, r9, #32
 8004592:	468a      	mov	sl, r1
 8004594:	2200      	movs	r2, #0
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	fa00 f009 	lsl.w	r0, r0, r9
 800459c:	4310      	orrs	r0, r2
 800459e:	f84a 0b04 	str.w	r0, [sl], #4
 80045a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a6:	459c      	cmp	ip, r3
 80045a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80045ac:	d8f3      	bhi.n	8004596 <__lshift+0x6e>
 80045ae:	ebac 0304 	sub.w	r3, ip, r4
 80045b2:	3b15      	subs	r3, #21
 80045b4:	f023 0303 	bic.w	r3, r3, #3
 80045b8:	3304      	adds	r3, #4
 80045ba:	f104 0015 	add.w	r0, r4, #21
 80045be:	4584      	cmp	ip, r0
 80045c0:	bf38      	it	cc
 80045c2:	2304      	movcc	r3, #4
 80045c4:	50ca      	str	r2, [r1, r3]
 80045c6:	b10a      	cbz	r2, 80045cc <__lshift+0xa4>
 80045c8:	f108 0602 	add.w	r6, r8, #2
 80045cc:	3e01      	subs	r6, #1
 80045ce:	4638      	mov	r0, r7
 80045d0:	612e      	str	r6, [r5, #16]
 80045d2:	4621      	mov	r1, r4
 80045d4:	f7ff fd8e 	bl	80040f4 <_Bfree>
 80045d8:	4628      	mov	r0, r5
 80045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045de:	f842 0f04 	str.w	r0, [r2, #4]!
 80045e2:	3301      	adds	r3, #1
 80045e4:	e7c5      	b.n	8004572 <__lshift+0x4a>
 80045e6:	3904      	subs	r1, #4
 80045e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80045f0:	459c      	cmp	ip, r3
 80045f2:	d8f9      	bhi.n	80045e8 <__lshift+0xc0>
 80045f4:	e7ea      	b.n	80045cc <__lshift+0xa4>
 80045f6:	bf00      	nop
 80045f8:	08006fa5 	.word	0x08006fa5
 80045fc:	08006fb6 	.word	0x08006fb6

08004600 <__mcmp>:
 8004600:	b530      	push	{r4, r5, lr}
 8004602:	6902      	ldr	r2, [r0, #16]
 8004604:	690c      	ldr	r4, [r1, #16]
 8004606:	1b12      	subs	r2, r2, r4
 8004608:	d10e      	bne.n	8004628 <__mcmp+0x28>
 800460a:	f100 0314 	add.w	r3, r0, #20
 800460e:	3114      	adds	r1, #20
 8004610:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004614:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004618:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800461c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004620:	42a5      	cmp	r5, r4
 8004622:	d003      	beq.n	800462c <__mcmp+0x2c>
 8004624:	d305      	bcc.n	8004632 <__mcmp+0x32>
 8004626:	2201      	movs	r2, #1
 8004628:	4610      	mov	r0, r2
 800462a:	bd30      	pop	{r4, r5, pc}
 800462c:	4283      	cmp	r3, r0
 800462e:	d3f3      	bcc.n	8004618 <__mcmp+0x18>
 8004630:	e7fa      	b.n	8004628 <__mcmp+0x28>
 8004632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004636:	e7f7      	b.n	8004628 <__mcmp+0x28>

08004638 <__mdiff>:
 8004638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463c:	460c      	mov	r4, r1
 800463e:	4606      	mov	r6, r0
 8004640:	4611      	mov	r1, r2
 8004642:	4620      	mov	r0, r4
 8004644:	4690      	mov	r8, r2
 8004646:	f7ff ffdb 	bl	8004600 <__mcmp>
 800464a:	1e05      	subs	r5, r0, #0
 800464c:	d110      	bne.n	8004670 <__mdiff+0x38>
 800464e:	4629      	mov	r1, r5
 8004650:	4630      	mov	r0, r6
 8004652:	f7ff fd0f 	bl	8004074 <_Balloc>
 8004656:	b930      	cbnz	r0, 8004666 <__mdiff+0x2e>
 8004658:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <__mdiff+0x10c>)
 800465a:	4602      	mov	r2, r0
 800465c:	f240 2137 	movw	r1, #567	; 0x237
 8004660:	4839      	ldr	r0, [pc, #228]	; (8004748 <__mdiff+0x110>)
 8004662:	f001 faa5 	bl	8005bb0 <__assert_func>
 8004666:	2301      	movs	r3, #1
 8004668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800466c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004670:	bfa4      	itt	ge
 8004672:	4643      	movge	r3, r8
 8004674:	46a0      	movge	r8, r4
 8004676:	4630      	mov	r0, r6
 8004678:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800467c:	bfa6      	itte	ge
 800467e:	461c      	movge	r4, r3
 8004680:	2500      	movge	r5, #0
 8004682:	2501      	movlt	r5, #1
 8004684:	f7ff fcf6 	bl	8004074 <_Balloc>
 8004688:	b920      	cbnz	r0, 8004694 <__mdiff+0x5c>
 800468a:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <__mdiff+0x10c>)
 800468c:	4602      	mov	r2, r0
 800468e:	f240 2145 	movw	r1, #581	; 0x245
 8004692:	e7e5      	b.n	8004660 <__mdiff+0x28>
 8004694:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004698:	6926      	ldr	r6, [r4, #16]
 800469a:	60c5      	str	r5, [r0, #12]
 800469c:	f104 0914 	add.w	r9, r4, #20
 80046a0:	f108 0514 	add.w	r5, r8, #20
 80046a4:	f100 0e14 	add.w	lr, r0, #20
 80046a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80046ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80046b0:	f108 0210 	add.w	r2, r8, #16
 80046b4:	46f2      	mov	sl, lr
 80046b6:	2100      	movs	r1, #0
 80046b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80046bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80046c0:	fa11 f88b 	uxtah	r8, r1, fp
 80046c4:	b299      	uxth	r1, r3
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	eba8 0801 	sub.w	r8, r8, r1
 80046cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80046d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80046d4:	fa1f f888 	uxth.w	r8, r8
 80046d8:	1419      	asrs	r1, r3, #16
 80046da:	454e      	cmp	r6, r9
 80046dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80046e0:	f84a 3b04 	str.w	r3, [sl], #4
 80046e4:	d8e8      	bhi.n	80046b8 <__mdiff+0x80>
 80046e6:	1b33      	subs	r3, r6, r4
 80046e8:	3b15      	subs	r3, #21
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	3304      	adds	r3, #4
 80046f0:	3415      	adds	r4, #21
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	bf38      	it	cc
 80046f6:	2304      	movcc	r3, #4
 80046f8:	441d      	add	r5, r3
 80046fa:	4473      	add	r3, lr
 80046fc:	469e      	mov	lr, r3
 80046fe:	462e      	mov	r6, r5
 8004700:	4566      	cmp	r6, ip
 8004702:	d30e      	bcc.n	8004722 <__mdiff+0xea>
 8004704:	f10c 0203 	add.w	r2, ip, #3
 8004708:	1b52      	subs	r2, r2, r5
 800470a:	f022 0203 	bic.w	r2, r2, #3
 800470e:	3d03      	subs	r5, #3
 8004710:	45ac      	cmp	ip, r5
 8004712:	bf38      	it	cc
 8004714:	2200      	movcc	r2, #0
 8004716:	4413      	add	r3, r2
 8004718:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800471c:	b17a      	cbz	r2, 800473e <__mdiff+0x106>
 800471e:	6107      	str	r7, [r0, #16]
 8004720:	e7a4      	b.n	800466c <__mdiff+0x34>
 8004722:	f856 8b04 	ldr.w	r8, [r6], #4
 8004726:	fa11 f288 	uxtah	r2, r1, r8
 800472a:	1414      	asrs	r4, r2, #16
 800472c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004730:	b292      	uxth	r2, r2
 8004732:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004736:	f84e 2b04 	str.w	r2, [lr], #4
 800473a:	1421      	asrs	r1, r4, #16
 800473c:	e7e0      	b.n	8004700 <__mdiff+0xc8>
 800473e:	3f01      	subs	r7, #1
 8004740:	e7ea      	b.n	8004718 <__mdiff+0xe0>
 8004742:	bf00      	nop
 8004744:	08006fa5 	.word	0x08006fa5
 8004748:	08006fb6 	.word	0x08006fb6

0800474c <__ulp>:
 800474c:	b082      	sub	sp, #8
 800474e:	ed8d 0b00 	vstr	d0, [sp]
 8004752:	9a01      	ldr	r2, [sp, #4]
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <__ulp+0x48>)
 8004756:	4013      	ands	r3, r2
 8004758:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800475c:	2b00      	cmp	r3, #0
 800475e:	dc08      	bgt.n	8004772 <__ulp+0x26>
 8004760:	425b      	negs	r3, r3
 8004762:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004766:	ea4f 5223 	mov.w	r2, r3, asr #20
 800476a:	da04      	bge.n	8004776 <__ulp+0x2a>
 800476c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004770:	4113      	asrs	r3, r2
 8004772:	2200      	movs	r2, #0
 8004774:	e008      	b.n	8004788 <__ulp+0x3c>
 8004776:	f1a2 0314 	sub.w	r3, r2, #20
 800477a:	2b1e      	cmp	r3, #30
 800477c:	bfda      	itte	le
 800477e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8004782:	40da      	lsrle	r2, r3
 8004784:	2201      	movgt	r2, #1
 8004786:	2300      	movs	r3, #0
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	ec41 0b10 	vmov	d0, r0, r1
 8004790:	b002      	add	sp, #8
 8004792:	4770      	bx	lr
 8004794:	7ff00000 	.word	0x7ff00000

08004798 <__b2d>:
 8004798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800479c:	6906      	ldr	r6, [r0, #16]
 800479e:	f100 0814 	add.w	r8, r0, #20
 80047a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80047a6:	1f37      	subs	r7, r6, #4
 80047a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7ff fd53 	bl	8004258 <__hi0bits>
 80047b2:	f1c0 0320 	rsb	r3, r0, #32
 80047b6:	280a      	cmp	r0, #10
 80047b8:	600b      	str	r3, [r1, #0]
 80047ba:	491b      	ldr	r1, [pc, #108]	; (8004828 <__b2d+0x90>)
 80047bc:	dc15      	bgt.n	80047ea <__b2d+0x52>
 80047be:	f1c0 0c0b 	rsb	ip, r0, #11
 80047c2:	fa22 f30c 	lsr.w	r3, r2, ip
 80047c6:	45b8      	cmp	r8, r7
 80047c8:	ea43 0501 	orr.w	r5, r3, r1
 80047cc:	bf34      	ite	cc
 80047ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80047d2:	2300      	movcs	r3, #0
 80047d4:	3015      	adds	r0, #21
 80047d6:	fa02 f000 	lsl.w	r0, r2, r0
 80047da:	fa23 f30c 	lsr.w	r3, r3, ip
 80047de:	4303      	orrs	r3, r0
 80047e0:	461c      	mov	r4, r3
 80047e2:	ec45 4b10 	vmov	d0, r4, r5
 80047e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ea:	45b8      	cmp	r8, r7
 80047ec:	bf3a      	itte	cc
 80047ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80047f2:	f1a6 0708 	subcc.w	r7, r6, #8
 80047f6:	2300      	movcs	r3, #0
 80047f8:	380b      	subs	r0, #11
 80047fa:	d012      	beq.n	8004822 <__b2d+0x8a>
 80047fc:	f1c0 0120 	rsb	r1, r0, #32
 8004800:	fa23 f401 	lsr.w	r4, r3, r1
 8004804:	4082      	lsls	r2, r0
 8004806:	4322      	orrs	r2, r4
 8004808:	4547      	cmp	r7, r8
 800480a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800480e:	bf8c      	ite	hi
 8004810:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8004814:	2200      	movls	r2, #0
 8004816:	4083      	lsls	r3, r0
 8004818:	40ca      	lsrs	r2, r1
 800481a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800481e:	4313      	orrs	r3, r2
 8004820:	e7de      	b.n	80047e0 <__b2d+0x48>
 8004822:	ea42 0501 	orr.w	r5, r2, r1
 8004826:	e7db      	b.n	80047e0 <__b2d+0x48>
 8004828:	3ff00000 	.word	0x3ff00000

0800482c <__d2b>:
 800482c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004830:	460f      	mov	r7, r1
 8004832:	2101      	movs	r1, #1
 8004834:	ec59 8b10 	vmov	r8, r9, d0
 8004838:	4616      	mov	r6, r2
 800483a:	f7ff fc1b 	bl	8004074 <_Balloc>
 800483e:	4604      	mov	r4, r0
 8004840:	b930      	cbnz	r0, 8004850 <__d2b+0x24>
 8004842:	4602      	mov	r2, r0
 8004844:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <__d2b+0xac>)
 8004846:	4825      	ldr	r0, [pc, #148]	; (80048dc <__d2b+0xb0>)
 8004848:	f240 310f 	movw	r1, #783	; 0x30f
 800484c:	f001 f9b0 	bl	8005bb0 <__assert_func>
 8004850:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004854:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004858:	bb2d      	cbnz	r5, 80048a6 <__d2b+0x7a>
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	f1b8 0300 	subs.w	r3, r8, #0
 8004860:	d026      	beq.n	80048b0 <__d2b+0x84>
 8004862:	4668      	mov	r0, sp
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	f7ff fd17 	bl	8004298 <__lo0bits>
 800486a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800486e:	b1e8      	cbz	r0, 80048ac <__d2b+0x80>
 8004870:	f1c0 0320 	rsb	r3, r0, #32
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	430b      	orrs	r3, r1
 800487a:	40c2      	lsrs	r2, r0
 800487c:	6163      	str	r3, [r4, #20]
 800487e:	9201      	str	r2, [sp, #4]
 8004880:	9b01      	ldr	r3, [sp, #4]
 8004882:	61a3      	str	r3, [r4, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2202      	movne	r2, #2
 800488a:	2201      	moveq	r2, #1
 800488c:	6122      	str	r2, [r4, #16]
 800488e:	b1bd      	cbz	r5, 80048c0 <__d2b+0x94>
 8004890:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004894:	4405      	add	r5, r0
 8004896:	603d      	str	r5, [r7, #0]
 8004898:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800489c:	6030      	str	r0, [r6, #0]
 800489e:	4620      	mov	r0, r4
 80048a0:	b003      	add	sp, #12
 80048a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048aa:	e7d6      	b.n	800485a <__d2b+0x2e>
 80048ac:	6161      	str	r1, [r4, #20]
 80048ae:	e7e7      	b.n	8004880 <__d2b+0x54>
 80048b0:	a801      	add	r0, sp, #4
 80048b2:	f7ff fcf1 	bl	8004298 <__lo0bits>
 80048b6:	9b01      	ldr	r3, [sp, #4]
 80048b8:	6163      	str	r3, [r4, #20]
 80048ba:	3020      	adds	r0, #32
 80048bc:	2201      	movs	r2, #1
 80048be:	e7e5      	b.n	800488c <__d2b+0x60>
 80048c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80048c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80048c8:	6038      	str	r0, [r7, #0]
 80048ca:	6918      	ldr	r0, [r3, #16]
 80048cc:	f7ff fcc4 	bl	8004258 <__hi0bits>
 80048d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80048d4:	e7e2      	b.n	800489c <__d2b+0x70>
 80048d6:	bf00      	nop
 80048d8:	08006fa5 	.word	0x08006fa5
 80048dc:	08006fb6 	.word	0x08006fb6

080048e0 <__ratio>:
 80048e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e4:	4688      	mov	r8, r1
 80048e6:	4669      	mov	r1, sp
 80048e8:	4681      	mov	r9, r0
 80048ea:	f7ff ff55 	bl	8004798 <__b2d>
 80048ee:	a901      	add	r1, sp, #4
 80048f0:	4640      	mov	r0, r8
 80048f2:	ec55 4b10 	vmov	r4, r5, d0
 80048f6:	f7ff ff4f 	bl	8004798 <__b2d>
 80048fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004902:	eba3 0c02 	sub.w	ip, r3, r2
 8004906:	e9dd 3200 	ldrd	r3, r2, [sp]
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004910:	ec51 0b10 	vmov	r0, r1, d0
 8004914:	2b00      	cmp	r3, #0
 8004916:	bfd6      	itet	le
 8004918:	460a      	movle	r2, r1
 800491a:	462a      	movgt	r2, r5
 800491c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004920:	468b      	mov	fp, r1
 8004922:	462f      	mov	r7, r5
 8004924:	bfd4      	ite	le
 8004926:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800492a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800492e:	4620      	mov	r0, r4
 8004930:	ee10 2a10 	vmov	r2, s0
 8004934:	465b      	mov	r3, fp
 8004936:	4639      	mov	r1, r7
 8004938:	f7fb ff90 	bl	800085c <__aeabi_ddiv>
 800493c:	ec41 0b10 	vmov	d0, r0, r1
 8004940:	b003      	add	sp, #12
 8004942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004946 <__copybits>:
 8004946:	3901      	subs	r1, #1
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	1149      	asrs	r1, r1, #5
 800494c:	6914      	ldr	r4, [r2, #16]
 800494e:	3101      	adds	r1, #1
 8004950:	f102 0314 	add.w	r3, r2, #20
 8004954:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004958:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800495c:	1f05      	subs	r5, r0, #4
 800495e:	42a3      	cmp	r3, r4
 8004960:	d30c      	bcc.n	800497c <__copybits+0x36>
 8004962:	1aa3      	subs	r3, r4, r2
 8004964:	3b11      	subs	r3, #17
 8004966:	f023 0303 	bic.w	r3, r3, #3
 800496a:	3211      	adds	r2, #17
 800496c:	42a2      	cmp	r2, r4
 800496e:	bf88      	it	hi
 8004970:	2300      	movhi	r3, #0
 8004972:	4418      	add	r0, r3
 8004974:	2300      	movs	r3, #0
 8004976:	4288      	cmp	r0, r1
 8004978:	d305      	bcc.n	8004986 <__copybits+0x40>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	f853 6b04 	ldr.w	r6, [r3], #4
 8004980:	f845 6f04 	str.w	r6, [r5, #4]!
 8004984:	e7eb      	b.n	800495e <__copybits+0x18>
 8004986:	f840 3b04 	str.w	r3, [r0], #4
 800498a:	e7f4      	b.n	8004976 <__copybits+0x30>

0800498c <__any_on>:
 800498c:	f100 0214 	add.w	r2, r0, #20
 8004990:	6900      	ldr	r0, [r0, #16]
 8004992:	114b      	asrs	r3, r1, #5
 8004994:	4298      	cmp	r0, r3
 8004996:	b510      	push	{r4, lr}
 8004998:	db11      	blt.n	80049be <__any_on+0x32>
 800499a:	dd0a      	ble.n	80049b2 <__any_on+0x26>
 800499c:	f011 011f 	ands.w	r1, r1, #31
 80049a0:	d007      	beq.n	80049b2 <__any_on+0x26>
 80049a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80049a6:	fa24 f001 	lsr.w	r0, r4, r1
 80049aa:	fa00 f101 	lsl.w	r1, r0, r1
 80049ae:	428c      	cmp	r4, r1
 80049b0:	d10b      	bne.n	80049ca <__any_on+0x3e>
 80049b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d803      	bhi.n	80049c2 <__any_on+0x36>
 80049ba:	2000      	movs	r0, #0
 80049bc:	bd10      	pop	{r4, pc}
 80049be:	4603      	mov	r3, r0
 80049c0:	e7f7      	b.n	80049b2 <__any_on+0x26>
 80049c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80049c6:	2900      	cmp	r1, #0
 80049c8:	d0f5      	beq.n	80049b6 <__any_on+0x2a>
 80049ca:	2001      	movs	r0, #1
 80049cc:	e7f6      	b.n	80049bc <__any_on+0x30>

080049ce <sulp>:
 80049ce:	b570      	push	{r4, r5, r6, lr}
 80049d0:	4604      	mov	r4, r0
 80049d2:	460d      	mov	r5, r1
 80049d4:	ec45 4b10 	vmov	d0, r4, r5
 80049d8:	4616      	mov	r6, r2
 80049da:	f7ff feb7 	bl	800474c <__ulp>
 80049de:	ec51 0b10 	vmov	r0, r1, d0
 80049e2:	b17e      	cbz	r6, 8004a04 <sulp+0x36>
 80049e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80049e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	dd09      	ble.n	8004a04 <sulp+0x36>
 80049f0:	051b      	lsls	r3, r3, #20
 80049f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80049f6:	2400      	movs	r4, #0
 80049f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80049fc:	4622      	mov	r2, r4
 80049fe:	462b      	mov	r3, r5
 8004a00:	f7fb fe02 	bl	8000608 <__aeabi_dmul>
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a08 <_strtod_l>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	ed2d 8b02 	vpush	{d8}
 8004a10:	b09b      	sub	sp, #108	; 0x6c
 8004a12:	4604      	mov	r4, r0
 8004a14:	9213      	str	r2, [sp, #76]	; 0x4c
 8004a16:	2200      	movs	r2, #0
 8004a18:	9216      	str	r2, [sp, #88]	; 0x58
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	f04f 0800 	mov.w	r8, #0
 8004a20:	f04f 0900 	mov.w	r9, #0
 8004a24:	460a      	mov	r2, r1
 8004a26:	9215      	str	r2, [sp, #84]	; 0x54
 8004a28:	7811      	ldrb	r1, [r2, #0]
 8004a2a:	292b      	cmp	r1, #43	; 0x2b
 8004a2c:	d04c      	beq.n	8004ac8 <_strtod_l+0xc0>
 8004a2e:	d83a      	bhi.n	8004aa6 <_strtod_l+0x9e>
 8004a30:	290d      	cmp	r1, #13
 8004a32:	d834      	bhi.n	8004a9e <_strtod_l+0x96>
 8004a34:	2908      	cmp	r1, #8
 8004a36:	d834      	bhi.n	8004aa2 <_strtod_l+0x9a>
 8004a38:	2900      	cmp	r1, #0
 8004a3a:	d03d      	beq.n	8004ab8 <_strtod_l+0xb0>
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	920a      	str	r2, [sp, #40]	; 0x28
 8004a40:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004a42:	7832      	ldrb	r2, [r6, #0]
 8004a44:	2a30      	cmp	r2, #48	; 0x30
 8004a46:	f040 80b4 	bne.w	8004bb2 <_strtod_l+0x1aa>
 8004a4a:	7872      	ldrb	r2, [r6, #1]
 8004a4c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004a50:	2a58      	cmp	r2, #88	; 0x58
 8004a52:	d170      	bne.n	8004b36 <_strtod_l+0x12e>
 8004a54:	9302      	str	r3, [sp, #8]
 8004a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	ab16      	add	r3, sp, #88	; 0x58
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4a8e      	ldr	r2, [pc, #568]	; (8004c98 <_strtod_l+0x290>)
 8004a60:	ab17      	add	r3, sp, #92	; 0x5c
 8004a62:	a915      	add	r1, sp, #84	; 0x54
 8004a64:	4620      	mov	r0, r4
 8004a66:	f001 f93f 	bl	8005ce8 <__gethex>
 8004a6a:	f010 070f 	ands.w	r7, r0, #15
 8004a6e:	4605      	mov	r5, r0
 8004a70:	d005      	beq.n	8004a7e <_strtod_l+0x76>
 8004a72:	2f06      	cmp	r7, #6
 8004a74:	d12a      	bne.n	8004acc <_strtod_l+0xc4>
 8004a76:	3601      	adds	r6, #1
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9615      	str	r6, [sp, #84]	; 0x54
 8004a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8004a7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f040 857f 	bne.w	8005584 <_strtod_l+0xb7c>
 8004a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a88:	b1db      	cbz	r3, 8004ac2 <_strtod_l+0xba>
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004a90:	ec43 2b10 	vmov	d0, r2, r3
 8004a94:	b01b      	add	sp, #108	; 0x6c
 8004a96:	ecbd 8b02 	vpop	{d8}
 8004a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9e:	2920      	cmp	r1, #32
 8004aa0:	d1cc      	bne.n	8004a3c <_strtod_l+0x34>
 8004aa2:	3201      	adds	r2, #1
 8004aa4:	e7bf      	b.n	8004a26 <_strtod_l+0x1e>
 8004aa6:	292d      	cmp	r1, #45	; 0x2d
 8004aa8:	d1c8      	bne.n	8004a3c <_strtod_l+0x34>
 8004aaa:	2101      	movs	r1, #1
 8004aac:	910a      	str	r1, [sp, #40]	; 0x28
 8004aae:	1c51      	adds	r1, r2, #1
 8004ab0:	9115      	str	r1, [sp, #84]	; 0x54
 8004ab2:	7852      	ldrb	r2, [r2, #1]
 8004ab4:	2a00      	cmp	r2, #0
 8004ab6:	d1c3      	bne.n	8004a40 <_strtod_l+0x38>
 8004ab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004aba:	9515      	str	r5, [sp, #84]	; 0x54
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f040 855f 	bne.w	8005580 <_strtod_l+0xb78>
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	e7e3      	b.n	8004a90 <_strtod_l+0x88>
 8004ac8:	2100      	movs	r1, #0
 8004aca:	e7ef      	b.n	8004aac <_strtod_l+0xa4>
 8004acc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004ace:	b13a      	cbz	r2, 8004ae0 <_strtod_l+0xd8>
 8004ad0:	2135      	movs	r1, #53	; 0x35
 8004ad2:	a818      	add	r0, sp, #96	; 0x60
 8004ad4:	f7ff ff37 	bl	8004946 <__copybits>
 8004ad8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7ff fb0a 	bl	80040f4 <_Bfree>
 8004ae0:	3f01      	subs	r7, #1
 8004ae2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ae4:	2f04      	cmp	r7, #4
 8004ae6:	d806      	bhi.n	8004af6 <_strtod_l+0xee>
 8004ae8:	e8df f007 	tbb	[pc, r7]
 8004aec:	201d0314 	.word	0x201d0314
 8004af0:	14          	.byte	0x14
 8004af1:	00          	.byte	0x00
 8004af2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8004af6:	05e9      	lsls	r1, r5, #23
 8004af8:	bf48      	it	mi
 8004afa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004afe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b02:	0d1b      	lsrs	r3, r3, #20
 8004b04:	051b      	lsls	r3, r3, #20
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1b9      	bne.n	8004a7e <_strtod_l+0x76>
 8004b0a:	f7fe fb05 	bl	8003118 <__errno>
 8004b0e:	2322      	movs	r3, #34	; 0x22
 8004b10:	6003      	str	r3, [r0, #0]
 8004b12:	e7b4      	b.n	8004a7e <_strtod_l+0x76>
 8004b14:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8004b18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004b1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b20:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004b24:	e7e7      	b.n	8004af6 <_strtod_l+0xee>
 8004b26:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004ca0 <_strtod_l+0x298>
 8004b2a:	e7e4      	b.n	8004af6 <_strtod_l+0xee>
 8004b2c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004b30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004b34:	e7df      	b.n	8004af6 <_strtod_l+0xee>
 8004b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	9215      	str	r2, [sp, #84]	; 0x54
 8004b3c:	785b      	ldrb	r3, [r3, #1]
 8004b3e:	2b30      	cmp	r3, #48	; 0x30
 8004b40:	d0f9      	beq.n	8004b36 <_strtod_l+0x12e>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d09b      	beq.n	8004a7e <_strtod_l+0x76>
 8004b46:	2301      	movs	r3, #1
 8004b48:	f04f 0a00 	mov.w	sl, #0
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b52:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004b56:	46d3      	mov	fp, sl
 8004b58:	220a      	movs	r2, #10
 8004b5a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004b5c:	7806      	ldrb	r6, [r0, #0]
 8004b5e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004b62:	b2d9      	uxtb	r1, r3
 8004b64:	2909      	cmp	r1, #9
 8004b66:	d926      	bls.n	8004bb6 <_strtod_l+0x1ae>
 8004b68:	494c      	ldr	r1, [pc, #304]	; (8004c9c <_strtod_l+0x294>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f000 ffe6 	bl	8005b3c <strncmp>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d030      	beq.n	8004bd6 <_strtod_l+0x1ce>
 8004b74:	2000      	movs	r0, #0
 8004b76:	4632      	mov	r2, r6
 8004b78:	9005      	str	r0, [sp, #20]
 8004b7a:	465e      	mov	r6, fp
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2a65      	cmp	r2, #101	; 0x65
 8004b80:	d001      	beq.n	8004b86 <_strtod_l+0x17e>
 8004b82:	2a45      	cmp	r2, #69	; 0x45
 8004b84:	d113      	bne.n	8004bae <_strtod_l+0x1a6>
 8004b86:	b91e      	cbnz	r6, 8004b90 <_strtod_l+0x188>
 8004b88:	9a04      	ldr	r2, [sp, #16]
 8004b8a:	4302      	orrs	r2, r0
 8004b8c:	d094      	beq.n	8004ab8 <_strtod_l+0xb0>
 8004b8e:	2600      	movs	r6, #0
 8004b90:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004b92:	1c6a      	adds	r2, r5, #1
 8004b94:	9215      	str	r2, [sp, #84]	; 0x54
 8004b96:	786a      	ldrb	r2, [r5, #1]
 8004b98:	2a2b      	cmp	r2, #43	; 0x2b
 8004b9a:	d074      	beq.n	8004c86 <_strtod_l+0x27e>
 8004b9c:	2a2d      	cmp	r2, #45	; 0x2d
 8004b9e:	d078      	beq.n	8004c92 <_strtod_l+0x28a>
 8004ba0:	f04f 0c00 	mov.w	ip, #0
 8004ba4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004ba8:	2909      	cmp	r1, #9
 8004baa:	d97f      	bls.n	8004cac <_strtod_l+0x2a4>
 8004bac:	9515      	str	r5, [sp, #84]	; 0x54
 8004bae:	2700      	movs	r7, #0
 8004bb0:	e09e      	b.n	8004cf0 <_strtod_l+0x2e8>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e7c8      	b.n	8004b48 <_strtod_l+0x140>
 8004bb6:	f1bb 0f08 	cmp.w	fp, #8
 8004bba:	bfd8      	it	le
 8004bbc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004bbe:	f100 0001 	add.w	r0, r0, #1
 8004bc2:	bfda      	itte	le
 8004bc4:	fb02 3301 	mlale	r3, r2, r1, r3
 8004bc8:	9309      	strle	r3, [sp, #36]	; 0x24
 8004bca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004bce:	f10b 0b01 	add.w	fp, fp, #1
 8004bd2:	9015      	str	r0, [sp, #84]	; 0x54
 8004bd4:	e7c1      	b.n	8004b5a <_strtod_l+0x152>
 8004bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	9215      	str	r2, [sp, #84]	; 0x54
 8004bdc:	785a      	ldrb	r2, [r3, #1]
 8004bde:	f1bb 0f00 	cmp.w	fp, #0
 8004be2:	d037      	beq.n	8004c54 <_strtod_l+0x24c>
 8004be4:	9005      	str	r0, [sp, #20]
 8004be6:	465e      	mov	r6, fp
 8004be8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004bec:	2b09      	cmp	r3, #9
 8004bee:	d912      	bls.n	8004c16 <_strtod_l+0x20e>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e7c4      	b.n	8004b7e <_strtod_l+0x176>
 8004bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	9215      	str	r2, [sp, #84]	; 0x54
 8004bfa:	785a      	ldrb	r2, [r3, #1]
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	2a30      	cmp	r2, #48	; 0x30
 8004c00:	d0f8      	beq.n	8004bf4 <_strtod_l+0x1ec>
 8004c02:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	f200 84c1 	bhi.w	800558e <_strtod_l+0xb86>
 8004c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c0e:	9005      	str	r0, [sp, #20]
 8004c10:	2000      	movs	r0, #0
 8004c12:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c14:	4606      	mov	r6, r0
 8004c16:	3a30      	subs	r2, #48	; 0x30
 8004c18:	f100 0301 	add.w	r3, r0, #1
 8004c1c:	d014      	beq.n	8004c48 <_strtod_l+0x240>
 8004c1e:	9905      	ldr	r1, [sp, #20]
 8004c20:	4419      	add	r1, r3
 8004c22:	9105      	str	r1, [sp, #20]
 8004c24:	4633      	mov	r3, r6
 8004c26:	eb00 0c06 	add.w	ip, r0, r6
 8004c2a:	210a      	movs	r1, #10
 8004c2c:	4563      	cmp	r3, ip
 8004c2e:	d113      	bne.n	8004c58 <_strtod_l+0x250>
 8004c30:	1833      	adds	r3, r6, r0
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	f106 0601 	add.w	r6, r6, #1
 8004c38:	4406      	add	r6, r0
 8004c3a:	dc1a      	bgt.n	8004c72 <_strtod_l+0x26a>
 8004c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c3e:	230a      	movs	r3, #10
 8004c40:	fb03 2301 	mla	r3, r3, r1, r2
 8004c44:	9309      	str	r3, [sp, #36]	; 0x24
 8004c46:	2300      	movs	r3, #0
 8004c48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c4a:	1c51      	adds	r1, r2, #1
 8004c4c:	9115      	str	r1, [sp, #84]	; 0x54
 8004c4e:	7852      	ldrb	r2, [r2, #1]
 8004c50:	4618      	mov	r0, r3
 8004c52:	e7c9      	b.n	8004be8 <_strtod_l+0x1e0>
 8004c54:	4658      	mov	r0, fp
 8004c56:	e7d2      	b.n	8004bfe <_strtod_l+0x1f6>
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	f103 0301 	add.w	r3, r3, #1
 8004c5e:	dc03      	bgt.n	8004c68 <_strtod_l+0x260>
 8004c60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004c62:	434f      	muls	r7, r1
 8004c64:	9709      	str	r7, [sp, #36]	; 0x24
 8004c66:	e7e1      	b.n	8004c2c <_strtod_l+0x224>
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	bfd8      	it	le
 8004c6c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004c70:	e7dc      	b.n	8004c2c <_strtod_l+0x224>
 8004c72:	2e10      	cmp	r6, #16
 8004c74:	bfdc      	itt	le
 8004c76:	230a      	movle	r3, #10
 8004c78:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004c7c:	e7e3      	b.n	8004c46 <_strtod_l+0x23e>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	2301      	movs	r3, #1
 8004c84:	e780      	b.n	8004b88 <_strtod_l+0x180>
 8004c86:	f04f 0c00 	mov.w	ip, #0
 8004c8a:	1caa      	adds	r2, r5, #2
 8004c8c:	9215      	str	r2, [sp, #84]	; 0x54
 8004c8e:	78aa      	ldrb	r2, [r5, #2]
 8004c90:	e788      	b.n	8004ba4 <_strtod_l+0x19c>
 8004c92:	f04f 0c01 	mov.w	ip, #1
 8004c96:	e7f8      	b.n	8004c8a <_strtod_l+0x282>
 8004c98:	08007110 	.word	0x08007110
 8004c9c:	0800710c 	.word	0x0800710c
 8004ca0:	7ff00000 	.word	0x7ff00000
 8004ca4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ca6:	1c51      	adds	r1, r2, #1
 8004ca8:	9115      	str	r1, [sp, #84]	; 0x54
 8004caa:	7852      	ldrb	r2, [r2, #1]
 8004cac:	2a30      	cmp	r2, #48	; 0x30
 8004cae:	d0f9      	beq.n	8004ca4 <_strtod_l+0x29c>
 8004cb0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004cb4:	2908      	cmp	r1, #8
 8004cb6:	f63f af7a 	bhi.w	8004bae <_strtod_l+0x1a6>
 8004cba:	3a30      	subs	r2, #48	; 0x30
 8004cbc:	9208      	str	r2, [sp, #32]
 8004cbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004cc0:	920c      	str	r2, [sp, #48]	; 0x30
 8004cc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004cc4:	1c57      	adds	r7, r2, #1
 8004cc6:	9715      	str	r7, [sp, #84]	; 0x54
 8004cc8:	7852      	ldrb	r2, [r2, #1]
 8004cca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004cce:	f1be 0f09 	cmp.w	lr, #9
 8004cd2:	d938      	bls.n	8004d46 <_strtod_l+0x33e>
 8004cd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cd6:	1a7f      	subs	r7, r7, r1
 8004cd8:	2f08      	cmp	r7, #8
 8004cda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004cde:	dc03      	bgt.n	8004ce8 <_strtod_l+0x2e0>
 8004ce0:	9908      	ldr	r1, [sp, #32]
 8004ce2:	428f      	cmp	r7, r1
 8004ce4:	bfa8      	it	ge
 8004ce6:	460f      	movge	r7, r1
 8004ce8:	f1bc 0f00 	cmp.w	ip, #0
 8004cec:	d000      	beq.n	8004cf0 <_strtod_l+0x2e8>
 8004cee:	427f      	negs	r7, r7
 8004cf0:	2e00      	cmp	r6, #0
 8004cf2:	d14f      	bne.n	8004d94 <_strtod_l+0x38c>
 8004cf4:	9904      	ldr	r1, [sp, #16]
 8004cf6:	4301      	orrs	r1, r0
 8004cf8:	f47f aec1 	bne.w	8004a7e <_strtod_l+0x76>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f47f aedb 	bne.w	8004ab8 <_strtod_l+0xb0>
 8004d02:	2a69      	cmp	r2, #105	; 0x69
 8004d04:	d029      	beq.n	8004d5a <_strtod_l+0x352>
 8004d06:	dc26      	bgt.n	8004d56 <_strtod_l+0x34e>
 8004d08:	2a49      	cmp	r2, #73	; 0x49
 8004d0a:	d026      	beq.n	8004d5a <_strtod_l+0x352>
 8004d0c:	2a4e      	cmp	r2, #78	; 0x4e
 8004d0e:	f47f aed3 	bne.w	8004ab8 <_strtod_l+0xb0>
 8004d12:	499b      	ldr	r1, [pc, #620]	; (8004f80 <_strtod_l+0x578>)
 8004d14:	a815      	add	r0, sp, #84	; 0x54
 8004d16:	f001 fa27 	bl	8006168 <__match>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	f43f aecc 	beq.w	8004ab8 <_strtod_l+0xb0>
 8004d20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b28      	cmp	r3, #40	; 0x28
 8004d26:	d12f      	bne.n	8004d88 <_strtod_l+0x380>
 8004d28:	4996      	ldr	r1, [pc, #600]	; (8004f84 <_strtod_l+0x57c>)
 8004d2a:	aa18      	add	r2, sp, #96	; 0x60
 8004d2c:	a815      	add	r0, sp, #84	; 0x54
 8004d2e:	f001 fa2f 	bl	8006190 <__hexnan>
 8004d32:	2805      	cmp	r0, #5
 8004d34:	d128      	bne.n	8004d88 <_strtod_l+0x380>
 8004d36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004d40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004d44:	e69b      	b.n	8004a7e <_strtod_l+0x76>
 8004d46:	9f08      	ldr	r7, [sp, #32]
 8004d48:	210a      	movs	r1, #10
 8004d4a:	fb01 2107 	mla	r1, r1, r7, r2
 8004d4e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004d52:	9208      	str	r2, [sp, #32]
 8004d54:	e7b5      	b.n	8004cc2 <_strtod_l+0x2ba>
 8004d56:	2a6e      	cmp	r2, #110	; 0x6e
 8004d58:	e7d9      	b.n	8004d0e <_strtod_l+0x306>
 8004d5a:	498b      	ldr	r1, [pc, #556]	; (8004f88 <_strtod_l+0x580>)
 8004d5c:	a815      	add	r0, sp, #84	; 0x54
 8004d5e:	f001 fa03 	bl	8006168 <__match>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	f43f aea8 	beq.w	8004ab8 <_strtod_l+0xb0>
 8004d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d6a:	4988      	ldr	r1, [pc, #544]	; (8004f8c <_strtod_l+0x584>)
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	a815      	add	r0, sp, #84	; 0x54
 8004d70:	9315      	str	r3, [sp, #84]	; 0x54
 8004d72:	f001 f9f9 	bl	8006168 <__match>
 8004d76:	b910      	cbnz	r0, 8004d7e <_strtod_l+0x376>
 8004d78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	9315      	str	r3, [sp, #84]	; 0x54
 8004d7e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004f9c <_strtod_l+0x594>
 8004d82:	f04f 0800 	mov.w	r8, #0
 8004d86:	e67a      	b.n	8004a7e <_strtod_l+0x76>
 8004d88:	4881      	ldr	r0, [pc, #516]	; (8004f90 <_strtod_l+0x588>)
 8004d8a:	f000 ff09 	bl	8005ba0 <nan>
 8004d8e:	ec59 8b10 	vmov	r8, r9, d0
 8004d92:	e674      	b.n	8004a7e <_strtod_l+0x76>
 8004d94:	9b05      	ldr	r3, [sp, #20]
 8004d96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d98:	1afb      	subs	r3, r7, r3
 8004d9a:	f1bb 0f00 	cmp.w	fp, #0
 8004d9e:	bf08      	it	eq
 8004da0:	46b3      	moveq	fp, r6
 8004da2:	2e10      	cmp	r6, #16
 8004da4:	9308      	str	r3, [sp, #32]
 8004da6:	4635      	mov	r5, r6
 8004da8:	bfa8      	it	ge
 8004daa:	2510      	movge	r5, #16
 8004dac:	f7fb fbb2 	bl	8000514 <__aeabi_ui2d>
 8004db0:	2e09      	cmp	r6, #9
 8004db2:	4680      	mov	r8, r0
 8004db4:	4689      	mov	r9, r1
 8004db6:	dd13      	ble.n	8004de0 <_strtod_l+0x3d8>
 8004db8:	4b76      	ldr	r3, [pc, #472]	; (8004f94 <_strtod_l+0x58c>)
 8004dba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004dbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004dc2:	f7fb fc21 	bl	8000608 <__aeabi_dmul>
 8004dc6:	4680      	mov	r8, r0
 8004dc8:	4650      	mov	r0, sl
 8004dca:	4689      	mov	r9, r1
 8004dcc:	f7fb fba2 	bl	8000514 <__aeabi_ui2d>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	f7fb fa60 	bl	800029c <__adddf3>
 8004ddc:	4680      	mov	r8, r0
 8004dde:	4689      	mov	r9, r1
 8004de0:	2e0f      	cmp	r6, #15
 8004de2:	dc38      	bgt.n	8004e56 <_strtod_l+0x44e>
 8004de4:	9b08      	ldr	r3, [sp, #32]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f43f ae49 	beq.w	8004a7e <_strtod_l+0x76>
 8004dec:	dd24      	ble.n	8004e38 <_strtod_l+0x430>
 8004dee:	2b16      	cmp	r3, #22
 8004df0:	dc0b      	bgt.n	8004e0a <_strtod_l+0x402>
 8004df2:	4968      	ldr	r1, [pc, #416]	; (8004f94 <_strtod_l+0x58c>)
 8004df4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	f7fb fc02 	bl	8000608 <__aeabi_dmul>
 8004e04:	4680      	mov	r8, r0
 8004e06:	4689      	mov	r9, r1
 8004e08:	e639      	b.n	8004a7e <_strtod_l+0x76>
 8004e0a:	9a08      	ldr	r2, [sp, #32]
 8004e0c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8004e10:	4293      	cmp	r3, r2
 8004e12:	db20      	blt.n	8004e56 <_strtod_l+0x44e>
 8004e14:	4c5f      	ldr	r4, [pc, #380]	; (8004f94 <_strtod_l+0x58c>)
 8004e16:	f1c6 060f 	rsb	r6, r6, #15
 8004e1a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8004e1e:	4642      	mov	r2, r8
 8004e20:	464b      	mov	r3, r9
 8004e22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e26:	f7fb fbef 	bl	8000608 <__aeabi_dmul>
 8004e2a:	9b08      	ldr	r3, [sp, #32]
 8004e2c:	1b9e      	subs	r6, r3, r6
 8004e2e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8004e32:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004e36:	e7e3      	b.n	8004e00 <_strtod_l+0x3f8>
 8004e38:	9b08      	ldr	r3, [sp, #32]
 8004e3a:	3316      	adds	r3, #22
 8004e3c:	db0b      	blt.n	8004e56 <_strtod_l+0x44e>
 8004e3e:	9b05      	ldr	r3, [sp, #20]
 8004e40:	1bdf      	subs	r7, r3, r7
 8004e42:	4b54      	ldr	r3, [pc, #336]	; (8004f94 <_strtod_l+0x58c>)
 8004e44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	4649      	mov	r1, r9
 8004e50:	f7fb fd04 	bl	800085c <__aeabi_ddiv>
 8004e54:	e7d6      	b.n	8004e04 <_strtod_l+0x3fc>
 8004e56:	9b08      	ldr	r3, [sp, #32]
 8004e58:	1b75      	subs	r5, r6, r5
 8004e5a:	441d      	add	r5, r3
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	dd70      	ble.n	8004f42 <_strtod_l+0x53a>
 8004e60:	f015 030f 	ands.w	r3, r5, #15
 8004e64:	d00a      	beq.n	8004e7c <_strtod_l+0x474>
 8004e66:	494b      	ldr	r1, [pc, #300]	; (8004f94 <_strtod_l+0x58c>)
 8004e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e74:	f7fb fbc8 	bl	8000608 <__aeabi_dmul>
 8004e78:	4680      	mov	r8, r0
 8004e7a:	4689      	mov	r9, r1
 8004e7c:	f035 050f 	bics.w	r5, r5, #15
 8004e80:	d04d      	beq.n	8004f1e <_strtod_l+0x516>
 8004e82:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8004e86:	dd22      	ble.n	8004ece <_strtod_l+0x4c6>
 8004e88:	2500      	movs	r5, #0
 8004e8a:	46ab      	mov	fp, r5
 8004e8c:	9509      	str	r5, [sp, #36]	; 0x24
 8004e8e:	9505      	str	r5, [sp, #20]
 8004e90:	2322      	movs	r3, #34	; 0x22
 8004e92:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004f9c <_strtod_l+0x594>
 8004e96:	6023      	str	r3, [r4, #0]
 8004e98:	f04f 0800 	mov.w	r8, #0
 8004e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f43f aded 	beq.w	8004a7e <_strtod_l+0x76>
 8004ea4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f7ff f924 	bl	80040f4 <_Bfree>
 8004eac:	9905      	ldr	r1, [sp, #20]
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f7ff f920 	bl	80040f4 <_Bfree>
 8004eb4:	4659      	mov	r1, fp
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f7ff f91c 	bl	80040f4 <_Bfree>
 8004ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7ff f918 	bl	80040f4 <_Bfree>
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff f914 	bl	80040f4 <_Bfree>
 8004ecc:	e5d7      	b.n	8004a7e <_strtod_l+0x76>
 8004ece:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <_strtod_l+0x590>)
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	112d      	asrs	r5, r5, #4
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	4649      	mov	r1, r9
 8004eda:	469a      	mov	sl, r3
 8004edc:	2d01      	cmp	r5, #1
 8004ede:	dc21      	bgt.n	8004f24 <_strtod_l+0x51c>
 8004ee0:	b10b      	cbz	r3, 8004ee6 <_strtod_l+0x4de>
 8004ee2:	4680      	mov	r8, r0
 8004ee4:	4689      	mov	r9, r1
 8004ee6:	492c      	ldr	r1, [pc, #176]	; (8004f98 <_strtod_l+0x590>)
 8004ee8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004eec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ef8:	f7fb fb86 	bl	8000608 <__aeabi_dmul>
 8004efc:	4b27      	ldr	r3, [pc, #156]	; (8004f9c <_strtod_l+0x594>)
 8004efe:	460a      	mov	r2, r1
 8004f00:	400b      	ands	r3, r1
 8004f02:	4927      	ldr	r1, [pc, #156]	; (8004fa0 <_strtod_l+0x598>)
 8004f04:	428b      	cmp	r3, r1
 8004f06:	4680      	mov	r8, r0
 8004f08:	d8be      	bhi.n	8004e88 <_strtod_l+0x480>
 8004f0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004f0e:	428b      	cmp	r3, r1
 8004f10:	bf86      	itte	hi
 8004f12:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8004fa4 <_strtod_l+0x59c>
 8004f16:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004f1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	e07b      	b.n	800501c <_strtod_l+0x614>
 8004f24:	07ea      	lsls	r2, r5, #31
 8004f26:	d505      	bpl.n	8004f34 <_strtod_l+0x52c>
 8004f28:	9b04      	ldr	r3, [sp, #16]
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f7fb fb6b 	bl	8000608 <__aeabi_dmul>
 8004f32:	2301      	movs	r3, #1
 8004f34:	9a04      	ldr	r2, [sp, #16]
 8004f36:	3208      	adds	r2, #8
 8004f38:	f10a 0a01 	add.w	sl, sl, #1
 8004f3c:	106d      	asrs	r5, r5, #1
 8004f3e:	9204      	str	r2, [sp, #16]
 8004f40:	e7cc      	b.n	8004edc <_strtod_l+0x4d4>
 8004f42:	d0ec      	beq.n	8004f1e <_strtod_l+0x516>
 8004f44:	426d      	negs	r5, r5
 8004f46:	f015 020f 	ands.w	r2, r5, #15
 8004f4a:	d00a      	beq.n	8004f62 <_strtod_l+0x55a>
 8004f4c:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <_strtod_l+0x58c>)
 8004f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f52:	4640      	mov	r0, r8
 8004f54:	4649      	mov	r1, r9
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	f7fb fc7f 	bl	800085c <__aeabi_ddiv>
 8004f5e:	4680      	mov	r8, r0
 8004f60:	4689      	mov	r9, r1
 8004f62:	112d      	asrs	r5, r5, #4
 8004f64:	d0db      	beq.n	8004f1e <_strtod_l+0x516>
 8004f66:	2d1f      	cmp	r5, #31
 8004f68:	dd1e      	ble.n	8004fa8 <_strtod_l+0x5a0>
 8004f6a:	2500      	movs	r5, #0
 8004f6c:	46ab      	mov	fp, r5
 8004f6e:	9509      	str	r5, [sp, #36]	; 0x24
 8004f70:	9505      	str	r5, [sp, #20]
 8004f72:	2322      	movs	r3, #34	; 0x22
 8004f74:	f04f 0800 	mov.w	r8, #0
 8004f78:	f04f 0900 	mov.w	r9, #0
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	e78d      	b.n	8004e9c <_strtod_l+0x494>
 8004f80:	08006efd 	.word	0x08006efd
 8004f84:	08007124 	.word	0x08007124
 8004f88:	08006ef5 	.word	0x08006ef5
 8004f8c:	08006f2c 	.word	0x08006f2c
 8004f90:	080072b5 	.word	0x080072b5
 8004f94:	08007038 	.word	0x08007038
 8004f98:	08007010 	.word	0x08007010
 8004f9c:	7ff00000 	.word	0x7ff00000
 8004fa0:	7ca00000 	.word	0x7ca00000
 8004fa4:	7fefffff 	.word	0x7fefffff
 8004fa8:	f015 0310 	ands.w	r3, r5, #16
 8004fac:	bf18      	it	ne
 8004fae:	236a      	movne	r3, #106	; 0x6a
 8004fb0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8005354 <_strtod_l+0x94c>
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	4649      	mov	r1, r9
 8004fba:	2300      	movs	r3, #0
 8004fbc:	07ea      	lsls	r2, r5, #31
 8004fbe:	d504      	bpl.n	8004fca <_strtod_l+0x5c2>
 8004fc0:	e9da 2300 	ldrd	r2, r3, [sl]
 8004fc4:	f7fb fb20 	bl	8000608 <__aeabi_dmul>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	106d      	asrs	r5, r5, #1
 8004fcc:	f10a 0a08 	add.w	sl, sl, #8
 8004fd0:	d1f4      	bne.n	8004fbc <_strtod_l+0x5b4>
 8004fd2:	b10b      	cbz	r3, 8004fd8 <_strtod_l+0x5d0>
 8004fd4:	4680      	mov	r8, r0
 8004fd6:	4689      	mov	r9, r1
 8004fd8:	9b04      	ldr	r3, [sp, #16]
 8004fda:	b1bb      	cbz	r3, 800500c <_strtod_l+0x604>
 8004fdc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004fe0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	dd10      	ble.n	800500c <_strtod_l+0x604>
 8004fea:	2b1f      	cmp	r3, #31
 8004fec:	f340 811e 	ble.w	800522c <_strtod_l+0x824>
 8004ff0:	2b34      	cmp	r3, #52	; 0x34
 8004ff2:	bfde      	ittt	le
 8004ff4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004ff8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004ffc:	4093      	lslle	r3, r2
 8004ffe:	f04f 0800 	mov.w	r8, #0
 8005002:	bfcc      	ite	gt
 8005004:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005008:	ea03 0901 	andle.w	r9, r3, r1
 800500c:	2200      	movs	r2, #0
 800500e:	2300      	movs	r3, #0
 8005010:	4640      	mov	r0, r8
 8005012:	4649      	mov	r1, r9
 8005014:	f7fb fd60 	bl	8000ad8 <__aeabi_dcmpeq>
 8005018:	2800      	cmp	r0, #0
 800501a:	d1a6      	bne.n	8004f6a <_strtod_l+0x562>
 800501c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005022:	4633      	mov	r3, r6
 8005024:	465a      	mov	r2, fp
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff f8cc 	bl	80041c4 <__s2b>
 800502c:	9009      	str	r0, [sp, #36]	; 0x24
 800502e:	2800      	cmp	r0, #0
 8005030:	f43f af2a 	beq.w	8004e88 <_strtod_l+0x480>
 8005034:	9a08      	ldr	r2, [sp, #32]
 8005036:	9b05      	ldr	r3, [sp, #20]
 8005038:	2a00      	cmp	r2, #0
 800503a:	eba3 0307 	sub.w	r3, r3, r7
 800503e:	bfa8      	it	ge
 8005040:	2300      	movge	r3, #0
 8005042:	930c      	str	r3, [sp, #48]	; 0x30
 8005044:	2500      	movs	r5, #0
 8005046:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800504a:	9312      	str	r3, [sp, #72]	; 0x48
 800504c:	46ab      	mov	fp, r5
 800504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005050:	4620      	mov	r0, r4
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	f7ff f80e 	bl	8004074 <_Balloc>
 8005058:	9005      	str	r0, [sp, #20]
 800505a:	2800      	cmp	r0, #0
 800505c:	f43f af18 	beq.w	8004e90 <_strtod_l+0x488>
 8005060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	3202      	adds	r2, #2
 8005066:	f103 010c 	add.w	r1, r3, #12
 800506a:	0092      	lsls	r2, r2, #2
 800506c:	300c      	adds	r0, #12
 800506e:	f000 fd87 	bl	8005b80 <memcpy>
 8005072:	ec49 8b10 	vmov	d0, r8, r9
 8005076:	aa18      	add	r2, sp, #96	; 0x60
 8005078:	a917      	add	r1, sp, #92	; 0x5c
 800507a:	4620      	mov	r0, r4
 800507c:	f7ff fbd6 	bl	800482c <__d2b>
 8005080:	ec49 8b18 	vmov	d8, r8, r9
 8005084:	9016      	str	r0, [sp, #88]	; 0x58
 8005086:	2800      	cmp	r0, #0
 8005088:	f43f af02 	beq.w	8004e90 <_strtod_l+0x488>
 800508c:	2101      	movs	r1, #1
 800508e:	4620      	mov	r0, r4
 8005090:	f7ff f930 	bl	80042f4 <__i2b>
 8005094:	4683      	mov	fp, r0
 8005096:	2800      	cmp	r0, #0
 8005098:	f43f aefa 	beq.w	8004e90 <_strtod_l+0x488>
 800509c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800509e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80050a0:	2e00      	cmp	r6, #0
 80050a2:	bfab      	itete	ge
 80050a4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80050a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80050a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80050aa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80050ae:	bfac      	ite	ge
 80050b0:	eb06 0a03 	addge.w	sl, r6, r3
 80050b4:	1b9f      	sublt	r7, r3, r6
 80050b6:	9b04      	ldr	r3, [sp, #16]
 80050b8:	1af6      	subs	r6, r6, r3
 80050ba:	4416      	add	r6, r2
 80050bc:	4ba0      	ldr	r3, [pc, #640]	; (8005340 <_strtod_l+0x938>)
 80050be:	3e01      	subs	r6, #1
 80050c0:	429e      	cmp	r6, r3
 80050c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80050c6:	f280 80c4 	bge.w	8005252 <_strtod_l+0x84a>
 80050ca:	1b9b      	subs	r3, r3, r6
 80050cc:	2b1f      	cmp	r3, #31
 80050ce:	eba2 0203 	sub.w	r2, r2, r3
 80050d2:	f04f 0101 	mov.w	r1, #1
 80050d6:	f300 80b0 	bgt.w	800523a <_strtod_l+0x832>
 80050da:	fa01 f303 	lsl.w	r3, r1, r3
 80050de:	930e      	str	r3, [sp, #56]	; 0x38
 80050e0:	2300      	movs	r3, #0
 80050e2:	930d      	str	r3, [sp, #52]	; 0x34
 80050e4:	eb0a 0602 	add.w	r6, sl, r2
 80050e8:	9b04      	ldr	r3, [sp, #16]
 80050ea:	45b2      	cmp	sl, r6
 80050ec:	4417      	add	r7, r2
 80050ee:	441f      	add	r7, r3
 80050f0:	4653      	mov	r3, sl
 80050f2:	bfa8      	it	ge
 80050f4:	4633      	movge	r3, r6
 80050f6:	42bb      	cmp	r3, r7
 80050f8:	bfa8      	it	ge
 80050fa:	463b      	movge	r3, r7
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bfc2      	ittt	gt
 8005100:	1af6      	subgt	r6, r6, r3
 8005102:	1aff      	subgt	r7, r7, r3
 8005104:	ebaa 0a03 	subgt.w	sl, sl, r3
 8005108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800510a:	2b00      	cmp	r3, #0
 800510c:	dd17      	ble.n	800513e <_strtod_l+0x736>
 800510e:	4659      	mov	r1, fp
 8005110:	461a      	mov	r2, r3
 8005112:	4620      	mov	r0, r4
 8005114:	f7ff f9ae 	bl	8004474 <__pow5mult>
 8005118:	4683      	mov	fp, r0
 800511a:	2800      	cmp	r0, #0
 800511c:	f43f aeb8 	beq.w	8004e90 <_strtod_l+0x488>
 8005120:	4601      	mov	r1, r0
 8005122:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005124:	4620      	mov	r0, r4
 8005126:	f7ff f8fb 	bl	8004320 <__multiply>
 800512a:	900b      	str	r0, [sp, #44]	; 0x2c
 800512c:	2800      	cmp	r0, #0
 800512e:	f43f aeaf 	beq.w	8004e90 <_strtod_l+0x488>
 8005132:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005134:	4620      	mov	r0, r4
 8005136:	f7fe ffdd 	bl	80040f4 <_Bfree>
 800513a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800513c:	9316      	str	r3, [sp, #88]	; 0x58
 800513e:	2e00      	cmp	r6, #0
 8005140:	f300 808c 	bgt.w	800525c <_strtod_l+0x854>
 8005144:	9b08      	ldr	r3, [sp, #32]
 8005146:	2b00      	cmp	r3, #0
 8005148:	dd08      	ble.n	800515c <_strtod_l+0x754>
 800514a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800514c:	9905      	ldr	r1, [sp, #20]
 800514e:	4620      	mov	r0, r4
 8005150:	f7ff f990 	bl	8004474 <__pow5mult>
 8005154:	9005      	str	r0, [sp, #20]
 8005156:	2800      	cmp	r0, #0
 8005158:	f43f ae9a 	beq.w	8004e90 <_strtod_l+0x488>
 800515c:	2f00      	cmp	r7, #0
 800515e:	dd08      	ble.n	8005172 <_strtod_l+0x76a>
 8005160:	9905      	ldr	r1, [sp, #20]
 8005162:	463a      	mov	r2, r7
 8005164:	4620      	mov	r0, r4
 8005166:	f7ff f9df 	bl	8004528 <__lshift>
 800516a:	9005      	str	r0, [sp, #20]
 800516c:	2800      	cmp	r0, #0
 800516e:	f43f ae8f 	beq.w	8004e90 <_strtod_l+0x488>
 8005172:	f1ba 0f00 	cmp.w	sl, #0
 8005176:	dd08      	ble.n	800518a <_strtod_l+0x782>
 8005178:	4659      	mov	r1, fp
 800517a:	4652      	mov	r2, sl
 800517c:	4620      	mov	r0, r4
 800517e:	f7ff f9d3 	bl	8004528 <__lshift>
 8005182:	4683      	mov	fp, r0
 8005184:	2800      	cmp	r0, #0
 8005186:	f43f ae83 	beq.w	8004e90 <_strtod_l+0x488>
 800518a:	9a05      	ldr	r2, [sp, #20]
 800518c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800518e:	4620      	mov	r0, r4
 8005190:	f7ff fa52 	bl	8004638 <__mdiff>
 8005194:	4605      	mov	r5, r0
 8005196:	2800      	cmp	r0, #0
 8005198:	f43f ae7a 	beq.w	8004e90 <_strtod_l+0x488>
 800519c:	68c3      	ldr	r3, [r0, #12]
 800519e:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a0:	2300      	movs	r3, #0
 80051a2:	60c3      	str	r3, [r0, #12]
 80051a4:	4659      	mov	r1, fp
 80051a6:	f7ff fa2b 	bl	8004600 <__mcmp>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	da60      	bge.n	8005270 <_strtod_l+0x868>
 80051ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b0:	ea53 0308 	orrs.w	r3, r3, r8
 80051b4:	f040 8084 	bne.w	80052c0 <_strtod_l+0x8b8>
 80051b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d17f      	bne.n	80052c0 <_strtod_l+0x8b8>
 80051c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051c4:	0d1b      	lsrs	r3, r3, #20
 80051c6:	051b      	lsls	r3, r3, #20
 80051c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80051cc:	d978      	bls.n	80052c0 <_strtod_l+0x8b8>
 80051ce:	696b      	ldr	r3, [r5, #20]
 80051d0:	b913      	cbnz	r3, 80051d8 <_strtod_l+0x7d0>
 80051d2:	692b      	ldr	r3, [r5, #16]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	dd73      	ble.n	80052c0 <_strtod_l+0x8b8>
 80051d8:	4629      	mov	r1, r5
 80051da:	2201      	movs	r2, #1
 80051dc:	4620      	mov	r0, r4
 80051de:	f7ff f9a3 	bl	8004528 <__lshift>
 80051e2:	4659      	mov	r1, fp
 80051e4:	4605      	mov	r5, r0
 80051e6:	f7ff fa0b 	bl	8004600 <__mcmp>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	dd68      	ble.n	80052c0 <_strtod_l+0x8b8>
 80051ee:	9904      	ldr	r1, [sp, #16]
 80051f0:	4a54      	ldr	r2, [pc, #336]	; (8005344 <_strtod_l+0x93c>)
 80051f2:	464b      	mov	r3, r9
 80051f4:	2900      	cmp	r1, #0
 80051f6:	f000 8084 	beq.w	8005302 <_strtod_l+0x8fa>
 80051fa:	ea02 0109 	and.w	r1, r2, r9
 80051fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005202:	dc7e      	bgt.n	8005302 <_strtod_l+0x8fa>
 8005204:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005208:	f77f aeb3 	ble.w	8004f72 <_strtod_l+0x56a>
 800520c:	4b4e      	ldr	r3, [pc, #312]	; (8005348 <_strtod_l+0x940>)
 800520e:	4640      	mov	r0, r8
 8005210:	4649      	mov	r1, r9
 8005212:	2200      	movs	r2, #0
 8005214:	f7fb f9f8 	bl	8000608 <__aeabi_dmul>
 8005218:	4b4a      	ldr	r3, [pc, #296]	; (8005344 <_strtod_l+0x93c>)
 800521a:	400b      	ands	r3, r1
 800521c:	4680      	mov	r8, r0
 800521e:	4689      	mov	r9, r1
 8005220:	2b00      	cmp	r3, #0
 8005222:	f47f ae3f 	bne.w	8004ea4 <_strtod_l+0x49c>
 8005226:	2322      	movs	r3, #34	; 0x22
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	e63b      	b.n	8004ea4 <_strtod_l+0x49c>
 800522c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	ea03 0808 	and.w	r8, r3, r8
 8005238:	e6e8      	b.n	800500c <_strtod_l+0x604>
 800523a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800523e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005242:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005246:	36e2      	adds	r6, #226	; 0xe2
 8005248:	fa01 f306 	lsl.w	r3, r1, r6
 800524c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8005250:	e748      	b.n	80050e4 <_strtod_l+0x6dc>
 8005252:	2100      	movs	r1, #0
 8005254:	2301      	movs	r3, #1
 8005256:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800525a:	e743      	b.n	80050e4 <_strtod_l+0x6dc>
 800525c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800525e:	4632      	mov	r2, r6
 8005260:	4620      	mov	r0, r4
 8005262:	f7ff f961 	bl	8004528 <__lshift>
 8005266:	9016      	str	r0, [sp, #88]	; 0x58
 8005268:	2800      	cmp	r0, #0
 800526a:	f47f af6b 	bne.w	8005144 <_strtod_l+0x73c>
 800526e:	e60f      	b.n	8004e90 <_strtod_l+0x488>
 8005270:	46ca      	mov	sl, r9
 8005272:	d171      	bne.n	8005358 <_strtod_l+0x950>
 8005274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005276:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800527a:	b352      	cbz	r2, 80052d2 <_strtod_l+0x8ca>
 800527c:	4a33      	ldr	r2, [pc, #204]	; (800534c <_strtod_l+0x944>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d12a      	bne.n	80052d8 <_strtod_l+0x8d0>
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	4641      	mov	r1, r8
 8005286:	b1fb      	cbz	r3, 80052c8 <_strtod_l+0x8c0>
 8005288:	4b2e      	ldr	r3, [pc, #184]	; (8005344 <_strtod_l+0x93c>)
 800528a:	ea09 0303 	and.w	r3, r9, r3
 800528e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005296:	d81a      	bhi.n	80052ce <_strtod_l+0x8c6>
 8005298:	0d1b      	lsrs	r3, r3, #20
 800529a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	4299      	cmp	r1, r3
 80052a4:	d118      	bne.n	80052d8 <_strtod_l+0x8d0>
 80052a6:	4b2a      	ldr	r3, [pc, #168]	; (8005350 <_strtod_l+0x948>)
 80052a8:	459a      	cmp	sl, r3
 80052aa:	d102      	bne.n	80052b2 <_strtod_l+0x8aa>
 80052ac:	3101      	adds	r1, #1
 80052ae:	f43f adef 	beq.w	8004e90 <_strtod_l+0x488>
 80052b2:	4b24      	ldr	r3, [pc, #144]	; (8005344 <_strtod_l+0x93c>)
 80052b4:	ea0a 0303 	and.w	r3, sl, r3
 80052b8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80052bc:	f04f 0800 	mov.w	r8, #0
 80052c0:	9b04      	ldr	r3, [sp, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1a2      	bne.n	800520c <_strtod_l+0x804>
 80052c6:	e5ed      	b.n	8004ea4 <_strtod_l+0x49c>
 80052c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052cc:	e7e9      	b.n	80052a2 <_strtod_l+0x89a>
 80052ce:	4613      	mov	r3, r2
 80052d0:	e7e7      	b.n	80052a2 <_strtod_l+0x89a>
 80052d2:	ea53 0308 	orrs.w	r3, r3, r8
 80052d6:	d08a      	beq.n	80051ee <_strtod_l+0x7e6>
 80052d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052da:	b1e3      	cbz	r3, 8005316 <_strtod_l+0x90e>
 80052dc:	ea13 0f0a 	tst.w	r3, sl
 80052e0:	d0ee      	beq.n	80052c0 <_strtod_l+0x8b8>
 80052e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052e4:	9a04      	ldr	r2, [sp, #16]
 80052e6:	4640      	mov	r0, r8
 80052e8:	4649      	mov	r1, r9
 80052ea:	b1c3      	cbz	r3, 800531e <_strtod_l+0x916>
 80052ec:	f7ff fb6f 	bl	80049ce <sulp>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	ec51 0b18 	vmov	r0, r1, d8
 80052f8:	f7fa ffd0 	bl	800029c <__adddf3>
 80052fc:	4680      	mov	r8, r0
 80052fe:	4689      	mov	r9, r1
 8005300:	e7de      	b.n	80052c0 <_strtod_l+0x8b8>
 8005302:	4013      	ands	r3, r2
 8005304:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005308:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800530c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005310:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005314:	e7d4      	b.n	80052c0 <_strtod_l+0x8b8>
 8005316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005318:	ea13 0f08 	tst.w	r3, r8
 800531c:	e7e0      	b.n	80052e0 <_strtod_l+0x8d8>
 800531e:	f7ff fb56 	bl	80049ce <sulp>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	ec51 0b18 	vmov	r0, r1, d8
 800532a:	f7fa ffb5 	bl	8000298 <__aeabi_dsub>
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	4680      	mov	r8, r0
 8005334:	4689      	mov	r9, r1
 8005336:	f7fb fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800533a:	2800      	cmp	r0, #0
 800533c:	d0c0      	beq.n	80052c0 <_strtod_l+0x8b8>
 800533e:	e618      	b.n	8004f72 <_strtod_l+0x56a>
 8005340:	fffffc02 	.word	0xfffffc02
 8005344:	7ff00000 	.word	0x7ff00000
 8005348:	39500000 	.word	0x39500000
 800534c:	000fffff 	.word	0x000fffff
 8005350:	7fefffff 	.word	0x7fefffff
 8005354:	08007138 	.word	0x08007138
 8005358:	4659      	mov	r1, fp
 800535a:	4628      	mov	r0, r5
 800535c:	f7ff fac0 	bl	80048e0 <__ratio>
 8005360:	ec57 6b10 	vmov	r6, r7, d0
 8005364:	ee10 0a10 	vmov	r0, s0
 8005368:	2200      	movs	r2, #0
 800536a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800536e:	4639      	mov	r1, r7
 8005370:	f7fb fbc6 	bl	8000b00 <__aeabi_dcmple>
 8005374:	2800      	cmp	r0, #0
 8005376:	d071      	beq.n	800545c <_strtod_l+0xa54>
 8005378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d17c      	bne.n	8005478 <_strtod_l+0xa70>
 800537e:	f1b8 0f00 	cmp.w	r8, #0
 8005382:	d15a      	bne.n	800543a <_strtod_l+0xa32>
 8005384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005388:	2b00      	cmp	r3, #0
 800538a:	d15d      	bne.n	8005448 <_strtod_l+0xa40>
 800538c:	4b90      	ldr	r3, [pc, #576]	; (80055d0 <_strtod_l+0xbc8>)
 800538e:	2200      	movs	r2, #0
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fb fbaa 	bl	8000aec <__aeabi_dcmplt>
 8005398:	2800      	cmp	r0, #0
 800539a:	d15c      	bne.n	8005456 <_strtod_l+0xa4e>
 800539c:	4630      	mov	r0, r6
 800539e:	4639      	mov	r1, r7
 80053a0:	4b8c      	ldr	r3, [pc, #560]	; (80055d4 <_strtod_l+0xbcc>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	f7fb f930 	bl	8000608 <__aeabi_dmul>
 80053a8:	4606      	mov	r6, r0
 80053aa:	460f      	mov	r7, r1
 80053ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80053b0:	9606      	str	r6, [sp, #24]
 80053b2:	9307      	str	r3, [sp, #28]
 80053b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80053bc:	4b86      	ldr	r3, [pc, #536]	; (80055d8 <_strtod_l+0xbd0>)
 80053be:	ea0a 0303 	and.w	r3, sl, r3
 80053c2:	930d      	str	r3, [sp, #52]	; 0x34
 80053c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053c6:	4b85      	ldr	r3, [pc, #532]	; (80055dc <_strtod_l+0xbd4>)
 80053c8:	429a      	cmp	r2, r3
 80053ca:	f040 8090 	bne.w	80054ee <_strtod_l+0xae6>
 80053ce:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80053d2:	ec49 8b10 	vmov	d0, r8, r9
 80053d6:	f7ff f9b9 	bl	800474c <__ulp>
 80053da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053de:	ec51 0b10 	vmov	r0, r1, d0
 80053e2:	f7fb f911 	bl	8000608 <__aeabi_dmul>
 80053e6:	4642      	mov	r2, r8
 80053e8:	464b      	mov	r3, r9
 80053ea:	f7fa ff57 	bl	800029c <__adddf3>
 80053ee:	460b      	mov	r3, r1
 80053f0:	4979      	ldr	r1, [pc, #484]	; (80055d8 <_strtod_l+0xbd0>)
 80053f2:	4a7b      	ldr	r2, [pc, #492]	; (80055e0 <_strtod_l+0xbd8>)
 80053f4:	4019      	ands	r1, r3
 80053f6:	4291      	cmp	r1, r2
 80053f8:	4680      	mov	r8, r0
 80053fa:	d944      	bls.n	8005486 <_strtod_l+0xa7e>
 80053fc:	ee18 2a90 	vmov	r2, s17
 8005400:	4b78      	ldr	r3, [pc, #480]	; (80055e4 <_strtod_l+0xbdc>)
 8005402:	429a      	cmp	r2, r3
 8005404:	d104      	bne.n	8005410 <_strtod_l+0xa08>
 8005406:	ee18 3a10 	vmov	r3, s16
 800540a:	3301      	adds	r3, #1
 800540c:	f43f ad40 	beq.w	8004e90 <_strtod_l+0x488>
 8005410:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80055e4 <_strtod_l+0xbdc>
 8005414:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005418:	9916      	ldr	r1, [sp, #88]	; 0x58
 800541a:	4620      	mov	r0, r4
 800541c:	f7fe fe6a 	bl	80040f4 <_Bfree>
 8005420:	9905      	ldr	r1, [sp, #20]
 8005422:	4620      	mov	r0, r4
 8005424:	f7fe fe66 	bl	80040f4 <_Bfree>
 8005428:	4659      	mov	r1, fp
 800542a:	4620      	mov	r0, r4
 800542c:	f7fe fe62 	bl	80040f4 <_Bfree>
 8005430:	4629      	mov	r1, r5
 8005432:	4620      	mov	r0, r4
 8005434:	f7fe fe5e 	bl	80040f4 <_Bfree>
 8005438:	e609      	b.n	800504e <_strtod_l+0x646>
 800543a:	f1b8 0f01 	cmp.w	r8, #1
 800543e:	d103      	bne.n	8005448 <_strtod_l+0xa40>
 8005440:	f1b9 0f00 	cmp.w	r9, #0
 8005444:	f43f ad95 	beq.w	8004f72 <_strtod_l+0x56a>
 8005448:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80055a0 <_strtod_l+0xb98>
 800544c:	4f60      	ldr	r7, [pc, #384]	; (80055d0 <_strtod_l+0xbc8>)
 800544e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005452:	2600      	movs	r6, #0
 8005454:	e7ae      	b.n	80053b4 <_strtod_l+0x9ac>
 8005456:	4f5f      	ldr	r7, [pc, #380]	; (80055d4 <_strtod_l+0xbcc>)
 8005458:	2600      	movs	r6, #0
 800545a:	e7a7      	b.n	80053ac <_strtod_l+0x9a4>
 800545c:	4b5d      	ldr	r3, [pc, #372]	; (80055d4 <_strtod_l+0xbcc>)
 800545e:	4630      	mov	r0, r6
 8005460:	4639      	mov	r1, r7
 8005462:	2200      	movs	r2, #0
 8005464:	f7fb f8d0 	bl	8000608 <__aeabi_dmul>
 8005468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546a:	4606      	mov	r6, r0
 800546c:	460f      	mov	r7, r1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d09c      	beq.n	80053ac <_strtod_l+0x9a4>
 8005472:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005476:	e79d      	b.n	80053b4 <_strtod_l+0x9ac>
 8005478:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80055a8 <_strtod_l+0xba0>
 800547c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005480:	ec57 6b17 	vmov	r6, r7, d7
 8005484:	e796      	b.n	80053b4 <_strtod_l+0x9ac>
 8005486:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	46ca      	mov	sl, r9
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1c2      	bne.n	8005418 <_strtod_l+0xa10>
 8005492:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005498:	0d1b      	lsrs	r3, r3, #20
 800549a:	051b      	lsls	r3, r3, #20
 800549c:	429a      	cmp	r2, r3
 800549e:	d1bb      	bne.n	8005418 <_strtod_l+0xa10>
 80054a0:	4630      	mov	r0, r6
 80054a2:	4639      	mov	r1, r7
 80054a4:	f7fb fbf8 	bl	8000c98 <__aeabi_d2lz>
 80054a8:	f7fb f880 	bl	80005ac <__aeabi_l2d>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4630      	mov	r0, r6
 80054b2:	4639      	mov	r1, r7
 80054b4:	f7fa fef0 	bl	8000298 <__aeabi_dsub>
 80054b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054be:	ea43 0308 	orr.w	r3, r3, r8
 80054c2:	4313      	orrs	r3, r2
 80054c4:	4606      	mov	r6, r0
 80054c6:	460f      	mov	r7, r1
 80054c8:	d054      	beq.n	8005574 <_strtod_l+0xb6c>
 80054ca:	a339      	add	r3, pc, #228	; (adr r3, 80055b0 <_strtod_l+0xba8>)
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fb fb0c 	bl	8000aec <__aeabi_dcmplt>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	f47f ace5 	bne.w	8004ea4 <_strtod_l+0x49c>
 80054da:	a337      	add	r3, pc, #220	; (adr r3, 80055b8 <_strtod_l+0xbb0>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	4630      	mov	r0, r6
 80054e2:	4639      	mov	r1, r7
 80054e4:	f7fb fb20 	bl	8000b28 <__aeabi_dcmpgt>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d095      	beq.n	8005418 <_strtod_l+0xa10>
 80054ec:	e4da      	b.n	8004ea4 <_strtod_l+0x49c>
 80054ee:	9b04      	ldr	r3, [sp, #16]
 80054f0:	b333      	cbz	r3, 8005540 <_strtod_l+0xb38>
 80054f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80054f8:	d822      	bhi.n	8005540 <_strtod_l+0xb38>
 80054fa:	a331      	add	r3, pc, #196	; (adr r3, 80055c0 <_strtod_l+0xbb8>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fb fafc 	bl	8000b00 <__aeabi_dcmple>
 8005508:	b1a0      	cbz	r0, 8005534 <_strtod_l+0xb2c>
 800550a:	4639      	mov	r1, r7
 800550c:	4630      	mov	r0, r6
 800550e:	f7fb fb53 	bl	8000bb8 <__aeabi_d2uiz>
 8005512:	2801      	cmp	r0, #1
 8005514:	bf38      	it	cc
 8005516:	2001      	movcc	r0, #1
 8005518:	f7fa fffc 	bl	8000514 <__aeabi_ui2d>
 800551c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800551e:	4606      	mov	r6, r0
 8005520:	460f      	mov	r7, r1
 8005522:	bb23      	cbnz	r3, 800556e <_strtod_l+0xb66>
 8005524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005528:	9010      	str	r0, [sp, #64]	; 0x40
 800552a:	9311      	str	r3, [sp, #68]	; 0x44
 800552c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005530:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005538:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005540:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005544:	eeb0 0a48 	vmov.f32	s0, s16
 8005548:	eef0 0a68 	vmov.f32	s1, s17
 800554c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005550:	f7ff f8fc 	bl	800474c <__ulp>
 8005554:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005558:	ec53 2b10 	vmov	r2, r3, d0
 800555c:	f7fb f854 	bl	8000608 <__aeabi_dmul>
 8005560:	ec53 2b18 	vmov	r2, r3, d8
 8005564:	f7fa fe9a 	bl	800029c <__adddf3>
 8005568:	4680      	mov	r8, r0
 800556a:	4689      	mov	r9, r1
 800556c:	e78d      	b.n	800548a <_strtod_l+0xa82>
 800556e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005572:	e7db      	b.n	800552c <_strtod_l+0xb24>
 8005574:	a314      	add	r3, pc, #80	; (adr r3, 80055c8 <_strtod_l+0xbc0>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	f7fb fab7 	bl	8000aec <__aeabi_dcmplt>
 800557e:	e7b3      	b.n	80054e8 <_strtod_l+0xae0>
 8005580:	2300      	movs	r3, #0
 8005582:	930a      	str	r3, [sp, #40]	; 0x28
 8005584:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	f7ff ba7c 	b.w	8004a86 <_strtod_l+0x7e>
 800558e:	2a65      	cmp	r2, #101	; 0x65
 8005590:	f43f ab75 	beq.w	8004c7e <_strtod_l+0x276>
 8005594:	2a45      	cmp	r2, #69	; 0x45
 8005596:	f43f ab72 	beq.w	8004c7e <_strtod_l+0x276>
 800559a:	2301      	movs	r3, #1
 800559c:	f7ff bbaa 	b.w	8004cf4 <_strtod_l+0x2ec>
 80055a0:	00000000 	.word	0x00000000
 80055a4:	bff00000 	.word	0xbff00000
 80055a8:	00000000 	.word	0x00000000
 80055ac:	3ff00000 	.word	0x3ff00000
 80055b0:	94a03595 	.word	0x94a03595
 80055b4:	3fdfffff 	.word	0x3fdfffff
 80055b8:	35afe535 	.word	0x35afe535
 80055bc:	3fe00000 	.word	0x3fe00000
 80055c0:	ffc00000 	.word	0xffc00000
 80055c4:	41dfffff 	.word	0x41dfffff
 80055c8:	94a03595 	.word	0x94a03595
 80055cc:	3fcfffff 	.word	0x3fcfffff
 80055d0:	3ff00000 	.word	0x3ff00000
 80055d4:	3fe00000 	.word	0x3fe00000
 80055d8:	7ff00000 	.word	0x7ff00000
 80055dc:	7fe00000 	.word	0x7fe00000
 80055e0:	7c9fffff 	.word	0x7c9fffff
 80055e4:	7fefffff 	.word	0x7fefffff

080055e8 <_strtod_r>:
 80055e8:	4b01      	ldr	r3, [pc, #4]	; (80055f0 <_strtod_r+0x8>)
 80055ea:	f7ff ba0d 	b.w	8004a08 <_strtod_l>
 80055ee:	bf00      	nop
 80055f0:	2000005c 	.word	0x2000005c

080055f4 <_strtol_l.constprop.0>:
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055fa:	d001      	beq.n	8005600 <_strtol_l.constprop.0+0xc>
 80055fc:	2b24      	cmp	r3, #36	; 0x24
 80055fe:	d906      	bls.n	800560e <_strtol_l.constprop.0+0x1a>
 8005600:	f7fd fd8a 	bl	8003118 <__errno>
 8005604:	2316      	movs	r3, #22
 8005606:	6003      	str	r3, [r0, #0]
 8005608:	2000      	movs	r0, #0
 800560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80056f4 <_strtol_l.constprop.0+0x100>
 8005612:	460d      	mov	r5, r1
 8005614:	462e      	mov	r6, r5
 8005616:	f815 4b01 	ldrb.w	r4, [r5], #1
 800561a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800561e:	f017 0708 	ands.w	r7, r7, #8
 8005622:	d1f7      	bne.n	8005614 <_strtol_l.constprop.0+0x20>
 8005624:	2c2d      	cmp	r4, #45	; 0x2d
 8005626:	d132      	bne.n	800568e <_strtol_l.constprop.0+0x9a>
 8005628:	782c      	ldrb	r4, [r5, #0]
 800562a:	2701      	movs	r7, #1
 800562c:	1cb5      	adds	r5, r6, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d05b      	beq.n	80056ea <_strtol_l.constprop.0+0xf6>
 8005632:	2b10      	cmp	r3, #16
 8005634:	d109      	bne.n	800564a <_strtol_l.constprop.0+0x56>
 8005636:	2c30      	cmp	r4, #48	; 0x30
 8005638:	d107      	bne.n	800564a <_strtol_l.constprop.0+0x56>
 800563a:	782c      	ldrb	r4, [r5, #0]
 800563c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005640:	2c58      	cmp	r4, #88	; 0x58
 8005642:	d14d      	bne.n	80056e0 <_strtol_l.constprop.0+0xec>
 8005644:	786c      	ldrb	r4, [r5, #1]
 8005646:	2310      	movs	r3, #16
 8005648:	3502      	adds	r5, #2
 800564a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800564e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005652:	f04f 0e00 	mov.w	lr, #0
 8005656:	fbb8 f9f3 	udiv	r9, r8, r3
 800565a:	4676      	mov	r6, lr
 800565c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005660:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005664:	f1bc 0f09 	cmp.w	ip, #9
 8005668:	d816      	bhi.n	8005698 <_strtol_l.constprop.0+0xa4>
 800566a:	4664      	mov	r4, ip
 800566c:	42a3      	cmp	r3, r4
 800566e:	dd24      	ble.n	80056ba <_strtol_l.constprop.0+0xc6>
 8005670:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8005674:	d008      	beq.n	8005688 <_strtol_l.constprop.0+0x94>
 8005676:	45b1      	cmp	r9, r6
 8005678:	d31c      	bcc.n	80056b4 <_strtol_l.constprop.0+0xc0>
 800567a:	d101      	bne.n	8005680 <_strtol_l.constprop.0+0x8c>
 800567c:	45a2      	cmp	sl, r4
 800567e:	db19      	blt.n	80056b4 <_strtol_l.constprop.0+0xc0>
 8005680:	fb06 4603 	mla	r6, r6, r3, r4
 8005684:	f04f 0e01 	mov.w	lr, #1
 8005688:	f815 4b01 	ldrb.w	r4, [r5], #1
 800568c:	e7e8      	b.n	8005660 <_strtol_l.constprop.0+0x6c>
 800568e:	2c2b      	cmp	r4, #43	; 0x2b
 8005690:	bf04      	itt	eq
 8005692:	782c      	ldrbeq	r4, [r5, #0]
 8005694:	1cb5      	addeq	r5, r6, #2
 8005696:	e7ca      	b.n	800562e <_strtol_l.constprop.0+0x3a>
 8005698:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800569c:	f1bc 0f19 	cmp.w	ip, #25
 80056a0:	d801      	bhi.n	80056a6 <_strtol_l.constprop.0+0xb2>
 80056a2:	3c37      	subs	r4, #55	; 0x37
 80056a4:	e7e2      	b.n	800566c <_strtol_l.constprop.0+0x78>
 80056a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80056aa:	f1bc 0f19 	cmp.w	ip, #25
 80056ae:	d804      	bhi.n	80056ba <_strtol_l.constprop.0+0xc6>
 80056b0:	3c57      	subs	r4, #87	; 0x57
 80056b2:	e7db      	b.n	800566c <_strtol_l.constprop.0+0x78>
 80056b4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80056b8:	e7e6      	b.n	8005688 <_strtol_l.constprop.0+0x94>
 80056ba:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80056be:	d105      	bne.n	80056cc <_strtol_l.constprop.0+0xd8>
 80056c0:	2322      	movs	r3, #34	; 0x22
 80056c2:	6003      	str	r3, [r0, #0]
 80056c4:	4646      	mov	r6, r8
 80056c6:	b942      	cbnz	r2, 80056da <_strtol_l.constprop.0+0xe6>
 80056c8:	4630      	mov	r0, r6
 80056ca:	e79e      	b.n	800560a <_strtol_l.constprop.0+0x16>
 80056cc:	b107      	cbz	r7, 80056d0 <_strtol_l.constprop.0+0xdc>
 80056ce:	4276      	negs	r6, r6
 80056d0:	2a00      	cmp	r2, #0
 80056d2:	d0f9      	beq.n	80056c8 <_strtol_l.constprop.0+0xd4>
 80056d4:	f1be 0f00 	cmp.w	lr, #0
 80056d8:	d000      	beq.n	80056dc <_strtol_l.constprop.0+0xe8>
 80056da:	1e69      	subs	r1, r5, #1
 80056dc:	6011      	str	r1, [r2, #0]
 80056de:	e7f3      	b.n	80056c8 <_strtol_l.constprop.0+0xd4>
 80056e0:	2430      	movs	r4, #48	; 0x30
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1b1      	bne.n	800564a <_strtol_l.constprop.0+0x56>
 80056e6:	2308      	movs	r3, #8
 80056e8:	e7af      	b.n	800564a <_strtol_l.constprop.0+0x56>
 80056ea:	2c30      	cmp	r4, #48	; 0x30
 80056ec:	d0a5      	beq.n	800563a <_strtol_l.constprop.0+0x46>
 80056ee:	230a      	movs	r3, #10
 80056f0:	e7ab      	b.n	800564a <_strtol_l.constprop.0+0x56>
 80056f2:	bf00      	nop
 80056f4:	08007161 	.word	0x08007161

080056f8 <_strtol_r>:
 80056f8:	f7ff bf7c 	b.w	80055f4 <_strtol_l.constprop.0>

080056fc <__ssputs_r>:
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	688e      	ldr	r6, [r1, #8]
 8005702:	461f      	mov	r7, r3
 8005704:	42be      	cmp	r6, r7
 8005706:	680b      	ldr	r3, [r1, #0]
 8005708:	4682      	mov	sl, r0
 800570a:	460c      	mov	r4, r1
 800570c:	4690      	mov	r8, r2
 800570e:	d82c      	bhi.n	800576a <__ssputs_r+0x6e>
 8005710:	898a      	ldrh	r2, [r1, #12]
 8005712:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005716:	d026      	beq.n	8005766 <__ssputs_r+0x6a>
 8005718:	6965      	ldr	r5, [r4, #20]
 800571a:	6909      	ldr	r1, [r1, #16]
 800571c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005720:	eba3 0901 	sub.w	r9, r3, r1
 8005724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005728:	1c7b      	adds	r3, r7, #1
 800572a:	444b      	add	r3, r9
 800572c:	106d      	asrs	r5, r5, #1
 800572e:	429d      	cmp	r5, r3
 8005730:	bf38      	it	cc
 8005732:	461d      	movcc	r5, r3
 8005734:	0553      	lsls	r3, r2, #21
 8005736:	d527      	bpl.n	8005788 <__ssputs_r+0x8c>
 8005738:	4629      	mov	r1, r5
 800573a:	f7fe fc0f 	bl	8003f5c <_malloc_r>
 800573e:	4606      	mov	r6, r0
 8005740:	b360      	cbz	r0, 800579c <__ssputs_r+0xa0>
 8005742:	6921      	ldr	r1, [r4, #16]
 8005744:	464a      	mov	r2, r9
 8005746:	f000 fa1b 	bl	8005b80 <memcpy>
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005754:	81a3      	strh	r3, [r4, #12]
 8005756:	6126      	str	r6, [r4, #16]
 8005758:	6165      	str	r5, [r4, #20]
 800575a:	444e      	add	r6, r9
 800575c:	eba5 0509 	sub.w	r5, r5, r9
 8005760:	6026      	str	r6, [r4, #0]
 8005762:	60a5      	str	r5, [r4, #8]
 8005764:	463e      	mov	r6, r7
 8005766:	42be      	cmp	r6, r7
 8005768:	d900      	bls.n	800576c <__ssputs_r+0x70>
 800576a:	463e      	mov	r6, r7
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	4632      	mov	r2, r6
 8005770:	4641      	mov	r1, r8
 8005772:	f000 f9c9 	bl	8005b08 <memmove>
 8005776:	68a3      	ldr	r3, [r4, #8]
 8005778:	1b9b      	subs	r3, r3, r6
 800577a:	60a3      	str	r3, [r4, #8]
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	4433      	add	r3, r6
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	2000      	movs	r0, #0
 8005784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005788:	462a      	mov	r2, r5
 800578a:	f000 fdae 	bl	80062ea <_realloc_r>
 800578e:	4606      	mov	r6, r0
 8005790:	2800      	cmp	r0, #0
 8005792:	d1e0      	bne.n	8005756 <__ssputs_r+0x5a>
 8005794:	6921      	ldr	r1, [r4, #16]
 8005796:	4650      	mov	r0, sl
 8005798:	f7fe fb6c 	bl	8003e74 <_free_r>
 800579c:	230c      	movs	r3, #12
 800579e:	f8ca 3000 	str.w	r3, [sl]
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057a8:	81a3      	strh	r3, [r4, #12]
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ae:	e7e9      	b.n	8005784 <__ssputs_r+0x88>

080057b0 <_svfiprintf_r>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	4698      	mov	r8, r3
 80057b6:	898b      	ldrh	r3, [r1, #12]
 80057b8:	061b      	lsls	r3, r3, #24
 80057ba:	b09d      	sub	sp, #116	; 0x74
 80057bc:	4607      	mov	r7, r0
 80057be:	460d      	mov	r5, r1
 80057c0:	4614      	mov	r4, r2
 80057c2:	d50e      	bpl.n	80057e2 <_svfiprintf_r+0x32>
 80057c4:	690b      	ldr	r3, [r1, #16]
 80057c6:	b963      	cbnz	r3, 80057e2 <_svfiprintf_r+0x32>
 80057c8:	2140      	movs	r1, #64	; 0x40
 80057ca:	f7fe fbc7 	bl	8003f5c <_malloc_r>
 80057ce:	6028      	str	r0, [r5, #0]
 80057d0:	6128      	str	r0, [r5, #16]
 80057d2:	b920      	cbnz	r0, 80057de <_svfiprintf_r+0x2e>
 80057d4:	230c      	movs	r3, #12
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057dc:	e0d0      	b.n	8005980 <_svfiprintf_r+0x1d0>
 80057de:	2340      	movs	r3, #64	; 0x40
 80057e0:	616b      	str	r3, [r5, #20]
 80057e2:	2300      	movs	r3, #0
 80057e4:	9309      	str	r3, [sp, #36]	; 0x24
 80057e6:	2320      	movs	r3, #32
 80057e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80057f0:	2330      	movs	r3, #48	; 0x30
 80057f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005998 <_svfiprintf_r+0x1e8>
 80057f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057fa:	f04f 0901 	mov.w	r9, #1
 80057fe:	4623      	mov	r3, r4
 8005800:	469a      	mov	sl, r3
 8005802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005806:	b10a      	cbz	r2, 800580c <_svfiprintf_r+0x5c>
 8005808:	2a25      	cmp	r2, #37	; 0x25
 800580a:	d1f9      	bne.n	8005800 <_svfiprintf_r+0x50>
 800580c:	ebba 0b04 	subs.w	fp, sl, r4
 8005810:	d00b      	beq.n	800582a <_svfiprintf_r+0x7a>
 8005812:	465b      	mov	r3, fp
 8005814:	4622      	mov	r2, r4
 8005816:	4629      	mov	r1, r5
 8005818:	4638      	mov	r0, r7
 800581a:	f7ff ff6f 	bl	80056fc <__ssputs_r>
 800581e:	3001      	adds	r0, #1
 8005820:	f000 80a9 	beq.w	8005976 <_svfiprintf_r+0x1c6>
 8005824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005826:	445a      	add	r2, fp
 8005828:	9209      	str	r2, [sp, #36]	; 0x24
 800582a:	f89a 3000 	ldrb.w	r3, [sl]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80a1 	beq.w	8005976 <_svfiprintf_r+0x1c6>
 8005834:	2300      	movs	r3, #0
 8005836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800583a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800583e:	f10a 0a01 	add.w	sl, sl, #1
 8005842:	9304      	str	r3, [sp, #16]
 8005844:	9307      	str	r3, [sp, #28]
 8005846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800584a:	931a      	str	r3, [sp, #104]	; 0x68
 800584c:	4654      	mov	r4, sl
 800584e:	2205      	movs	r2, #5
 8005850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005854:	4850      	ldr	r0, [pc, #320]	; (8005998 <_svfiprintf_r+0x1e8>)
 8005856:	f7fa fcc3 	bl	80001e0 <memchr>
 800585a:	9a04      	ldr	r2, [sp, #16]
 800585c:	b9d8      	cbnz	r0, 8005896 <_svfiprintf_r+0xe6>
 800585e:	06d0      	lsls	r0, r2, #27
 8005860:	bf44      	itt	mi
 8005862:	2320      	movmi	r3, #32
 8005864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005868:	0711      	lsls	r1, r2, #28
 800586a:	bf44      	itt	mi
 800586c:	232b      	movmi	r3, #43	; 0x2b
 800586e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005872:	f89a 3000 	ldrb.w	r3, [sl]
 8005876:	2b2a      	cmp	r3, #42	; 0x2a
 8005878:	d015      	beq.n	80058a6 <_svfiprintf_r+0xf6>
 800587a:	9a07      	ldr	r2, [sp, #28]
 800587c:	4654      	mov	r4, sl
 800587e:	2000      	movs	r0, #0
 8005880:	f04f 0c0a 	mov.w	ip, #10
 8005884:	4621      	mov	r1, r4
 8005886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800588a:	3b30      	subs	r3, #48	; 0x30
 800588c:	2b09      	cmp	r3, #9
 800588e:	d94d      	bls.n	800592c <_svfiprintf_r+0x17c>
 8005890:	b1b0      	cbz	r0, 80058c0 <_svfiprintf_r+0x110>
 8005892:	9207      	str	r2, [sp, #28]
 8005894:	e014      	b.n	80058c0 <_svfiprintf_r+0x110>
 8005896:	eba0 0308 	sub.w	r3, r0, r8
 800589a:	fa09 f303 	lsl.w	r3, r9, r3
 800589e:	4313      	orrs	r3, r2
 80058a0:	9304      	str	r3, [sp, #16]
 80058a2:	46a2      	mov	sl, r4
 80058a4:	e7d2      	b.n	800584c <_svfiprintf_r+0x9c>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	1d19      	adds	r1, r3, #4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	9103      	str	r1, [sp, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bfbb      	ittet	lt
 80058b2:	425b      	neglt	r3, r3
 80058b4:	f042 0202 	orrlt.w	r2, r2, #2
 80058b8:	9307      	strge	r3, [sp, #28]
 80058ba:	9307      	strlt	r3, [sp, #28]
 80058bc:	bfb8      	it	lt
 80058be:	9204      	strlt	r2, [sp, #16]
 80058c0:	7823      	ldrb	r3, [r4, #0]
 80058c2:	2b2e      	cmp	r3, #46	; 0x2e
 80058c4:	d10c      	bne.n	80058e0 <_svfiprintf_r+0x130>
 80058c6:	7863      	ldrb	r3, [r4, #1]
 80058c8:	2b2a      	cmp	r3, #42	; 0x2a
 80058ca:	d134      	bne.n	8005936 <_svfiprintf_r+0x186>
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	9203      	str	r2, [sp, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bfb8      	it	lt
 80058d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058dc:	3402      	adds	r4, #2
 80058de:	9305      	str	r3, [sp, #20]
 80058e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80059a8 <_svfiprintf_r+0x1f8>
 80058e4:	7821      	ldrb	r1, [r4, #0]
 80058e6:	2203      	movs	r2, #3
 80058e8:	4650      	mov	r0, sl
 80058ea:	f7fa fc79 	bl	80001e0 <memchr>
 80058ee:	b138      	cbz	r0, 8005900 <_svfiprintf_r+0x150>
 80058f0:	9b04      	ldr	r3, [sp, #16]
 80058f2:	eba0 000a 	sub.w	r0, r0, sl
 80058f6:	2240      	movs	r2, #64	; 0x40
 80058f8:	4082      	lsls	r2, r0
 80058fa:	4313      	orrs	r3, r2
 80058fc:	3401      	adds	r4, #1
 80058fe:	9304      	str	r3, [sp, #16]
 8005900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005904:	4825      	ldr	r0, [pc, #148]	; (800599c <_svfiprintf_r+0x1ec>)
 8005906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800590a:	2206      	movs	r2, #6
 800590c:	f7fa fc68 	bl	80001e0 <memchr>
 8005910:	2800      	cmp	r0, #0
 8005912:	d038      	beq.n	8005986 <_svfiprintf_r+0x1d6>
 8005914:	4b22      	ldr	r3, [pc, #136]	; (80059a0 <_svfiprintf_r+0x1f0>)
 8005916:	bb1b      	cbnz	r3, 8005960 <_svfiprintf_r+0x1b0>
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	3307      	adds	r3, #7
 800591c:	f023 0307 	bic.w	r3, r3, #7
 8005920:	3308      	adds	r3, #8
 8005922:	9303      	str	r3, [sp, #12]
 8005924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005926:	4433      	add	r3, r6
 8005928:	9309      	str	r3, [sp, #36]	; 0x24
 800592a:	e768      	b.n	80057fe <_svfiprintf_r+0x4e>
 800592c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005930:	460c      	mov	r4, r1
 8005932:	2001      	movs	r0, #1
 8005934:	e7a6      	b.n	8005884 <_svfiprintf_r+0xd4>
 8005936:	2300      	movs	r3, #0
 8005938:	3401      	adds	r4, #1
 800593a:	9305      	str	r3, [sp, #20]
 800593c:	4619      	mov	r1, r3
 800593e:	f04f 0c0a 	mov.w	ip, #10
 8005942:	4620      	mov	r0, r4
 8005944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005948:	3a30      	subs	r2, #48	; 0x30
 800594a:	2a09      	cmp	r2, #9
 800594c:	d903      	bls.n	8005956 <_svfiprintf_r+0x1a6>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0c6      	beq.n	80058e0 <_svfiprintf_r+0x130>
 8005952:	9105      	str	r1, [sp, #20]
 8005954:	e7c4      	b.n	80058e0 <_svfiprintf_r+0x130>
 8005956:	fb0c 2101 	mla	r1, ip, r1, r2
 800595a:	4604      	mov	r4, r0
 800595c:	2301      	movs	r3, #1
 800595e:	e7f0      	b.n	8005942 <_svfiprintf_r+0x192>
 8005960:	ab03      	add	r3, sp, #12
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	462a      	mov	r2, r5
 8005966:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <_svfiprintf_r+0x1f4>)
 8005968:	a904      	add	r1, sp, #16
 800596a:	4638      	mov	r0, r7
 800596c:	f7fc fc86 	bl	800227c <_printf_float>
 8005970:	1c42      	adds	r2, r0, #1
 8005972:	4606      	mov	r6, r0
 8005974:	d1d6      	bne.n	8005924 <_svfiprintf_r+0x174>
 8005976:	89ab      	ldrh	r3, [r5, #12]
 8005978:	065b      	lsls	r3, r3, #25
 800597a:	f53f af2d 	bmi.w	80057d8 <_svfiprintf_r+0x28>
 800597e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005980:	b01d      	add	sp, #116	; 0x74
 8005982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005986:	ab03      	add	r3, sp, #12
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	462a      	mov	r2, r5
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <_svfiprintf_r+0x1f4>)
 800598e:	a904      	add	r1, sp, #16
 8005990:	4638      	mov	r0, r7
 8005992:	f7fc ff17 	bl	80027c4 <_printf_i>
 8005996:	e7eb      	b.n	8005970 <_svfiprintf_r+0x1c0>
 8005998:	08007261 	.word	0x08007261
 800599c:	0800726b 	.word	0x0800726b
 80059a0:	0800227d 	.word	0x0800227d
 80059a4:	080056fd 	.word	0x080056fd
 80059a8:	08007267 	.word	0x08007267

080059ac <__sflush_r>:
 80059ac:	898a      	ldrh	r2, [r1, #12]
 80059ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	4605      	mov	r5, r0
 80059b4:	0710      	lsls	r0, r2, #28
 80059b6:	460c      	mov	r4, r1
 80059b8:	d458      	bmi.n	8005a6c <__sflush_r+0xc0>
 80059ba:	684b      	ldr	r3, [r1, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dc05      	bgt.n	80059cc <__sflush_r+0x20>
 80059c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	dc02      	bgt.n	80059cc <__sflush_r+0x20>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	d0f9      	beq.n	80059c6 <__sflush_r+0x1a>
 80059d2:	2300      	movs	r3, #0
 80059d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059d8:	682f      	ldr	r7, [r5, #0]
 80059da:	6a21      	ldr	r1, [r4, #32]
 80059dc:	602b      	str	r3, [r5, #0]
 80059de:	d032      	beq.n	8005a46 <__sflush_r+0x9a>
 80059e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	075a      	lsls	r2, r3, #29
 80059e6:	d505      	bpl.n	80059f4 <__sflush_r+0x48>
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	1ac0      	subs	r0, r0, r3
 80059ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059ee:	b10b      	cbz	r3, 80059f4 <__sflush_r+0x48>
 80059f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059f2:	1ac0      	subs	r0, r0, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	4602      	mov	r2, r0
 80059f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059fa:	6a21      	ldr	r1, [r4, #32]
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b0      	blx	r6
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	d106      	bne.n	8005a14 <__sflush_r+0x68>
 8005a06:	6829      	ldr	r1, [r5, #0]
 8005a08:	291d      	cmp	r1, #29
 8005a0a:	d82b      	bhi.n	8005a64 <__sflush_r+0xb8>
 8005a0c:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <__sflush_r+0x108>)
 8005a0e:	410a      	asrs	r2, r1
 8005a10:	07d6      	lsls	r6, r2, #31
 8005a12:	d427      	bmi.n	8005a64 <__sflush_r+0xb8>
 8005a14:	2200      	movs	r2, #0
 8005a16:	6062      	str	r2, [r4, #4]
 8005a18:	04d9      	lsls	r1, r3, #19
 8005a1a:	6922      	ldr	r2, [r4, #16]
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	d504      	bpl.n	8005a2a <__sflush_r+0x7e>
 8005a20:	1c42      	adds	r2, r0, #1
 8005a22:	d101      	bne.n	8005a28 <__sflush_r+0x7c>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b903      	cbnz	r3, 8005a2a <__sflush_r+0x7e>
 8005a28:	6560      	str	r0, [r4, #84]	; 0x54
 8005a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a2c:	602f      	str	r7, [r5, #0]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d0c9      	beq.n	80059c6 <__sflush_r+0x1a>
 8005a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a36:	4299      	cmp	r1, r3
 8005a38:	d002      	beq.n	8005a40 <__sflush_r+0x94>
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f7fe fa1a 	bl	8003e74 <_free_r>
 8005a40:	2000      	movs	r0, #0
 8005a42:	6360      	str	r0, [r4, #52]	; 0x34
 8005a44:	e7c0      	b.n	80059c8 <__sflush_r+0x1c>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b0      	blx	r6
 8005a4c:	1c41      	adds	r1, r0, #1
 8005a4e:	d1c8      	bne.n	80059e2 <__sflush_r+0x36>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0c5      	beq.n	80059e2 <__sflush_r+0x36>
 8005a56:	2b1d      	cmp	r3, #29
 8005a58:	d001      	beq.n	8005a5e <__sflush_r+0xb2>
 8005a5a:	2b16      	cmp	r3, #22
 8005a5c:	d101      	bne.n	8005a62 <__sflush_r+0xb6>
 8005a5e:	602f      	str	r7, [r5, #0]
 8005a60:	e7b1      	b.n	80059c6 <__sflush_r+0x1a>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a68:	81a3      	strh	r3, [r4, #12]
 8005a6a:	e7ad      	b.n	80059c8 <__sflush_r+0x1c>
 8005a6c:	690f      	ldr	r7, [r1, #16]
 8005a6e:	2f00      	cmp	r7, #0
 8005a70:	d0a9      	beq.n	80059c6 <__sflush_r+0x1a>
 8005a72:	0793      	lsls	r3, r2, #30
 8005a74:	680e      	ldr	r6, [r1, #0]
 8005a76:	bf08      	it	eq
 8005a78:	694b      	ldreq	r3, [r1, #20]
 8005a7a:	600f      	str	r7, [r1, #0]
 8005a7c:	bf18      	it	ne
 8005a7e:	2300      	movne	r3, #0
 8005a80:	eba6 0807 	sub.w	r8, r6, r7
 8005a84:	608b      	str	r3, [r1, #8]
 8005a86:	f1b8 0f00 	cmp.w	r8, #0
 8005a8a:	dd9c      	ble.n	80059c6 <__sflush_r+0x1a>
 8005a8c:	6a21      	ldr	r1, [r4, #32]
 8005a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a90:	4643      	mov	r3, r8
 8005a92:	463a      	mov	r2, r7
 8005a94:	4628      	mov	r0, r5
 8005a96:	47b0      	blx	r6
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	dc06      	bgt.n	8005aaa <__sflush_r+0xfe>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aa8:	e78e      	b.n	80059c8 <__sflush_r+0x1c>
 8005aaa:	4407      	add	r7, r0
 8005aac:	eba8 0800 	sub.w	r8, r8, r0
 8005ab0:	e7e9      	b.n	8005a86 <__sflush_r+0xda>
 8005ab2:	bf00      	nop
 8005ab4:	dfbffffe 	.word	0xdfbffffe

08005ab8 <_fflush_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	4605      	mov	r5, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	b913      	cbnz	r3, 8005ac8 <_fflush_r+0x10>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	b118      	cbz	r0, 8005ad2 <_fflush_r+0x1a>
 8005aca:	6a03      	ldr	r3, [r0, #32]
 8005acc:	b90b      	cbnz	r3, 8005ad2 <_fflush_r+0x1a>
 8005ace:	f7fd fa37 	bl	8002f40 <__sinit>
 8005ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f3      	beq.n	8005ac2 <_fflush_r+0xa>
 8005ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005adc:	07d0      	lsls	r0, r2, #31
 8005ade:	d404      	bmi.n	8005aea <_fflush_r+0x32>
 8005ae0:	0599      	lsls	r1, r3, #22
 8005ae2:	d402      	bmi.n	8005aea <_fflush_r+0x32>
 8005ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ae6:	f7fd fb42 	bl	800316e <__retarget_lock_acquire_recursive>
 8005aea:	4628      	mov	r0, r5
 8005aec:	4621      	mov	r1, r4
 8005aee:	f7ff ff5d 	bl	80059ac <__sflush_r>
 8005af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005af4:	07da      	lsls	r2, r3, #31
 8005af6:	4605      	mov	r5, r0
 8005af8:	d4e4      	bmi.n	8005ac4 <_fflush_r+0xc>
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	059b      	lsls	r3, r3, #22
 8005afe:	d4e1      	bmi.n	8005ac4 <_fflush_r+0xc>
 8005b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b02:	f7fd fb35 	bl	8003170 <__retarget_lock_release_recursive>
 8005b06:	e7dd      	b.n	8005ac4 <_fflush_r+0xc>

08005b08 <memmove>:
 8005b08:	4288      	cmp	r0, r1
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	eb01 0402 	add.w	r4, r1, r2
 8005b10:	d902      	bls.n	8005b18 <memmove+0x10>
 8005b12:	4284      	cmp	r4, r0
 8005b14:	4623      	mov	r3, r4
 8005b16:	d807      	bhi.n	8005b28 <memmove+0x20>
 8005b18:	1e43      	subs	r3, r0, #1
 8005b1a:	42a1      	cmp	r1, r4
 8005b1c:	d008      	beq.n	8005b30 <memmove+0x28>
 8005b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b26:	e7f8      	b.n	8005b1a <memmove+0x12>
 8005b28:	4402      	add	r2, r0
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	428a      	cmp	r2, r1
 8005b2e:	d100      	bne.n	8005b32 <memmove+0x2a>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b3a:	e7f7      	b.n	8005b2c <memmove+0x24>

08005b3c <strncmp>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	b16a      	cbz	r2, 8005b5c <strncmp+0x20>
 8005b40:	3901      	subs	r1, #1
 8005b42:	1884      	adds	r4, r0, r2
 8005b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d103      	bne.n	8005b58 <strncmp+0x1c>
 8005b50:	42a0      	cmp	r0, r4
 8005b52:	d001      	beq.n	8005b58 <strncmp+0x1c>
 8005b54:	2a00      	cmp	r2, #0
 8005b56:	d1f5      	bne.n	8005b44 <strncmp+0x8>
 8005b58:	1ad0      	subs	r0, r2, r3
 8005b5a:	bd10      	pop	{r4, pc}
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	e7fc      	b.n	8005b5a <strncmp+0x1e>

08005b60 <_sbrk_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d06      	ldr	r5, [pc, #24]	; (8005b7c <_sbrk_r+0x1c>)
 8005b64:	2300      	movs	r3, #0
 8005b66:	4604      	mov	r4, r0
 8005b68:	4608      	mov	r0, r1
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	f7fb fdb0 	bl	80016d0 <_sbrk>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_sbrk_r+0x1a>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_sbrk_r+0x1a>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	200005dc 	.word	0x200005dc

08005b80 <memcpy>:
 8005b80:	440a      	add	r2, r1
 8005b82:	4291      	cmp	r1, r2
 8005b84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005b88:	d100      	bne.n	8005b8c <memcpy+0xc>
 8005b8a:	4770      	bx	lr
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b96:	4291      	cmp	r1, r2
 8005b98:	d1f9      	bne.n	8005b8e <memcpy+0xe>
 8005b9a:	bd10      	pop	{r4, pc}
 8005b9c:	0000      	movs	r0, r0
	...

08005ba0 <nan>:
 8005ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005ba8 <nan+0x8>
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	00000000 	.word	0x00000000
 8005bac:	7ff80000 	.word	0x7ff80000

08005bb0 <__assert_func>:
 8005bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bb2:	4614      	mov	r4, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <__assert_func+0x2c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4605      	mov	r5, r0
 8005bbc:	68d8      	ldr	r0, [r3, #12]
 8005bbe:	b14c      	cbz	r4, 8005bd4 <__assert_func+0x24>
 8005bc0:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <__assert_func+0x30>)
 8005bc2:	9100      	str	r1, [sp, #0]
 8005bc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005bc8:	4906      	ldr	r1, [pc, #24]	; (8005be4 <__assert_func+0x34>)
 8005bca:	462b      	mov	r3, r5
 8005bcc:	f000 fbca 	bl	8006364 <fiprintf>
 8005bd0:	f000 fbda 	bl	8006388 <abort>
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <__assert_func+0x38>)
 8005bd6:	461c      	mov	r4, r3
 8005bd8:	e7f3      	b.n	8005bc2 <__assert_func+0x12>
 8005bda:	bf00      	nop
 8005bdc:	20000058 	.word	0x20000058
 8005be0:	0800727a 	.word	0x0800727a
 8005be4:	08007287 	.word	0x08007287
 8005be8:	080072b5 	.word	0x080072b5

08005bec <_calloc_r>:
 8005bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bee:	fba1 2402 	umull	r2, r4, r1, r2
 8005bf2:	b94c      	cbnz	r4, 8005c08 <_calloc_r+0x1c>
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	9201      	str	r2, [sp, #4]
 8005bf8:	f7fe f9b0 	bl	8003f5c <_malloc_r>
 8005bfc:	9a01      	ldr	r2, [sp, #4]
 8005bfe:	4605      	mov	r5, r0
 8005c00:	b930      	cbnz	r0, 8005c10 <_calloc_r+0x24>
 8005c02:	4628      	mov	r0, r5
 8005c04:	b003      	add	sp, #12
 8005c06:	bd30      	pop	{r4, r5, pc}
 8005c08:	220c      	movs	r2, #12
 8005c0a:	6002      	str	r2, [r0, #0]
 8005c0c:	2500      	movs	r5, #0
 8005c0e:	e7f8      	b.n	8005c02 <_calloc_r+0x16>
 8005c10:	4621      	mov	r1, r4
 8005c12:	f7fd fa2e 	bl	8003072 <memset>
 8005c16:	e7f4      	b.n	8005c02 <_calloc_r+0x16>

08005c18 <rshift>:
 8005c18:	6903      	ldr	r3, [r0, #16]
 8005c1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005c1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c22:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005c26:	f100 0414 	add.w	r4, r0, #20
 8005c2a:	dd45      	ble.n	8005cb8 <rshift+0xa0>
 8005c2c:	f011 011f 	ands.w	r1, r1, #31
 8005c30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005c34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005c38:	d10c      	bne.n	8005c54 <rshift+0x3c>
 8005c3a:	f100 0710 	add.w	r7, r0, #16
 8005c3e:	4629      	mov	r1, r5
 8005c40:	42b1      	cmp	r1, r6
 8005c42:	d334      	bcc.n	8005cae <rshift+0x96>
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	1eea      	subs	r2, r5, #3
 8005c4a:	4296      	cmp	r6, r2
 8005c4c:	bf38      	it	cc
 8005c4e:	2300      	movcc	r3, #0
 8005c50:	4423      	add	r3, r4
 8005c52:	e015      	b.n	8005c80 <rshift+0x68>
 8005c54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005c58:	f1c1 0820 	rsb	r8, r1, #32
 8005c5c:	40cf      	lsrs	r7, r1
 8005c5e:	f105 0e04 	add.w	lr, r5, #4
 8005c62:	46a1      	mov	r9, r4
 8005c64:	4576      	cmp	r6, lr
 8005c66:	46f4      	mov	ip, lr
 8005c68:	d815      	bhi.n	8005c96 <rshift+0x7e>
 8005c6a:	1a9a      	subs	r2, r3, r2
 8005c6c:	0092      	lsls	r2, r2, #2
 8005c6e:	3a04      	subs	r2, #4
 8005c70:	3501      	adds	r5, #1
 8005c72:	42ae      	cmp	r6, r5
 8005c74:	bf38      	it	cc
 8005c76:	2200      	movcc	r2, #0
 8005c78:	18a3      	adds	r3, r4, r2
 8005c7a:	50a7      	str	r7, [r4, r2]
 8005c7c:	b107      	cbz	r7, 8005c80 <rshift+0x68>
 8005c7e:	3304      	adds	r3, #4
 8005c80:	1b1a      	subs	r2, r3, r4
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005c88:	bf08      	it	eq
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	6102      	str	r2, [r0, #16]
 8005c8e:	bf08      	it	eq
 8005c90:	6143      	streq	r3, [r0, #20]
 8005c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c96:	f8dc c000 	ldr.w	ip, [ip]
 8005c9a:	fa0c fc08 	lsl.w	ip, ip, r8
 8005c9e:	ea4c 0707 	orr.w	r7, ip, r7
 8005ca2:	f849 7b04 	str.w	r7, [r9], #4
 8005ca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005caa:	40cf      	lsrs	r7, r1
 8005cac:	e7da      	b.n	8005c64 <rshift+0x4c>
 8005cae:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cb2:	f847 cf04 	str.w	ip, [r7, #4]!
 8005cb6:	e7c3      	b.n	8005c40 <rshift+0x28>
 8005cb8:	4623      	mov	r3, r4
 8005cba:	e7e1      	b.n	8005c80 <rshift+0x68>

08005cbc <__hexdig_fun>:
 8005cbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005cc0:	2b09      	cmp	r3, #9
 8005cc2:	d802      	bhi.n	8005cca <__hexdig_fun+0xe>
 8005cc4:	3820      	subs	r0, #32
 8005cc6:	b2c0      	uxtb	r0, r0
 8005cc8:	4770      	bx	lr
 8005cca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d801      	bhi.n	8005cd6 <__hexdig_fun+0x1a>
 8005cd2:	3847      	subs	r0, #71	; 0x47
 8005cd4:	e7f7      	b.n	8005cc6 <__hexdig_fun+0xa>
 8005cd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d801      	bhi.n	8005ce2 <__hexdig_fun+0x26>
 8005cde:	3827      	subs	r0, #39	; 0x27
 8005ce0:	e7f1      	b.n	8005cc6 <__hexdig_fun+0xa>
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	4770      	bx	lr
	...

08005ce8 <__gethex>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	4617      	mov	r7, r2
 8005cee:	680a      	ldr	r2, [r1, #0]
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	f102 0b02 	add.w	fp, r2, #2
 8005cf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005cfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005cfe:	4681      	mov	r9, r0
 8005d00:	468a      	mov	sl, r1
 8005d02:	9302      	str	r3, [sp, #8]
 8005d04:	32fe      	adds	r2, #254	; 0xfe
 8005d06:	eb02 030b 	add.w	r3, r2, fp
 8005d0a:	46d8      	mov	r8, fp
 8005d0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005d10:	9301      	str	r3, [sp, #4]
 8005d12:	2830      	cmp	r0, #48	; 0x30
 8005d14:	d0f7      	beq.n	8005d06 <__gethex+0x1e>
 8005d16:	f7ff ffd1 	bl	8005cbc <__hexdig_fun>
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d138      	bne.n	8005d92 <__gethex+0xaa>
 8005d20:	49a7      	ldr	r1, [pc, #668]	; (8005fc0 <__gethex+0x2d8>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	4640      	mov	r0, r8
 8005d26:	f7ff ff09 	bl	8005b3c <strncmp>
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d169      	bne.n	8005e04 <__gethex+0x11c>
 8005d30:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005d34:	465d      	mov	r5, fp
 8005d36:	f7ff ffc1 	bl	8005cbc <__hexdig_fun>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d064      	beq.n	8005e08 <__gethex+0x120>
 8005d3e:	465a      	mov	r2, fp
 8005d40:	7810      	ldrb	r0, [r2, #0]
 8005d42:	2830      	cmp	r0, #48	; 0x30
 8005d44:	4690      	mov	r8, r2
 8005d46:	f102 0201 	add.w	r2, r2, #1
 8005d4a:	d0f9      	beq.n	8005d40 <__gethex+0x58>
 8005d4c:	f7ff ffb6 	bl	8005cbc <__hexdig_fun>
 8005d50:	2301      	movs	r3, #1
 8005d52:	fab0 f480 	clz	r4, r0
 8005d56:	0964      	lsrs	r4, r4, #5
 8005d58:	465e      	mov	r6, fp
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	4615      	mov	r5, r2
 8005d60:	3201      	adds	r2, #1
 8005d62:	7828      	ldrb	r0, [r5, #0]
 8005d64:	f7ff ffaa 	bl	8005cbc <__hexdig_fun>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d1f8      	bne.n	8005d5e <__gethex+0x76>
 8005d6c:	4994      	ldr	r1, [pc, #592]	; (8005fc0 <__gethex+0x2d8>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4628      	mov	r0, r5
 8005d72:	f7ff fee3 	bl	8005b3c <strncmp>
 8005d76:	b978      	cbnz	r0, 8005d98 <__gethex+0xb0>
 8005d78:	b946      	cbnz	r6, 8005d8c <__gethex+0xa4>
 8005d7a:	1c6e      	adds	r6, r5, #1
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	4615      	mov	r5, r2
 8005d80:	3201      	adds	r2, #1
 8005d82:	7828      	ldrb	r0, [r5, #0]
 8005d84:	f7ff ff9a 	bl	8005cbc <__hexdig_fun>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d1f8      	bne.n	8005d7e <__gethex+0x96>
 8005d8c:	1b73      	subs	r3, r6, r5
 8005d8e:	009e      	lsls	r6, r3, #2
 8005d90:	e004      	b.n	8005d9c <__gethex+0xb4>
 8005d92:	2400      	movs	r4, #0
 8005d94:	4626      	mov	r6, r4
 8005d96:	e7e1      	b.n	8005d5c <__gethex+0x74>
 8005d98:	2e00      	cmp	r6, #0
 8005d9a:	d1f7      	bne.n	8005d8c <__gethex+0xa4>
 8005d9c:	782b      	ldrb	r3, [r5, #0]
 8005d9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005da2:	2b50      	cmp	r3, #80	; 0x50
 8005da4:	d13d      	bne.n	8005e22 <__gethex+0x13a>
 8005da6:	786b      	ldrb	r3, [r5, #1]
 8005da8:	2b2b      	cmp	r3, #43	; 0x2b
 8005daa:	d02f      	beq.n	8005e0c <__gethex+0x124>
 8005dac:	2b2d      	cmp	r3, #45	; 0x2d
 8005dae:	d031      	beq.n	8005e14 <__gethex+0x12c>
 8005db0:	1c69      	adds	r1, r5, #1
 8005db2:	f04f 0b00 	mov.w	fp, #0
 8005db6:	7808      	ldrb	r0, [r1, #0]
 8005db8:	f7ff ff80 	bl	8005cbc <__hexdig_fun>
 8005dbc:	1e42      	subs	r2, r0, #1
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	2a18      	cmp	r2, #24
 8005dc2:	d82e      	bhi.n	8005e22 <__gethex+0x13a>
 8005dc4:	f1a0 0210 	sub.w	r2, r0, #16
 8005dc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005dcc:	f7ff ff76 	bl	8005cbc <__hexdig_fun>
 8005dd0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8005dd4:	fa5f fc8c 	uxtb.w	ip, ip
 8005dd8:	f1bc 0f18 	cmp.w	ip, #24
 8005ddc:	d91d      	bls.n	8005e1a <__gethex+0x132>
 8005dde:	f1bb 0f00 	cmp.w	fp, #0
 8005de2:	d000      	beq.n	8005de6 <__gethex+0xfe>
 8005de4:	4252      	negs	r2, r2
 8005de6:	4416      	add	r6, r2
 8005de8:	f8ca 1000 	str.w	r1, [sl]
 8005dec:	b1dc      	cbz	r4, 8005e26 <__gethex+0x13e>
 8005dee:	9b01      	ldr	r3, [sp, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bf14      	ite	ne
 8005df4:	f04f 0800 	movne.w	r8, #0
 8005df8:	f04f 0806 	moveq.w	r8, #6
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	b005      	add	sp, #20
 8005e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e04:	4645      	mov	r5, r8
 8005e06:	4626      	mov	r6, r4
 8005e08:	2401      	movs	r4, #1
 8005e0a:	e7c7      	b.n	8005d9c <__gethex+0xb4>
 8005e0c:	f04f 0b00 	mov.w	fp, #0
 8005e10:	1ca9      	adds	r1, r5, #2
 8005e12:	e7d0      	b.n	8005db6 <__gethex+0xce>
 8005e14:	f04f 0b01 	mov.w	fp, #1
 8005e18:	e7fa      	b.n	8005e10 <__gethex+0x128>
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	fb03 0002 	mla	r0, r3, r2, r0
 8005e20:	e7d0      	b.n	8005dc4 <__gethex+0xdc>
 8005e22:	4629      	mov	r1, r5
 8005e24:	e7e0      	b.n	8005de8 <__gethex+0x100>
 8005e26:	eba5 0308 	sub.w	r3, r5, r8
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	2b07      	cmp	r3, #7
 8005e30:	dc0a      	bgt.n	8005e48 <__gethex+0x160>
 8005e32:	4648      	mov	r0, r9
 8005e34:	f7fe f91e 	bl	8004074 <_Balloc>
 8005e38:	4604      	mov	r4, r0
 8005e3a:	b940      	cbnz	r0, 8005e4e <__gethex+0x166>
 8005e3c:	4b61      	ldr	r3, [pc, #388]	; (8005fc4 <__gethex+0x2dc>)
 8005e3e:	4602      	mov	r2, r0
 8005e40:	21e4      	movs	r1, #228	; 0xe4
 8005e42:	4861      	ldr	r0, [pc, #388]	; (8005fc8 <__gethex+0x2e0>)
 8005e44:	f7ff feb4 	bl	8005bb0 <__assert_func>
 8005e48:	3101      	adds	r1, #1
 8005e4a:	105b      	asrs	r3, r3, #1
 8005e4c:	e7ef      	b.n	8005e2e <__gethex+0x146>
 8005e4e:	f100 0a14 	add.w	sl, r0, #20
 8005e52:	2300      	movs	r3, #0
 8005e54:	495a      	ldr	r1, [pc, #360]	; (8005fc0 <__gethex+0x2d8>)
 8005e56:	f8cd a004 	str.w	sl, [sp, #4]
 8005e5a:	469b      	mov	fp, r3
 8005e5c:	45a8      	cmp	r8, r5
 8005e5e:	d342      	bcc.n	8005ee6 <__gethex+0x1fe>
 8005e60:	9801      	ldr	r0, [sp, #4]
 8005e62:	f840 bb04 	str.w	fp, [r0], #4
 8005e66:	eba0 000a 	sub.w	r0, r0, sl
 8005e6a:	1080      	asrs	r0, r0, #2
 8005e6c:	6120      	str	r0, [r4, #16]
 8005e6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8005e72:	4658      	mov	r0, fp
 8005e74:	f7fe f9f0 	bl	8004258 <__hi0bits>
 8005e78:	683d      	ldr	r5, [r7, #0]
 8005e7a:	eba8 0000 	sub.w	r0, r8, r0
 8005e7e:	42a8      	cmp	r0, r5
 8005e80:	dd59      	ble.n	8005f36 <__gethex+0x24e>
 8005e82:	eba0 0805 	sub.w	r8, r0, r5
 8005e86:	4641      	mov	r1, r8
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f7fe fd7f 	bl	800498c <__any_on>
 8005e8e:	4683      	mov	fp, r0
 8005e90:	b1b8      	cbz	r0, 8005ec2 <__gethex+0x1da>
 8005e92:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005e96:	1159      	asrs	r1, r3, #5
 8005e98:	f003 021f 	and.w	r2, r3, #31
 8005e9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005ea0:	f04f 0b01 	mov.w	fp, #1
 8005ea4:	fa0b f202 	lsl.w	r2, fp, r2
 8005ea8:	420a      	tst	r2, r1
 8005eaa:	d00a      	beq.n	8005ec2 <__gethex+0x1da>
 8005eac:	455b      	cmp	r3, fp
 8005eae:	dd06      	ble.n	8005ebe <__gethex+0x1d6>
 8005eb0:	f1a8 0102 	sub.w	r1, r8, #2
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7fe fd69 	bl	800498c <__any_on>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d138      	bne.n	8005f30 <__gethex+0x248>
 8005ebe:	f04f 0b02 	mov.w	fp, #2
 8005ec2:	4641      	mov	r1, r8
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7ff fea7 	bl	8005c18 <rshift>
 8005eca:	4446      	add	r6, r8
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	42b3      	cmp	r3, r6
 8005ed0:	da41      	bge.n	8005f56 <__gethex+0x26e>
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4648      	mov	r0, r9
 8005ed6:	f7fe f90d 	bl	80040f4 <_Bfree>
 8005eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005edc:	2300      	movs	r3, #0
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8005ee4:	e78a      	b.n	8005dfc <__gethex+0x114>
 8005ee6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8005eea:	2a2e      	cmp	r2, #46	; 0x2e
 8005eec:	d014      	beq.n	8005f18 <__gethex+0x230>
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d106      	bne.n	8005f00 <__gethex+0x218>
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	f843 bb04 	str.w	fp, [r3], #4
 8005ef8:	f04f 0b00 	mov.w	fp, #0
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	465b      	mov	r3, fp
 8005f00:	7828      	ldrb	r0, [r5, #0]
 8005f02:	9303      	str	r3, [sp, #12]
 8005f04:	f7ff feda 	bl	8005cbc <__hexdig_fun>
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	f000 000f 	and.w	r0, r0, #15
 8005f0e:	4098      	lsls	r0, r3
 8005f10:	ea4b 0b00 	orr.w	fp, fp, r0
 8005f14:	3304      	adds	r3, #4
 8005f16:	e7a1      	b.n	8005e5c <__gethex+0x174>
 8005f18:	45a8      	cmp	r8, r5
 8005f1a:	d8e8      	bhi.n	8005eee <__gethex+0x206>
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	4628      	mov	r0, r5
 8005f20:	9303      	str	r3, [sp, #12]
 8005f22:	f7ff fe0b 	bl	8005b3c <strncmp>
 8005f26:	4926      	ldr	r1, [pc, #152]	; (8005fc0 <__gethex+0x2d8>)
 8005f28:	9b03      	ldr	r3, [sp, #12]
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d1df      	bne.n	8005eee <__gethex+0x206>
 8005f2e:	e795      	b.n	8005e5c <__gethex+0x174>
 8005f30:	f04f 0b03 	mov.w	fp, #3
 8005f34:	e7c5      	b.n	8005ec2 <__gethex+0x1da>
 8005f36:	da0b      	bge.n	8005f50 <__gethex+0x268>
 8005f38:	eba5 0800 	sub.w	r8, r5, r0
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4642      	mov	r2, r8
 8005f40:	4648      	mov	r0, r9
 8005f42:	f7fe faf1 	bl	8004528 <__lshift>
 8005f46:	eba6 0608 	sub.w	r6, r6, r8
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	f100 0a14 	add.w	sl, r0, #20
 8005f50:	f04f 0b00 	mov.w	fp, #0
 8005f54:	e7ba      	b.n	8005ecc <__gethex+0x1e4>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	42b3      	cmp	r3, r6
 8005f5a:	dd73      	ble.n	8006044 <__gethex+0x35c>
 8005f5c:	1b9e      	subs	r6, r3, r6
 8005f5e:	42b5      	cmp	r5, r6
 8005f60:	dc34      	bgt.n	8005fcc <__gethex+0x2e4>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d023      	beq.n	8005fb0 <__gethex+0x2c8>
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d025      	beq.n	8005fb8 <__gethex+0x2d0>
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d115      	bne.n	8005f9c <__gethex+0x2b4>
 8005f70:	42b5      	cmp	r5, r6
 8005f72:	d113      	bne.n	8005f9c <__gethex+0x2b4>
 8005f74:	2d01      	cmp	r5, #1
 8005f76:	d10b      	bne.n	8005f90 <__gethex+0x2a8>
 8005f78:	9a02      	ldr	r2, [sp, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	2301      	movs	r3, #1
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	f8ca 3000 	str.w	r3, [sl]
 8005f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f88:	f04f 0862 	mov.w	r8, #98	; 0x62
 8005f8c:	601c      	str	r4, [r3, #0]
 8005f8e:	e735      	b.n	8005dfc <__gethex+0x114>
 8005f90:	1e69      	subs	r1, r5, #1
 8005f92:	4620      	mov	r0, r4
 8005f94:	f7fe fcfa 	bl	800498c <__any_on>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d1ed      	bne.n	8005f78 <__gethex+0x290>
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4648      	mov	r0, r9
 8005fa0:	f7fe f8a8 	bl	80040f4 <_Bfree>
 8005fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	f04f 0850 	mov.w	r8, #80	; 0x50
 8005fae:	e725      	b.n	8005dfc <__gethex+0x114>
 8005fb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f2      	bne.n	8005f9c <__gethex+0x2b4>
 8005fb6:	e7df      	b.n	8005f78 <__gethex+0x290>
 8005fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1dc      	bne.n	8005f78 <__gethex+0x290>
 8005fbe:	e7ed      	b.n	8005f9c <__gethex+0x2b4>
 8005fc0:	0800710c 	.word	0x0800710c
 8005fc4:	08006fa5 	.word	0x08006fa5
 8005fc8:	080072b6 	.word	0x080072b6
 8005fcc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8005fd0:	f1bb 0f00 	cmp.w	fp, #0
 8005fd4:	d133      	bne.n	800603e <__gethex+0x356>
 8005fd6:	f1b8 0f00 	cmp.w	r8, #0
 8005fda:	d004      	beq.n	8005fe6 <__gethex+0x2fe>
 8005fdc:	4641      	mov	r1, r8
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7fe fcd4 	bl	800498c <__any_on>
 8005fe4:	4683      	mov	fp, r0
 8005fe6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8005fea:	2301      	movs	r3, #1
 8005fec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005ff0:	f008 081f 	and.w	r8, r8, #31
 8005ff4:	fa03 f308 	lsl.w	r3, r3, r8
 8005ff8:	4213      	tst	r3, r2
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	bf18      	it	ne
 8006000:	f04b 0b02 	orrne.w	fp, fp, #2
 8006004:	1bad      	subs	r5, r5, r6
 8006006:	f7ff fe07 	bl	8005c18 <rshift>
 800600a:	687e      	ldr	r6, [r7, #4]
 800600c:	f04f 0802 	mov.w	r8, #2
 8006010:	f1bb 0f00 	cmp.w	fp, #0
 8006014:	d04a      	beq.n	80060ac <__gethex+0x3c4>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d016      	beq.n	800604a <__gethex+0x362>
 800601c:	2b03      	cmp	r3, #3
 800601e:	d018      	beq.n	8006052 <__gethex+0x36a>
 8006020:	2b01      	cmp	r3, #1
 8006022:	d109      	bne.n	8006038 <__gethex+0x350>
 8006024:	f01b 0f02 	tst.w	fp, #2
 8006028:	d006      	beq.n	8006038 <__gethex+0x350>
 800602a:	f8da 3000 	ldr.w	r3, [sl]
 800602e:	ea4b 0b03 	orr.w	fp, fp, r3
 8006032:	f01b 0f01 	tst.w	fp, #1
 8006036:	d10f      	bne.n	8006058 <__gethex+0x370>
 8006038:	f048 0810 	orr.w	r8, r8, #16
 800603c:	e036      	b.n	80060ac <__gethex+0x3c4>
 800603e:	f04f 0b01 	mov.w	fp, #1
 8006042:	e7d0      	b.n	8005fe6 <__gethex+0x2fe>
 8006044:	f04f 0801 	mov.w	r8, #1
 8006048:	e7e2      	b.n	8006010 <__gethex+0x328>
 800604a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800604c:	f1c3 0301 	rsb	r3, r3, #1
 8006050:	930f      	str	r3, [sp, #60]	; 0x3c
 8006052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0ef      	beq.n	8006038 <__gethex+0x350>
 8006058:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800605c:	f104 0214 	add.w	r2, r4, #20
 8006060:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800606a:	2300      	movs	r3, #0
 800606c:	4694      	mov	ip, r2
 800606e:	f852 1b04 	ldr.w	r1, [r2], #4
 8006072:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8006076:	d01e      	beq.n	80060b6 <__gethex+0x3ce>
 8006078:	3101      	adds	r1, #1
 800607a:	f8cc 1000 	str.w	r1, [ip]
 800607e:	f1b8 0f02 	cmp.w	r8, #2
 8006082:	f104 0214 	add.w	r2, r4, #20
 8006086:	d13d      	bne.n	8006104 <__gethex+0x41c>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	3b01      	subs	r3, #1
 800608c:	42ab      	cmp	r3, r5
 800608e:	d10b      	bne.n	80060a8 <__gethex+0x3c0>
 8006090:	1169      	asrs	r1, r5, #5
 8006092:	2301      	movs	r3, #1
 8006094:	f005 051f 	and.w	r5, r5, #31
 8006098:	fa03 f505 	lsl.w	r5, r3, r5
 800609c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060a0:	421d      	tst	r5, r3
 80060a2:	bf18      	it	ne
 80060a4:	f04f 0801 	movne.w	r8, #1
 80060a8:	f048 0820 	orr.w	r8, r8, #32
 80060ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ae:	601c      	str	r4, [r3, #0]
 80060b0:	9b02      	ldr	r3, [sp, #8]
 80060b2:	601e      	str	r6, [r3, #0]
 80060b4:	e6a2      	b.n	8005dfc <__gethex+0x114>
 80060b6:	4290      	cmp	r0, r2
 80060b8:	f842 3c04 	str.w	r3, [r2, #-4]
 80060bc:	d8d6      	bhi.n	800606c <__gethex+0x384>
 80060be:	68a2      	ldr	r2, [r4, #8]
 80060c0:	4593      	cmp	fp, r2
 80060c2:	db17      	blt.n	80060f4 <__gethex+0x40c>
 80060c4:	6861      	ldr	r1, [r4, #4]
 80060c6:	4648      	mov	r0, r9
 80060c8:	3101      	adds	r1, #1
 80060ca:	f7fd ffd3 	bl	8004074 <_Balloc>
 80060ce:	4682      	mov	sl, r0
 80060d0:	b918      	cbnz	r0, 80060da <__gethex+0x3f2>
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <__gethex+0x458>)
 80060d4:	4602      	mov	r2, r0
 80060d6:	2184      	movs	r1, #132	; 0x84
 80060d8:	e6b3      	b.n	8005e42 <__gethex+0x15a>
 80060da:	6922      	ldr	r2, [r4, #16]
 80060dc:	3202      	adds	r2, #2
 80060de:	f104 010c 	add.w	r1, r4, #12
 80060e2:	0092      	lsls	r2, r2, #2
 80060e4:	300c      	adds	r0, #12
 80060e6:	f7ff fd4b 	bl	8005b80 <memcpy>
 80060ea:	4621      	mov	r1, r4
 80060ec:	4648      	mov	r0, r9
 80060ee:	f7fe f801 	bl	80040f4 <_Bfree>
 80060f2:	4654      	mov	r4, sl
 80060f4:	6922      	ldr	r2, [r4, #16]
 80060f6:	1c51      	adds	r1, r2, #1
 80060f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80060fc:	6121      	str	r1, [r4, #16]
 80060fe:	2101      	movs	r1, #1
 8006100:	6151      	str	r1, [r2, #20]
 8006102:	e7bc      	b.n	800607e <__gethex+0x396>
 8006104:	6921      	ldr	r1, [r4, #16]
 8006106:	4559      	cmp	r1, fp
 8006108:	dd0b      	ble.n	8006122 <__gethex+0x43a>
 800610a:	2101      	movs	r1, #1
 800610c:	4620      	mov	r0, r4
 800610e:	f7ff fd83 	bl	8005c18 <rshift>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3601      	adds	r6, #1
 8006116:	42b3      	cmp	r3, r6
 8006118:	f6ff aedb 	blt.w	8005ed2 <__gethex+0x1ea>
 800611c:	f04f 0801 	mov.w	r8, #1
 8006120:	e7c2      	b.n	80060a8 <__gethex+0x3c0>
 8006122:	f015 051f 	ands.w	r5, r5, #31
 8006126:	d0f9      	beq.n	800611c <__gethex+0x434>
 8006128:	9b01      	ldr	r3, [sp, #4]
 800612a:	441a      	add	r2, r3
 800612c:	f1c5 0520 	rsb	r5, r5, #32
 8006130:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8006134:	f7fe f890 	bl	8004258 <__hi0bits>
 8006138:	42a8      	cmp	r0, r5
 800613a:	dbe6      	blt.n	800610a <__gethex+0x422>
 800613c:	e7ee      	b.n	800611c <__gethex+0x434>
 800613e:	bf00      	nop
 8006140:	08006fa5 	.word	0x08006fa5

08006144 <L_shift>:
 8006144:	f1c2 0208 	rsb	r2, r2, #8
 8006148:	0092      	lsls	r2, r2, #2
 800614a:	b570      	push	{r4, r5, r6, lr}
 800614c:	f1c2 0620 	rsb	r6, r2, #32
 8006150:	6843      	ldr	r3, [r0, #4]
 8006152:	6804      	ldr	r4, [r0, #0]
 8006154:	fa03 f506 	lsl.w	r5, r3, r6
 8006158:	432c      	orrs	r4, r5
 800615a:	40d3      	lsrs	r3, r2
 800615c:	6004      	str	r4, [r0, #0]
 800615e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006162:	4288      	cmp	r0, r1
 8006164:	d3f4      	bcc.n	8006150 <L_shift+0xc>
 8006166:	bd70      	pop	{r4, r5, r6, pc}

08006168 <__match>:
 8006168:	b530      	push	{r4, r5, lr}
 800616a:	6803      	ldr	r3, [r0, #0]
 800616c:	3301      	adds	r3, #1
 800616e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006172:	b914      	cbnz	r4, 800617a <__match+0x12>
 8006174:	6003      	str	r3, [r0, #0]
 8006176:	2001      	movs	r0, #1
 8006178:	bd30      	pop	{r4, r5, pc}
 800617a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800617e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006182:	2d19      	cmp	r5, #25
 8006184:	bf98      	it	ls
 8006186:	3220      	addls	r2, #32
 8006188:	42a2      	cmp	r2, r4
 800618a:	d0f0      	beq.n	800616e <__match+0x6>
 800618c:	2000      	movs	r0, #0
 800618e:	e7f3      	b.n	8006178 <__match+0x10>

08006190 <__hexnan>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	680b      	ldr	r3, [r1, #0]
 8006196:	6801      	ldr	r1, [r0, #0]
 8006198:	115e      	asrs	r6, r3, #5
 800619a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800619e:	f013 031f 	ands.w	r3, r3, #31
 80061a2:	b087      	sub	sp, #28
 80061a4:	bf18      	it	ne
 80061a6:	3604      	addne	r6, #4
 80061a8:	2500      	movs	r5, #0
 80061aa:	1f37      	subs	r7, r6, #4
 80061ac:	4682      	mov	sl, r0
 80061ae:	4690      	mov	r8, r2
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80061b6:	46b9      	mov	r9, r7
 80061b8:	463c      	mov	r4, r7
 80061ba:	9502      	str	r5, [sp, #8]
 80061bc:	46ab      	mov	fp, r5
 80061be:	784a      	ldrb	r2, [r1, #1]
 80061c0:	1c4b      	adds	r3, r1, #1
 80061c2:	9303      	str	r3, [sp, #12]
 80061c4:	b342      	cbz	r2, 8006218 <__hexnan+0x88>
 80061c6:	4610      	mov	r0, r2
 80061c8:	9105      	str	r1, [sp, #20]
 80061ca:	9204      	str	r2, [sp, #16]
 80061cc:	f7ff fd76 	bl	8005cbc <__hexdig_fun>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d14f      	bne.n	8006274 <__hexnan+0xe4>
 80061d4:	9a04      	ldr	r2, [sp, #16]
 80061d6:	9905      	ldr	r1, [sp, #20]
 80061d8:	2a20      	cmp	r2, #32
 80061da:	d818      	bhi.n	800620e <__hexnan+0x7e>
 80061dc:	9b02      	ldr	r3, [sp, #8]
 80061de:	459b      	cmp	fp, r3
 80061e0:	dd13      	ble.n	800620a <__hexnan+0x7a>
 80061e2:	454c      	cmp	r4, r9
 80061e4:	d206      	bcs.n	80061f4 <__hexnan+0x64>
 80061e6:	2d07      	cmp	r5, #7
 80061e8:	dc04      	bgt.n	80061f4 <__hexnan+0x64>
 80061ea:	462a      	mov	r2, r5
 80061ec:	4649      	mov	r1, r9
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff ffa8 	bl	8006144 <L_shift>
 80061f4:	4544      	cmp	r4, r8
 80061f6:	d950      	bls.n	800629a <__hexnan+0x10a>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f1a4 0904 	sub.w	r9, r4, #4
 80061fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8006202:	f8cd b008 	str.w	fp, [sp, #8]
 8006206:	464c      	mov	r4, r9
 8006208:	461d      	mov	r5, r3
 800620a:	9903      	ldr	r1, [sp, #12]
 800620c:	e7d7      	b.n	80061be <__hexnan+0x2e>
 800620e:	2a29      	cmp	r2, #41	; 0x29
 8006210:	d155      	bne.n	80062be <__hexnan+0x12e>
 8006212:	3102      	adds	r1, #2
 8006214:	f8ca 1000 	str.w	r1, [sl]
 8006218:	f1bb 0f00 	cmp.w	fp, #0
 800621c:	d04f      	beq.n	80062be <__hexnan+0x12e>
 800621e:	454c      	cmp	r4, r9
 8006220:	d206      	bcs.n	8006230 <__hexnan+0xa0>
 8006222:	2d07      	cmp	r5, #7
 8006224:	dc04      	bgt.n	8006230 <__hexnan+0xa0>
 8006226:	462a      	mov	r2, r5
 8006228:	4649      	mov	r1, r9
 800622a:	4620      	mov	r0, r4
 800622c:	f7ff ff8a 	bl	8006144 <L_shift>
 8006230:	4544      	cmp	r4, r8
 8006232:	d934      	bls.n	800629e <__hexnan+0x10e>
 8006234:	f1a8 0204 	sub.w	r2, r8, #4
 8006238:	4623      	mov	r3, r4
 800623a:	f853 1b04 	ldr.w	r1, [r3], #4
 800623e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006242:	429f      	cmp	r7, r3
 8006244:	d2f9      	bcs.n	800623a <__hexnan+0xaa>
 8006246:	1b3b      	subs	r3, r7, r4
 8006248:	f023 0303 	bic.w	r3, r3, #3
 800624c:	3304      	adds	r3, #4
 800624e:	3e03      	subs	r6, #3
 8006250:	3401      	adds	r4, #1
 8006252:	42a6      	cmp	r6, r4
 8006254:	bf38      	it	cc
 8006256:	2304      	movcc	r3, #4
 8006258:	4443      	add	r3, r8
 800625a:	2200      	movs	r2, #0
 800625c:	f843 2b04 	str.w	r2, [r3], #4
 8006260:	429f      	cmp	r7, r3
 8006262:	d2fb      	bcs.n	800625c <__hexnan+0xcc>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	b91b      	cbnz	r3, 8006270 <__hexnan+0xe0>
 8006268:	4547      	cmp	r7, r8
 800626a:	d126      	bne.n	80062ba <__hexnan+0x12a>
 800626c:	2301      	movs	r3, #1
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	2005      	movs	r0, #5
 8006272:	e025      	b.n	80062c0 <__hexnan+0x130>
 8006274:	3501      	adds	r5, #1
 8006276:	2d08      	cmp	r5, #8
 8006278:	f10b 0b01 	add.w	fp, fp, #1
 800627c:	dd06      	ble.n	800628c <__hexnan+0xfc>
 800627e:	4544      	cmp	r4, r8
 8006280:	d9c3      	bls.n	800620a <__hexnan+0x7a>
 8006282:	2300      	movs	r3, #0
 8006284:	f844 3c04 	str.w	r3, [r4, #-4]
 8006288:	2501      	movs	r5, #1
 800628a:	3c04      	subs	r4, #4
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	f000 000f 	and.w	r0, r0, #15
 8006292:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006296:	6020      	str	r0, [r4, #0]
 8006298:	e7b7      	b.n	800620a <__hexnan+0x7a>
 800629a:	2508      	movs	r5, #8
 800629c:	e7b5      	b.n	800620a <__hexnan+0x7a>
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0df      	beq.n	8006264 <__hexnan+0xd4>
 80062a4:	f1c3 0320 	rsb	r3, r3, #32
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ac:	40da      	lsrs	r2, r3
 80062ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80062b2:	4013      	ands	r3, r2
 80062b4:	f846 3c04 	str.w	r3, [r6, #-4]
 80062b8:	e7d4      	b.n	8006264 <__hexnan+0xd4>
 80062ba:	3f04      	subs	r7, #4
 80062bc:	e7d2      	b.n	8006264 <__hexnan+0xd4>
 80062be:	2004      	movs	r0, #4
 80062c0:	b007      	add	sp, #28
 80062c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062c6 <__ascii_mbtowc>:
 80062c6:	b082      	sub	sp, #8
 80062c8:	b901      	cbnz	r1, 80062cc <__ascii_mbtowc+0x6>
 80062ca:	a901      	add	r1, sp, #4
 80062cc:	b142      	cbz	r2, 80062e0 <__ascii_mbtowc+0x1a>
 80062ce:	b14b      	cbz	r3, 80062e4 <__ascii_mbtowc+0x1e>
 80062d0:	7813      	ldrb	r3, [r2, #0]
 80062d2:	600b      	str	r3, [r1, #0]
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	1e10      	subs	r0, r2, #0
 80062d8:	bf18      	it	ne
 80062da:	2001      	movne	r0, #1
 80062dc:	b002      	add	sp, #8
 80062de:	4770      	bx	lr
 80062e0:	4610      	mov	r0, r2
 80062e2:	e7fb      	b.n	80062dc <__ascii_mbtowc+0x16>
 80062e4:	f06f 0001 	mvn.w	r0, #1
 80062e8:	e7f8      	b.n	80062dc <__ascii_mbtowc+0x16>

080062ea <_realloc_r>:
 80062ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ee:	4680      	mov	r8, r0
 80062f0:	4614      	mov	r4, r2
 80062f2:	460e      	mov	r6, r1
 80062f4:	b921      	cbnz	r1, 8006300 <_realloc_r+0x16>
 80062f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	4611      	mov	r1, r2
 80062fc:	f7fd be2e 	b.w	8003f5c <_malloc_r>
 8006300:	b92a      	cbnz	r2, 800630e <_realloc_r+0x24>
 8006302:	f7fd fdb7 	bl	8003e74 <_free_r>
 8006306:	4625      	mov	r5, r4
 8006308:	4628      	mov	r0, r5
 800630a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800630e:	f000 f842 	bl	8006396 <_malloc_usable_size_r>
 8006312:	4284      	cmp	r4, r0
 8006314:	4607      	mov	r7, r0
 8006316:	d802      	bhi.n	800631e <_realloc_r+0x34>
 8006318:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800631c:	d812      	bhi.n	8006344 <_realloc_r+0x5a>
 800631e:	4621      	mov	r1, r4
 8006320:	4640      	mov	r0, r8
 8006322:	f7fd fe1b 	bl	8003f5c <_malloc_r>
 8006326:	4605      	mov	r5, r0
 8006328:	2800      	cmp	r0, #0
 800632a:	d0ed      	beq.n	8006308 <_realloc_r+0x1e>
 800632c:	42bc      	cmp	r4, r7
 800632e:	4622      	mov	r2, r4
 8006330:	4631      	mov	r1, r6
 8006332:	bf28      	it	cs
 8006334:	463a      	movcs	r2, r7
 8006336:	f7ff fc23 	bl	8005b80 <memcpy>
 800633a:	4631      	mov	r1, r6
 800633c:	4640      	mov	r0, r8
 800633e:	f7fd fd99 	bl	8003e74 <_free_r>
 8006342:	e7e1      	b.n	8006308 <_realloc_r+0x1e>
 8006344:	4635      	mov	r5, r6
 8006346:	e7df      	b.n	8006308 <_realloc_r+0x1e>

08006348 <__ascii_wctomb>:
 8006348:	b149      	cbz	r1, 800635e <__ascii_wctomb+0x16>
 800634a:	2aff      	cmp	r2, #255	; 0xff
 800634c:	bf85      	ittet	hi
 800634e:	238a      	movhi	r3, #138	; 0x8a
 8006350:	6003      	strhi	r3, [r0, #0]
 8006352:	700a      	strbls	r2, [r1, #0]
 8006354:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006358:	bf98      	it	ls
 800635a:	2001      	movls	r0, #1
 800635c:	4770      	bx	lr
 800635e:	4608      	mov	r0, r1
 8006360:	4770      	bx	lr
	...

08006364 <fiprintf>:
 8006364:	b40e      	push	{r1, r2, r3}
 8006366:	b503      	push	{r0, r1, lr}
 8006368:	4601      	mov	r1, r0
 800636a:	ab03      	add	r3, sp, #12
 800636c:	4805      	ldr	r0, [pc, #20]	; (8006384 <fiprintf+0x20>)
 800636e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006372:	6800      	ldr	r0, [r0, #0]
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	f000 f83f 	bl	80063f8 <_vfiprintf_r>
 800637a:	b002      	add	sp, #8
 800637c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006380:	b003      	add	sp, #12
 8006382:	4770      	bx	lr
 8006384:	20000058 	.word	0x20000058

08006388 <abort>:
 8006388:	b508      	push	{r3, lr}
 800638a:	2006      	movs	r0, #6
 800638c:	f000 fa0c 	bl	80067a8 <raise>
 8006390:	2001      	movs	r0, #1
 8006392:	f7fb f925 	bl	80015e0 <_exit>

08006396 <_malloc_usable_size_r>:
 8006396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800639a:	1f18      	subs	r0, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	bfbc      	itt	lt
 80063a0:	580b      	ldrlt	r3, [r1, r0]
 80063a2:	18c0      	addlt	r0, r0, r3
 80063a4:	4770      	bx	lr

080063a6 <__sfputc_r>:
 80063a6:	6893      	ldr	r3, [r2, #8]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	b410      	push	{r4}
 80063ae:	6093      	str	r3, [r2, #8]
 80063b0:	da08      	bge.n	80063c4 <__sfputc_r+0x1e>
 80063b2:	6994      	ldr	r4, [r2, #24]
 80063b4:	42a3      	cmp	r3, r4
 80063b6:	db01      	blt.n	80063bc <__sfputc_r+0x16>
 80063b8:	290a      	cmp	r1, #10
 80063ba:	d103      	bne.n	80063c4 <__sfputc_r+0x1e>
 80063bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063c0:	f000 b934 	b.w	800662c <__swbuf_r>
 80063c4:	6813      	ldr	r3, [r2, #0]
 80063c6:	1c58      	adds	r0, r3, #1
 80063c8:	6010      	str	r0, [r2, #0]
 80063ca:	7019      	strb	r1, [r3, #0]
 80063cc:	4608      	mov	r0, r1
 80063ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <__sfputs_r>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	4606      	mov	r6, r0
 80063d8:	460f      	mov	r7, r1
 80063da:	4614      	mov	r4, r2
 80063dc:	18d5      	adds	r5, r2, r3
 80063de:	42ac      	cmp	r4, r5
 80063e0:	d101      	bne.n	80063e6 <__sfputs_r+0x12>
 80063e2:	2000      	movs	r0, #0
 80063e4:	e007      	b.n	80063f6 <__sfputs_r+0x22>
 80063e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ea:	463a      	mov	r2, r7
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff ffda 	bl	80063a6 <__sfputc_r>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	d1f3      	bne.n	80063de <__sfputs_r+0xa>
 80063f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063f8 <_vfiprintf_r>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	460d      	mov	r5, r1
 80063fe:	b09d      	sub	sp, #116	; 0x74
 8006400:	4614      	mov	r4, r2
 8006402:	4698      	mov	r8, r3
 8006404:	4606      	mov	r6, r0
 8006406:	b118      	cbz	r0, 8006410 <_vfiprintf_r+0x18>
 8006408:	6a03      	ldr	r3, [r0, #32]
 800640a:	b90b      	cbnz	r3, 8006410 <_vfiprintf_r+0x18>
 800640c:	f7fc fd98 	bl	8002f40 <__sinit>
 8006410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006412:	07d9      	lsls	r1, r3, #31
 8006414:	d405      	bmi.n	8006422 <_vfiprintf_r+0x2a>
 8006416:	89ab      	ldrh	r3, [r5, #12]
 8006418:	059a      	lsls	r2, r3, #22
 800641a:	d402      	bmi.n	8006422 <_vfiprintf_r+0x2a>
 800641c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800641e:	f7fc fea6 	bl	800316e <__retarget_lock_acquire_recursive>
 8006422:	89ab      	ldrh	r3, [r5, #12]
 8006424:	071b      	lsls	r3, r3, #28
 8006426:	d501      	bpl.n	800642c <_vfiprintf_r+0x34>
 8006428:	692b      	ldr	r3, [r5, #16]
 800642a:	b99b      	cbnz	r3, 8006454 <_vfiprintf_r+0x5c>
 800642c:	4629      	mov	r1, r5
 800642e:	4630      	mov	r0, r6
 8006430:	f000 f93a 	bl	80066a8 <__swsetup_r>
 8006434:	b170      	cbz	r0, 8006454 <_vfiprintf_r+0x5c>
 8006436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006438:	07dc      	lsls	r4, r3, #31
 800643a:	d504      	bpl.n	8006446 <_vfiprintf_r+0x4e>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006440:	b01d      	add	sp, #116	; 0x74
 8006442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	0598      	lsls	r0, r3, #22
 800644a:	d4f7      	bmi.n	800643c <_vfiprintf_r+0x44>
 800644c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644e:	f7fc fe8f 	bl	8003170 <__retarget_lock_release_recursive>
 8006452:	e7f3      	b.n	800643c <_vfiprintf_r+0x44>
 8006454:	2300      	movs	r3, #0
 8006456:	9309      	str	r3, [sp, #36]	; 0x24
 8006458:	2320      	movs	r3, #32
 800645a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800645e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006462:	2330      	movs	r3, #48	; 0x30
 8006464:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006618 <_vfiprintf_r+0x220>
 8006468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800646c:	f04f 0901 	mov.w	r9, #1
 8006470:	4623      	mov	r3, r4
 8006472:	469a      	mov	sl, r3
 8006474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006478:	b10a      	cbz	r2, 800647e <_vfiprintf_r+0x86>
 800647a:	2a25      	cmp	r2, #37	; 0x25
 800647c:	d1f9      	bne.n	8006472 <_vfiprintf_r+0x7a>
 800647e:	ebba 0b04 	subs.w	fp, sl, r4
 8006482:	d00b      	beq.n	800649c <_vfiprintf_r+0xa4>
 8006484:	465b      	mov	r3, fp
 8006486:	4622      	mov	r2, r4
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff ffa2 	bl	80063d4 <__sfputs_r>
 8006490:	3001      	adds	r0, #1
 8006492:	f000 80a9 	beq.w	80065e8 <_vfiprintf_r+0x1f0>
 8006496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006498:	445a      	add	r2, fp
 800649a:	9209      	str	r2, [sp, #36]	; 0x24
 800649c:	f89a 3000 	ldrb.w	r3, [sl]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a1 	beq.w	80065e8 <_vfiprintf_r+0x1f0>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b0:	f10a 0a01 	add.w	sl, sl, #1
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064bc:	931a      	str	r3, [sp, #104]	; 0x68
 80064be:	4654      	mov	r4, sl
 80064c0:	2205      	movs	r2, #5
 80064c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c6:	4854      	ldr	r0, [pc, #336]	; (8006618 <_vfiprintf_r+0x220>)
 80064c8:	f7f9 fe8a 	bl	80001e0 <memchr>
 80064cc:	9a04      	ldr	r2, [sp, #16]
 80064ce:	b9d8      	cbnz	r0, 8006508 <_vfiprintf_r+0x110>
 80064d0:	06d1      	lsls	r1, r2, #27
 80064d2:	bf44      	itt	mi
 80064d4:	2320      	movmi	r3, #32
 80064d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064da:	0713      	lsls	r3, r2, #28
 80064dc:	bf44      	itt	mi
 80064de:	232b      	movmi	r3, #43	; 0x2b
 80064e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e4:	f89a 3000 	ldrb.w	r3, [sl]
 80064e8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ea:	d015      	beq.n	8006518 <_vfiprintf_r+0x120>
 80064ec:	9a07      	ldr	r2, [sp, #28]
 80064ee:	4654      	mov	r4, sl
 80064f0:	2000      	movs	r0, #0
 80064f2:	f04f 0c0a 	mov.w	ip, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fc:	3b30      	subs	r3, #48	; 0x30
 80064fe:	2b09      	cmp	r3, #9
 8006500:	d94d      	bls.n	800659e <_vfiprintf_r+0x1a6>
 8006502:	b1b0      	cbz	r0, 8006532 <_vfiprintf_r+0x13a>
 8006504:	9207      	str	r2, [sp, #28]
 8006506:	e014      	b.n	8006532 <_vfiprintf_r+0x13a>
 8006508:	eba0 0308 	sub.w	r3, r0, r8
 800650c:	fa09 f303 	lsl.w	r3, r9, r3
 8006510:	4313      	orrs	r3, r2
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	46a2      	mov	sl, r4
 8006516:	e7d2      	b.n	80064be <_vfiprintf_r+0xc6>
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	1d19      	adds	r1, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	9103      	str	r1, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfbb      	ittet	lt
 8006524:	425b      	neglt	r3, r3
 8006526:	f042 0202 	orrlt.w	r2, r2, #2
 800652a:	9307      	strge	r3, [sp, #28]
 800652c:	9307      	strlt	r3, [sp, #28]
 800652e:	bfb8      	it	lt
 8006530:	9204      	strlt	r2, [sp, #16]
 8006532:	7823      	ldrb	r3, [r4, #0]
 8006534:	2b2e      	cmp	r3, #46	; 0x2e
 8006536:	d10c      	bne.n	8006552 <_vfiprintf_r+0x15a>
 8006538:	7863      	ldrb	r3, [r4, #1]
 800653a:	2b2a      	cmp	r3, #42	; 0x2a
 800653c:	d134      	bne.n	80065a8 <_vfiprintf_r+0x1b0>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	9203      	str	r2, [sp, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	bfb8      	it	lt
 800654a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800654e:	3402      	adds	r4, #2
 8006550:	9305      	str	r3, [sp, #20]
 8006552:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006628 <_vfiprintf_r+0x230>
 8006556:	7821      	ldrb	r1, [r4, #0]
 8006558:	2203      	movs	r2, #3
 800655a:	4650      	mov	r0, sl
 800655c:	f7f9 fe40 	bl	80001e0 <memchr>
 8006560:	b138      	cbz	r0, 8006572 <_vfiprintf_r+0x17a>
 8006562:	9b04      	ldr	r3, [sp, #16]
 8006564:	eba0 000a 	sub.w	r0, r0, sl
 8006568:	2240      	movs	r2, #64	; 0x40
 800656a:	4082      	lsls	r2, r0
 800656c:	4313      	orrs	r3, r2
 800656e:	3401      	adds	r4, #1
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006576:	4829      	ldr	r0, [pc, #164]	; (800661c <_vfiprintf_r+0x224>)
 8006578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800657c:	2206      	movs	r2, #6
 800657e:	f7f9 fe2f 	bl	80001e0 <memchr>
 8006582:	2800      	cmp	r0, #0
 8006584:	d03f      	beq.n	8006606 <_vfiprintf_r+0x20e>
 8006586:	4b26      	ldr	r3, [pc, #152]	; (8006620 <_vfiprintf_r+0x228>)
 8006588:	bb1b      	cbnz	r3, 80065d2 <_vfiprintf_r+0x1da>
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	3307      	adds	r3, #7
 800658e:	f023 0307 	bic.w	r3, r3, #7
 8006592:	3308      	adds	r3, #8
 8006594:	9303      	str	r3, [sp, #12]
 8006596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006598:	443b      	add	r3, r7
 800659a:	9309      	str	r3, [sp, #36]	; 0x24
 800659c:	e768      	b.n	8006470 <_vfiprintf_r+0x78>
 800659e:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a2:	460c      	mov	r4, r1
 80065a4:	2001      	movs	r0, #1
 80065a6:	e7a6      	b.n	80064f6 <_vfiprintf_r+0xfe>
 80065a8:	2300      	movs	r3, #0
 80065aa:	3401      	adds	r4, #1
 80065ac:	9305      	str	r3, [sp, #20]
 80065ae:	4619      	mov	r1, r3
 80065b0:	f04f 0c0a 	mov.w	ip, #10
 80065b4:	4620      	mov	r0, r4
 80065b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ba:	3a30      	subs	r2, #48	; 0x30
 80065bc:	2a09      	cmp	r2, #9
 80065be:	d903      	bls.n	80065c8 <_vfiprintf_r+0x1d0>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0c6      	beq.n	8006552 <_vfiprintf_r+0x15a>
 80065c4:	9105      	str	r1, [sp, #20]
 80065c6:	e7c4      	b.n	8006552 <_vfiprintf_r+0x15a>
 80065c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80065cc:	4604      	mov	r4, r0
 80065ce:	2301      	movs	r3, #1
 80065d0:	e7f0      	b.n	80065b4 <_vfiprintf_r+0x1bc>
 80065d2:	ab03      	add	r3, sp, #12
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	462a      	mov	r2, r5
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <_vfiprintf_r+0x22c>)
 80065da:	a904      	add	r1, sp, #16
 80065dc:	4630      	mov	r0, r6
 80065de:	f7fb fe4d 	bl	800227c <_printf_float>
 80065e2:	4607      	mov	r7, r0
 80065e4:	1c78      	adds	r0, r7, #1
 80065e6:	d1d6      	bne.n	8006596 <_vfiprintf_r+0x19e>
 80065e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ea:	07d9      	lsls	r1, r3, #31
 80065ec:	d405      	bmi.n	80065fa <_vfiprintf_r+0x202>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	059a      	lsls	r2, r3, #22
 80065f2:	d402      	bmi.n	80065fa <_vfiprintf_r+0x202>
 80065f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f6:	f7fc fdbb 	bl	8003170 <__retarget_lock_release_recursive>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	065b      	lsls	r3, r3, #25
 80065fe:	f53f af1d 	bmi.w	800643c <_vfiprintf_r+0x44>
 8006602:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006604:	e71c      	b.n	8006440 <_vfiprintf_r+0x48>
 8006606:	ab03      	add	r3, sp, #12
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	462a      	mov	r2, r5
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <_vfiprintf_r+0x22c>)
 800660e:	a904      	add	r1, sp, #16
 8006610:	4630      	mov	r0, r6
 8006612:	f7fc f8d7 	bl	80027c4 <_printf_i>
 8006616:	e7e4      	b.n	80065e2 <_vfiprintf_r+0x1ea>
 8006618:	08007261 	.word	0x08007261
 800661c:	0800726b 	.word	0x0800726b
 8006620:	0800227d 	.word	0x0800227d
 8006624:	080063d5 	.word	0x080063d5
 8006628:	08007267 	.word	0x08007267

0800662c <__swbuf_r>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	460e      	mov	r6, r1
 8006630:	4614      	mov	r4, r2
 8006632:	4605      	mov	r5, r0
 8006634:	b118      	cbz	r0, 800663e <__swbuf_r+0x12>
 8006636:	6a03      	ldr	r3, [r0, #32]
 8006638:	b90b      	cbnz	r3, 800663e <__swbuf_r+0x12>
 800663a:	f7fc fc81 	bl	8002f40 <__sinit>
 800663e:	69a3      	ldr	r3, [r4, #24]
 8006640:	60a3      	str	r3, [r4, #8]
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	071a      	lsls	r2, r3, #28
 8006646:	d525      	bpl.n	8006694 <__swbuf_r+0x68>
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	b31b      	cbz	r3, 8006694 <__swbuf_r+0x68>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	6922      	ldr	r2, [r4, #16]
 8006650:	1a98      	subs	r0, r3, r2
 8006652:	6963      	ldr	r3, [r4, #20]
 8006654:	b2f6      	uxtb	r6, r6
 8006656:	4283      	cmp	r3, r0
 8006658:	4637      	mov	r7, r6
 800665a:	dc04      	bgt.n	8006666 <__swbuf_r+0x3a>
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f7ff fa2a 	bl	8005ab8 <_fflush_r>
 8006664:	b9e0      	cbnz	r0, 80066a0 <__swbuf_r+0x74>
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	3b01      	subs	r3, #1
 800666a:	60a3      	str	r3, [r4, #8]
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	6022      	str	r2, [r4, #0]
 8006672:	701e      	strb	r6, [r3, #0]
 8006674:	6962      	ldr	r2, [r4, #20]
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	429a      	cmp	r2, r3
 800667a:	d004      	beq.n	8006686 <__swbuf_r+0x5a>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	07db      	lsls	r3, r3, #31
 8006680:	d506      	bpl.n	8006690 <__swbuf_r+0x64>
 8006682:	2e0a      	cmp	r6, #10
 8006684:	d104      	bne.n	8006690 <__swbuf_r+0x64>
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f7ff fa15 	bl	8005ab8 <_fflush_r>
 800668e:	b938      	cbnz	r0, 80066a0 <__swbuf_r+0x74>
 8006690:	4638      	mov	r0, r7
 8006692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006694:	4621      	mov	r1, r4
 8006696:	4628      	mov	r0, r5
 8006698:	f000 f806 	bl	80066a8 <__swsetup_r>
 800669c:	2800      	cmp	r0, #0
 800669e:	d0d5      	beq.n	800664c <__swbuf_r+0x20>
 80066a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80066a4:	e7f4      	b.n	8006690 <__swbuf_r+0x64>
	...

080066a8 <__swsetup_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4b2a      	ldr	r3, [pc, #168]	; (8006754 <__swsetup_r+0xac>)
 80066ac:	4605      	mov	r5, r0
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	460c      	mov	r4, r1
 80066b2:	b118      	cbz	r0, 80066bc <__swsetup_r+0x14>
 80066b4:	6a03      	ldr	r3, [r0, #32]
 80066b6:	b90b      	cbnz	r3, 80066bc <__swsetup_r+0x14>
 80066b8:	f7fc fc42 	bl	8002f40 <__sinit>
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066c2:	0718      	lsls	r0, r3, #28
 80066c4:	d422      	bmi.n	800670c <__swsetup_r+0x64>
 80066c6:	06d9      	lsls	r1, r3, #27
 80066c8:	d407      	bmi.n	80066da <__swsetup_r+0x32>
 80066ca:	2309      	movs	r3, #9
 80066cc:	602b      	str	r3, [r5, #0]
 80066ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d8:	e034      	b.n	8006744 <__swsetup_r+0x9c>
 80066da:	0758      	lsls	r0, r3, #29
 80066dc:	d512      	bpl.n	8006704 <__swsetup_r+0x5c>
 80066de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e0:	b141      	cbz	r1, 80066f4 <__swsetup_r+0x4c>
 80066e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066e6:	4299      	cmp	r1, r3
 80066e8:	d002      	beq.n	80066f0 <__swsetup_r+0x48>
 80066ea:	4628      	mov	r0, r5
 80066ec:	f7fd fbc2 	bl	8003e74 <_free_r>
 80066f0:	2300      	movs	r3, #0
 80066f2:	6363      	str	r3, [r4, #52]	; 0x34
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066fa:	81a3      	strh	r3, [r4, #12]
 80066fc:	2300      	movs	r3, #0
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	f043 0308 	orr.w	r3, r3, #8
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	b94b      	cbnz	r3, 8006724 <__swsetup_r+0x7c>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671a:	d003      	beq.n	8006724 <__swsetup_r+0x7c>
 800671c:	4621      	mov	r1, r4
 800671e:	4628      	mov	r0, r5
 8006720:	f000 f884 	bl	800682c <__smakebuf_r>
 8006724:	89a0      	ldrh	r0, [r4, #12]
 8006726:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800672a:	f010 0301 	ands.w	r3, r0, #1
 800672e:	d00a      	beq.n	8006746 <__swsetup_r+0x9e>
 8006730:	2300      	movs	r3, #0
 8006732:	60a3      	str	r3, [r4, #8]
 8006734:	6963      	ldr	r3, [r4, #20]
 8006736:	425b      	negs	r3, r3
 8006738:	61a3      	str	r3, [r4, #24]
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	b943      	cbnz	r3, 8006750 <__swsetup_r+0xa8>
 800673e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006742:	d1c4      	bne.n	80066ce <__swsetup_r+0x26>
 8006744:	bd38      	pop	{r3, r4, r5, pc}
 8006746:	0781      	lsls	r1, r0, #30
 8006748:	bf58      	it	pl
 800674a:	6963      	ldrpl	r3, [r4, #20]
 800674c:	60a3      	str	r3, [r4, #8]
 800674e:	e7f4      	b.n	800673a <__swsetup_r+0x92>
 8006750:	2000      	movs	r0, #0
 8006752:	e7f7      	b.n	8006744 <__swsetup_r+0x9c>
 8006754:	20000058 	.word	0x20000058

08006758 <_raise_r>:
 8006758:	291f      	cmp	r1, #31
 800675a:	b538      	push	{r3, r4, r5, lr}
 800675c:	4604      	mov	r4, r0
 800675e:	460d      	mov	r5, r1
 8006760:	d904      	bls.n	800676c <_raise_r+0x14>
 8006762:	2316      	movs	r3, #22
 8006764:	6003      	str	r3, [r0, #0]
 8006766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800676e:	b112      	cbz	r2, 8006776 <_raise_r+0x1e>
 8006770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006774:	b94b      	cbnz	r3, 800678a <_raise_r+0x32>
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f830 	bl	80067dc <_getpid_r>
 800677c:	462a      	mov	r2, r5
 800677e:	4601      	mov	r1, r0
 8006780:	4620      	mov	r0, r4
 8006782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006786:	f000 b817 	b.w	80067b8 <_kill_r>
 800678a:	2b01      	cmp	r3, #1
 800678c:	d00a      	beq.n	80067a4 <_raise_r+0x4c>
 800678e:	1c59      	adds	r1, r3, #1
 8006790:	d103      	bne.n	800679a <_raise_r+0x42>
 8006792:	2316      	movs	r3, #22
 8006794:	6003      	str	r3, [r0, #0]
 8006796:	2001      	movs	r0, #1
 8006798:	e7e7      	b.n	800676a <_raise_r+0x12>
 800679a:	2400      	movs	r4, #0
 800679c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067a0:	4628      	mov	r0, r5
 80067a2:	4798      	blx	r3
 80067a4:	2000      	movs	r0, #0
 80067a6:	e7e0      	b.n	800676a <_raise_r+0x12>

080067a8 <raise>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <raise+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f7ff bfd3 	b.w	8006758 <_raise_r>
 80067b2:	bf00      	nop
 80067b4:	20000058 	.word	0x20000058

080067b8 <_kill_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d07      	ldr	r5, [pc, #28]	; (80067d8 <_kill_r+0x20>)
 80067bc:	2300      	movs	r3, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	4611      	mov	r1, r2
 80067c4:	602b      	str	r3, [r5, #0]
 80067c6:	f7fa fefb 	bl	80015c0 <_kill>
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	d102      	bne.n	80067d4 <_kill_r+0x1c>
 80067ce:	682b      	ldr	r3, [r5, #0]
 80067d0:	b103      	cbz	r3, 80067d4 <_kill_r+0x1c>
 80067d2:	6023      	str	r3, [r4, #0]
 80067d4:	bd38      	pop	{r3, r4, r5, pc}
 80067d6:	bf00      	nop
 80067d8:	200005dc 	.word	0x200005dc

080067dc <_getpid_r>:
 80067dc:	f7fa bee8 	b.w	80015b0 <_getpid>

080067e0 <__swhatbuf_r>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	460c      	mov	r4, r1
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	2900      	cmp	r1, #0
 80067ea:	b096      	sub	sp, #88	; 0x58
 80067ec:	4615      	mov	r5, r2
 80067ee:	461e      	mov	r6, r3
 80067f0:	da0d      	bge.n	800680e <__swhatbuf_r+0x2e>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067f8:	f04f 0100 	mov.w	r1, #0
 80067fc:	bf0c      	ite	eq
 80067fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006802:	2340      	movne	r3, #64	; 0x40
 8006804:	2000      	movs	r0, #0
 8006806:	6031      	str	r1, [r6, #0]
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	b016      	add	sp, #88	; 0x58
 800680c:	bd70      	pop	{r4, r5, r6, pc}
 800680e:	466a      	mov	r2, sp
 8006810:	f000 f848 	bl	80068a4 <_fstat_r>
 8006814:	2800      	cmp	r0, #0
 8006816:	dbec      	blt.n	80067f2 <__swhatbuf_r+0x12>
 8006818:	9901      	ldr	r1, [sp, #4]
 800681a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800681e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006822:	4259      	negs	r1, r3
 8006824:	4159      	adcs	r1, r3
 8006826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800682a:	e7eb      	b.n	8006804 <__swhatbuf_r+0x24>

0800682c <__smakebuf_r>:
 800682c:	898b      	ldrh	r3, [r1, #12]
 800682e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006830:	079d      	lsls	r5, r3, #30
 8006832:	4606      	mov	r6, r0
 8006834:	460c      	mov	r4, r1
 8006836:	d507      	bpl.n	8006848 <__smakebuf_r+0x1c>
 8006838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	2301      	movs	r3, #1
 8006842:	6163      	str	r3, [r4, #20]
 8006844:	b002      	add	sp, #8
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	ab01      	add	r3, sp, #4
 800684a:	466a      	mov	r2, sp
 800684c:	f7ff ffc8 	bl	80067e0 <__swhatbuf_r>
 8006850:	9900      	ldr	r1, [sp, #0]
 8006852:	4605      	mov	r5, r0
 8006854:	4630      	mov	r0, r6
 8006856:	f7fd fb81 	bl	8003f5c <_malloc_r>
 800685a:	b948      	cbnz	r0, 8006870 <__smakebuf_r+0x44>
 800685c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006860:	059a      	lsls	r2, r3, #22
 8006862:	d4ef      	bmi.n	8006844 <__smakebuf_r+0x18>
 8006864:	f023 0303 	bic.w	r3, r3, #3
 8006868:	f043 0302 	orr.w	r3, r3, #2
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	e7e3      	b.n	8006838 <__smakebuf_r+0xc>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	6020      	str	r0, [r4, #0]
 8006874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006878:	81a3      	strh	r3, [r4, #12]
 800687a:	9b00      	ldr	r3, [sp, #0]
 800687c:	6163      	str	r3, [r4, #20]
 800687e:	9b01      	ldr	r3, [sp, #4]
 8006880:	6120      	str	r0, [r4, #16]
 8006882:	b15b      	cbz	r3, 800689c <__smakebuf_r+0x70>
 8006884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006888:	4630      	mov	r0, r6
 800688a:	f000 f81d 	bl	80068c8 <_isatty_r>
 800688e:	b128      	cbz	r0, 800689c <__smakebuf_r+0x70>
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	f023 0303 	bic.w	r3, r3, #3
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	81a3      	strh	r3, [r4, #12]
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	431d      	orrs	r5, r3
 80068a0:	81a5      	strh	r5, [r4, #12]
 80068a2:	e7cf      	b.n	8006844 <__smakebuf_r+0x18>

080068a4 <_fstat_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d07      	ldr	r5, [pc, #28]	; (80068c4 <_fstat_r+0x20>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	4604      	mov	r4, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	4611      	mov	r1, r2
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	f7fa fee4 	bl	800167e <_fstat>
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	d102      	bne.n	80068c0 <_fstat_r+0x1c>
 80068ba:	682b      	ldr	r3, [r5, #0]
 80068bc:	b103      	cbz	r3, 80068c0 <_fstat_r+0x1c>
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
 80068c2:	bf00      	nop
 80068c4:	200005dc 	.word	0x200005dc

080068c8 <_isatty_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4d06      	ldr	r5, [pc, #24]	; (80068e4 <_isatty_r+0x1c>)
 80068cc:	2300      	movs	r3, #0
 80068ce:	4604      	mov	r4, r0
 80068d0:	4608      	mov	r0, r1
 80068d2:	602b      	str	r3, [r5, #0]
 80068d4:	f7fa fee3 	bl	800169e <_isatty>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d102      	bne.n	80068e2 <_isatty_r+0x1a>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	b103      	cbz	r3, 80068e2 <_isatty_r+0x1a>
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	200005dc 	.word	0x200005dc

080068e8 <_init>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	bf00      	nop
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr

080068f4 <_fini>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr
